{
	"info": {
		"_postman_id": "39cec2f0-4de4-484e-8e92-097f918ad111",
		"name": "Opencell",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API",
			"item": [
				{
					"name": "Accounting",
					"item": [
						{
							"name": "Account Code",
							"item": [
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b42d161f-9837-4944-a122-b81e92ed40ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44bd08cd-fbff-42ac-bcd8-4c71e42eb16e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.environment.get(\"testCode\"));",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Accounting Code ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30b8933f-fa45-42a5-8f13-74c295c0efaa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.environment.get(\"testCode\")+\" already exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0fa4f1c-9a8d-4f5a-88f0-7f0db343a430",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"chartOfAccountTypeEnum\": \"ASSETS\",\r\n    \"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61aa39f3-b2f3-4111-a019-f4f4d9d2408b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cac9ce4-0f34-4327-8922-2896322c53c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "426bc975-47b3-47ff-bd6f-d5173f70a411",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.environment.get(\"testCode\"));",
													"});",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.environment.get(\"testDescription\")+ \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58c09c61-2e46-431c-aa45-467f17f170f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5419f659-7be0-4395-a671-108901f0ee98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.ChartOfAccountViewTypeEnum`\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "OCC Template",
							"item": [
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b604bca-fc97-40ea-bfb3-a4299847f1a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OCC Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58371f70-a452-4b0b-9954-540b99bc8680",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.environment.get(\"testCode\")+\" already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca216f3f-ab63-41c3-9137-111ebac85f3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec8822f4-11f0-496f-a645-f6dcd0a082b9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95188fe5-7403-4b94-8d62-36cb787837a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa65d963-d0b0-4e84-a143-528ba101d305",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: accountCode / accountingCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_Missing\",\r\n  \"description\": \"{{testDescription}} missing\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0db75ea0-baff-4296-949b-17978a3af066",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.OperationCategoryEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Accounting Code GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb32891a-ff1f-4741-8080-d70759fbb292",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"is still referenced from table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22a97c5b-59ab-4c49-84f0-84f9bfd8847b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41fb8af6-78ef-43f0-825b-8d9414e02a43",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.environment.get(\"testCode\")+\" does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f77a2f2-5eed-4e36-8b33-0ab6a39b338c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2a1688f-2513-43fc-954b-b07efac755e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.environment.get(\"testCode\")+\" does not exists.\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "BillingCycle",
							"item": [
								{
									"name": "CreateOrUpdate Billing Cylcle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "275a4c02-dcbe-400d-9fb2-3c972a0bcdb4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35280e0c-b0e5-48f7-b08d-75f579ed5ca0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.environment.get(\"testCode\")+\"_BC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56da1c21-c56c-4c63-84f6-32cd51c95e04",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.environment.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffdc61ff-4253-4cb9-b12e-3fcab5687d33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BtN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5625b88a-b9d6-4b44-a1e3-e35c5ba6b804",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e17d0dde-4e9e-4c1f-a9a2-decd1060e667",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da9d5e53-4c31-4d58-83d3-037fc1ef93c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.environment.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13726f45-243e-49cf-aac8-5f6d46f89d87",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceDateDelay.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"MISSING\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"MONTHLY\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "878a21f2-033e-40f2-ab64-b0a59517bd34",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"NOT_EXIST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller",
							"item": [
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "664d6c21-adc2-4665-b879-91079b3b8f58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5827aef-c4b7-4f49-b8f2-4962f869f22b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=\"+pm.environment.get(\"testCode\")+\"_SELLER already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a5f3e2a-bba9-4caf-ae70-c6c9ea88c719",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.environment.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36659163-7f3b-4d2f-af6c-2d800809cf25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12dc592b-c781-41ed-91c6-4291aa6f2a44",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a705105-6fc0-4263-80ab-e0c15b9b80a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7574baf7-d2b7-403d-b8fc-325b4031988a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.environment.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a171dc-415e-4d78-a2b9-b0853b6cbd10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerBrand",
							"item": [
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43f46bee-f8f1-4f82-b087-64896f5bb8c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerBrand ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0ecff5b-9bd0-43b9-92a0-b60ddd82f00f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3b88bdc-d951-4abc-ba76-1f4d8a3e9bac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26cbab6f-d7fd-40d0-b57c-af9878ae4998",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "953c3f56-c523-4524-abbb-6a66a89b91d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fc03265-0f80-4274-8382-67a538ebf80a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Category",
							"item": [
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8807500-d5d9-42ed-a75d-5a5a5c876dde",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96fee613-e6b5-4b5f-8216-9fbc45de659e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56af3b77-49f9-4966-865a-8228e4fca7a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=\"+pm.environment.get(\"testCode\")+\"_CC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58ed8dea-f2aa-4844-b4b8-775fe691b436",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d6a6ffa-43ad-43fa-a28f-b8482681843d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac3a24cc-7b95-4cd9-8f7a-f858cd4cb94c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24118a53-73fe-43b1-83d2-29928aed6e7e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78e09b90-9831-46d0-ba2d-7db5101e2b7b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testCode}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18a24e12-d737-4483-8ffe-d327c1c6c9e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\",\r\n    \"accountingCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39813562-a1c3-4cdd-a73d-79ac621d9893",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"INVALID\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer",
							"item": [
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0d963c2-3052-4a4a-b84a-1bbca1317035",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aac9cf75-79d4-41e5-8beb-7088875b8f3f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "683cae8c-bb6c-4d6b-85c2-0eeb13aeecc6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_C already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ceee15c-4641-403f-a9d8-3aa493600d45",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "832b4f83-ef6f-42e0-9595-9d2141252119",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer with no other Fields SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "662168fd-a431-4517-8556-b402f782e833",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bbb5be8-649d-4fe1-bb21-8808c586c2e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db930947-e043-4d3a-aec9-cf5628dd0401",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36868e83-d5eb-499f-ba22-84e5f8144f43",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C_INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\t\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b014da4-92d4-46ac-b7fb-2365f28ee233",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateDate\": \"INVALID\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56f39a3d-561d-4757-91fd-3467b09c0443",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"NOT_EXIST\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f53a1b59-b66c-4490-ae8b-0bc4d6729100",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"NOT_EXIST\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bb94d9a-1c62-4eaa-bbf3-36f3515a1a25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"NOT_EXIST\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerAccount",
							"item": [
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d70ed226-6bb7-4173-a42c-73c7df80fcd3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b81006c1-3a78-416e-8069-bd07eb1048f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d207e7d-7d28-4efb-bf2c-cebc88a79865",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.environment.get(\"testCode\")+\"_CA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1943d950-b2a4-4fae-8694-1cd8912b19d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b5d62ae-16a8-49f1-a794-de6a3d7cd902",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b42de598-7231-4de1-8a99-61ad9448b378",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d784dd3e-2e35-4467-bec4-c6ee10bab74d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a6d55b4-be1b-4e51-bcdc-1c42848be92e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currency, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "438d63d2-3b97-4c5e-9e4a-68b989ada750",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"mandateDate\": \"INVALID\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9f71375-7d87-4c95-919d-1ee2e88f46f7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"customer\": \"NOT_EXIST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "BillingAccount",
							"item": [
								{
									"name": "CreateOrUpdate BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fa02243-f16d-4348-a0ac-f8f3833f14e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "030b7749-eb01-4bf3-81f8-0b9e7ba89b8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff359ae4-fff2-492c-a1f5-9976ecf55738",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.environment.get(\"testCode\")+\"_BA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cb043a9-18de-4f49-a68b-428482974b39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5410149-4689-46b6-99f4-e55c1e7ee2c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c0a62af-01af-41b8-a69a-cc2157f52e4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3fd5f97-2b4b-4259-be16-0e559e433843",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a98c2d92-3ea7-4b9f-950a-a138b7f1d9d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: country, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de8a6b1-0995-435d-86a8-7b3f18e4ddce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d32ab22-a02a-4ec1-8051-99983b29ac80",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserAccount",
							"item": [
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17166f20-f3ff-4077-b21c-de50ac692507",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bf715be-6bb6-4d56-9c0c-311aa023f1ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c94dc70-18f1-416e-a570-be0e231bd401",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.environment.get(\"testCode\")+\"_UA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18007a8c-58ab-4302-9fa5-3e9554ebea22",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca8cf4ff-551e-4dd2-b03d-16ce45851fca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47aa18f5-55d4-43ef-834b-650e6d7b0adf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c898bf0d-a86e-4b7f-ace2-99a333813e3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "522408c1-cf59-403d-bb01-ac2a5d9b53e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: billingAccount.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"MISSING\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab7b228c-94a9-45cb-bad6-14aa48c75eb3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.AccountStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"{{testCode}}_BA\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"INVALID\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f0ef0cf-36e8-43d5-8947-a33f1470e498",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"NOT_EXIST\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"ACTIVE\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider Contact",
							"item": [
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d74865e6-2d30-4853-9be5-4fe46f806173",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15389492-8aba-48ec-a8ce-66d1dd48d484",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.environment.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Provider Contact ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38ead483-dbe4-4e79-9043-3e7585508619",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.environment.get(\"testCode\")+\"_PC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20171c3e-66ba-49c6-a00e-aa02b061bbf9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8eab3e33-9f47-4cef-acb1-e64a409362c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41471236-a957-43f8-8a9c-d6ed6796fef1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7694470f-4415-4d62-a8d0-742a56e095cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.environment.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c54e335a-bacf-4a2f-bbc7-00f093082b30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: description.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INTERNAL_SERVER_ERROR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "438a3fe0-f962-4384-93bf-cbebe39403fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"At least 1 of the field in Contact Information tab is required [email, genericEmail, phone, mobile].\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cad2916-043e-4a16-ba47-42c22e5cf3e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.account.AddressDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfc0a57e-eb63-4588-bd4d-25d870dde261",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d68e0fc-a8d7-41f7-83bf-d433dbb2c124",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.environment.get(\"testCode\")+\"_PC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account Hierarchy",
							"item": [
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3f1287b-8f46-43fa-b6b8-7d5afbb8ec97",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "290eb0e9-16cb-4730-b1ac-be8b6aa42e3f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1cf2494-a7c3-45c0-b948-ee32cfe018f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16794e62-9704-4a44-a0cb-9a1154323554",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code='NOT_EXIST' does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"NOT_EXIST\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f821edfe-f754-4602-8eab-e9a1fa6c76f7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ace1932-8a6e-4a8a-9c02-949f4068254f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"SELLER_US\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85cdae9f-e968-478d-b430-6acfb01b8a17",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "327fcc3f-172c-4a4b-848a-db7a8b6b203e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCode, customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96412431-99e8-4e67-9428-deeeaf738b19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"customerCode\": \"{{testCode}}_CH\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dd447aa-bc0c-423f-aac6-696c0f7111ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"NOT_EXIST\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35aadb1f-38fd-4271-9b96-f7009c392ad6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"NOT_EXIST\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8f05d8b-89a3-4bbf-a241-e60387b46c25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_BC\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\",\r\n    \"birthDate\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2bbc0d4-45e8-4aed-8c5b-5b9a1894970e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04b584fa-edea-4498-8dc1-6000e1d4144f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa8ceb86-f59a-4390-91eb-cd8cca820bda",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbafe650-5edb-4aaf-a815-921468762dee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.environment.get(\"testCode\")+\"_UA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  DELETE_REFERENCED_ENTITY_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "200ad0ae-69f6-425b-9f4c-2722601e6227",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"DELETE_REFERENCED_ENTITY_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB is referenced.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dfa78d1-c822-412e-b2a8-55ee9d562619",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c8988a1-f7a4-47e8-81ef-c60a9890946c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.environment.get(\"testCode\")+\"_BA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "936b0a45-4cda-4a10-8eaf-ccf4992b92aa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ea3b2c0-4b69-4649-9d25-4334f6a5a537",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.environment.get(\"testCode\")+\"_CA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "581c59fc-3a07-4be7-9d71-fbe7209b4e09",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1084d627-79da-44b5-b715-780f77601c24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a9a9267-2aa0-4f90-ba2c-0060af3a00fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "419c836e-1d32-473b-b828-e73e2e11936e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\"+pm.environment.get(\"testCode\")+\"_SELLER does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "144636f7-e889-4979-9466-d3b6b2e6f9ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed3dadfb-cb91-49b4-aaee-232ab0ba432f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.environment.get(\"testCode\")+\"_BC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ddba98f-a93a-4ff5-92c9-fc69dd426103",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "618c6663-0687-4500-8cbf-669eb31ed83a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Administration",
					"item": [
						{
							"name": "Module",
							"item": [
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bab23d3e-d43f-4c3f-ac29-20801348a59f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "810893d3-caf1-4032-8322-a2e0c400e153",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.environment.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Module ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f61278d-46df-4502-964d-c39edd2dd1d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.environment.get(\"testCode\")+\"_MOD already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a81a1240-e87d-4954-a3f2-7ed49bb16d87",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9268b558-d794-4060-8d80-7026bf1bf77a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06d4bb02-7613-43f1-ab71-1f95f336167d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e8baa7f-aa9b-432d-8b6e-9c612f5a6a88",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.environment.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ecaee09-0ea9-456d-ad64-a82a92e57c7f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74f45b01-4928-4056-a169-8b6401ff88f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.environment.get(\"testCode\")+\"_MOD does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Job Instance",
							"item": [
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "089b9264-023e-412d-9cbf-04687d7e2cc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e1cc563-fea4-4f60-b36d-2095d6fbccd4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Job Instance ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6638802a-518d-4288-a5d5-815932ce2207",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.environment.get(\"testCode\")+\"_JI already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83e8e9db-4220-49dc-b946-471d1d728b46",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef324178-56ab-4ac3-bdbe-1c3e6bdd8da6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edfe25d1-b230-4753-aabf-c4ea81212c93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35c81402-8558-4108-bdb4-54d598d9dc79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d72aaec5-a52c-4565-8360-1f8afdfee3c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: SepaJob_ddRequestBuilder.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testDescription}}_JI\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4fd15cc-b71d-469f-8eef-d4ac7ba1df08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobTemplate with code 'NOT_EXIST' doesn't exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"NOT_EXIST\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "172bf21e-8430-480a-9136-1beb4010f61a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6e2f7bb-e7f2-4ccf-9ce7-87f8fb69bf17",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.environment.get(\"testCode\")+\"_JI does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Discount Plan",
							"item": [
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98a5c8af-40e7-465a-a44c-2fd3e7587493",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b143ad3-e073-4811-b64f-1bc5a31d4410",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.environment.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Discount Plan ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26d88ecb-c8e5-440a-8a67-1a468852a8c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.environment.get(\"testCode\")+\"_DP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e277ddaf-ac97-45f5-b80e-f59aece7b30b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"TEST\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "203188aa-e9f3-44f3-8f9f-65946775c337",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee84bfd1-6c46-45ee-a747-59e5e8346da9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e02969d8-a6f4-4535-8a40-015ad3dc1a94",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.environment.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1329478f-e995-4d9c-af53-7851cb093088",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"INVALID\",\r\n    \"endDate\": \"INVALID\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7201fa00-dc13-4d4b-86d8-5179794e2caf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23826000-8a45-49e5-bcc4-e331b47a4b4b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.environment.get(\"testCode\")+\"_DP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "Offer Template",
							"item": [
								{
									"name": "CreateOrUpdate  Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b11ec27-09a2-4137-ae72-9ee8d82a3368",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97de36fc-0d33-48d1-b067-5fad1a3e67ad",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6e38e08-1600-4a1b-bdc8-5b57463e9442",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OfferTemplate with code=\" + pm.environment.get(\"testCode\") + \"_OT / null / null already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9803b8c-9c08-4db2-8127-69b0d0677281",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OfferTemplate with code=NOT_EXIST /  /  does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e84105e-016e-4a18-888b-78157934f5d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61ad209d-efef-46ec-a042-18701f467fbc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "306e7801-e183-4ef1-b81c-2cda4e452ae8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76213521-2921-4b14-955b-4014c845e98c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.catalog.LifeCycleStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"INVALID\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"5_SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02066e03-947b-4a1b-8df9-9c234d36514c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07052c55-07ca-4d54-b05b-2139aebd286b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OfferTemplate with code=\" + pm.environment.get(\"testCode\") + \"_OT /  /  does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax Class",
							"item": [
								{
									"name": "CreateOrUpdate  Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9f1048d-4281-45c6-84bb-a99838c4c217",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4e8f53a-3ea4-4e43-ac73-1aaa5d2ccfb8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.environment.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6b2a780-4933-4c5f-aa54-5cb22fffa3d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.environment.get(\"testCode\") + \"_TC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc832f63-697b-4ae0-beea-18d8b0393fe8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a819087-8caa-424c-91c5-f2ccd8ce226f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34f8ad24-c60a-4d7f-bd03-c6867d2cc7d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "439d5ea6-dc87-45fe-9e62-cd722c484cd3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.environment.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d35a8119-0c27-4368-be07-fa699e6aa610",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"INVALID\",\r\n    \"descriptionI18n\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3262aa76-4904-491a-8a14-0b9c451c7284",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a9c9005f-bfd5-4cdf-9dae-6fa2836b2658",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Recurring Charge",
							"item": [
								{
									"name": "CreateOrUpdate  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d626b4b1-8e54-4a08-bf32-236bc80191bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58c765a4-9508-40cd-900c-e60a9d7dde59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring Charge  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87f2a17b-8b20-4d86-9c5e-5a5b38efff48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.environment.get(\"testCode\") + \"_RCT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73a2182c-ae3a-4216-927b-7185f4da5a01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f0a49d5-3012-435a-a600-2906e7bdcd87",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "600d6782-fa47-4172-81d1-a3b18b0c4522",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa37a403-0ed5-493c-8281-4310b83e6da0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef4db3c2-6729-4a33-8a7d-1961e3f94ca7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceSubCategory, calendar, taxClassCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc6a9010-0342-4c1a-8ca8-099534f4bd43",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"disabled\": \"INVAID\",\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c2aa090d-dc96-4d48-9897-942a5b8342ad",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "586cc8cd-f7c9-40ad-b358-7f94b10658d3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Price Plan",
							"item": [
								{
									"name": "CreateOrUpdate  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4943a652-b233-4f09-a67b-3968661363ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "526864ce-6c1b-4bce-acfb-b18fcc24f555",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "680e1b73-0e3a-439b-8655-d3f68e6c951d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.environment.get(\"testCode\") + \"_PP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3ff5083-3cc6-456a-8ed3-31c753c49262",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9304a8b-0dd3-4f90-a295-504ab4425cfa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1b1d736-90cc-4534-8bd1-9f8be7745a44",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d4ce383-66f5-4308-99fc-00a3facb1b6f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90bcf943-e437-4bb6-a26b-20266f50c4af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: eventCode, amountWithoutTax.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85020649-87bd-44cd-be1d-35f799ebb4be",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RcT\",\r\n    \"amountWithoutTax\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9844f3e9-f129-4111-847e-6d0c18875b8e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "927c20ed-47bb-42e8-a151-f4bad18c1ff3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.environment.get(\"testCode\") + \"_PP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8f0470f-fab9-4d34-8a88-385578ab8040",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cda97780-8266-498d-8c5c-35e59d0e22c2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service Template",
							"item": [
								{
									"name": "CreateOrUpdate  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1a4b92a-c14d-4241-8c92-7df830c6ac95",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51d342d0-9463-4059-8a7a-d845c4ad2f14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08749e2b-dc9c-4808-bbb8-db7afef3f9de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=\" + pm.environment.get(\"testCode\") + \"_ST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ad370e8-da2f-4ede-9ae2-b295d49c4f32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fbd44c8-abef-4890-9aa6-312e87f9eaaa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aaeae04e-5d99-4353-b5ac-905a445b4bf4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29e07c88-8196-4e31-92ef-79afd95ac7f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c72a3485-01b0-44c5-9574-d3fb2f05530d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5447efc4-0ff6-4636-987e-11c5990f47e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": \"INVALID\",\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "772afc07-aa8c-4ea1-a09e-1b780c9e34aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ad45cb3-70b7-4127-9cab-b141ac1cdfae",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Tax Class GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aac6f553-c3cc-408f-b3f3-93dc99f6793f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table \\\"billing_tax_class\\\" violates foreign key constraint\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac0f2941-031f-4c64-b7fd-1b3f15e7abf6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03c57eff-698f-4e0e-a09d-e5d473cf8a6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98a47098-19d1-4894-b231-612d6b9d7011",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=\" + pm.environment.get(\"testCode\") + \"_ST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef45e821-a25d-4198-86e2-b8c884031180",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0e67655-6fbc-44a9-a3ee-ac5dfc5b5047",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.environment.get(\"testCode\") + \"_RCT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7ec887c-0a24-4ead-b8a5-559b438ebaaf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e0babc-00ce-4135-bae0-71e282aeb3a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.environment.get(\"testCode\") + \"_TC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Billing",
					"item": [
						{
							"name": "Invoice Category",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce3fcce2-bb3e-400e-93db-013c03032fb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2511b0d0-5fd0-4d7c-aeac-e32d213c0805",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Category  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f13d2cd-401d-4e37-bc26-0f6537b8cc36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.environment.get(\"testCode\")+\"_IC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "078b46c2-91b3-49ce-a9db-7027365aeeff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e649060a-3fe2-497c-be05-1cec967cf0c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08018854-dc8e-4a6c-b9b7-b2a276177a40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5974721-233e-478e-98e7-cc222b1f4ddc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ec94634-6993-4ef8-a129-8b449b46d37c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b047b54-3dc0-42cd-859b-115d1057c2a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice SubCategory",
							"item": [
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ece7bd67-984c-449d-a2e1-648997672253",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8b4478a-8406-4812-b435-3f2e176b9dbf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice SubCategory  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf9b63db-dcd0-45c0-942b-7ab4ede23512",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.environment.get(\"testCode\")+\"_ISC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48bb0f9f-127c-44b3-9523-13653fbdf285",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf5c5093-d258-4a0e-a518-f20ec97cca29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79b04c64-aabe-4d2a-80e0-0f8b4fbdedcb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9651ed05-583d-4f67-8d9d-be3d763cca83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa09299b-6659-4b42-a684-53d746e68000",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfb1bdd3-c574-4c01-8a2d-88020f504258",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "248129b5-45ce-4c1d-86bf-f7982b4ad8da",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Sequence",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a504f44-b9d8-4b9b-9d58-779033e9e42f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2a04325-3e02-4a4f-be65-4d8fa7b62b88",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Sequence ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05c8bf51-2631-4e43-9fc9-bbe141a79800",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=\"+pm.environment.get(\"testCode\")+\"_IS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f81641b5-093c-4de4-b9ae-aff705e8b6ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d15e669-ac9a-43fc-956d-e6bb822b3028",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44d8bf7d-a711-427d-877f-a347db72a44d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee3394af-7774-4f8a-9141-9657a3b8c7bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "498b72e3-eb7f-4765-82b0-44c567fc917d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f912a046-7ac0-4eec-bf8b-d5c24dceb079",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"sequenceSize\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Invoice Category GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40e7c1c2-98ce-4dc7-a74a-885794291df9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbd89e71-9b31-4a54-8fee-bcbb6a845d0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f934a1b0-7407-42fb-a1e6-5f2277c2680d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.environment.get(\"testCode\")+\"_ISC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73d4a3d5-ab9d-48d1-9fd5-d66880d5c914",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32a01cfb-a758-499d-91c1-2fb8fb040fc6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.environment.get(\"testCode\")+\"_IC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wallet Operation",
							"item": [
								{
									"name": "Create Wallet Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77e94241-ce79-41c5-a17b-f2071e21c49e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03f281a2-44aa-4b5f-9ed7-8aceb5ac1397",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"WalletOperation with code=\"+pm.environment.get(\"testCode\")+\"_WLT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f963a44-52ed-4a9f-b08a-c7e1ea1b0e18",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: userAccount or subscription, chargeInstance or chargeInstanceId, currency, taxCode or taxPercent.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f21d7414-2b41-4b58-aad1-b4a7aa3ba7a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"subscriptionDate\": \"INVALID\",\r\n    \"chargeInstance\": \"PR_CLASSIC_DEFAULT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription",
					"item": [
						{
							"name": "Subscription",
							"item": [
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c930c19b-929f-4022-8fe4-3828afae07a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\t\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e366358e-9ed8-437a-8853-53287fa2f5aa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "520c559f-cb71-4ed3-a518-72a2657712a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=\"+pm.environment.get(\"testCode\")+\"_SUB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9654e35-d8a0-4a8f-8131-fd610ca5feb5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"userAccount\": \"ben.ohara\",\r\n\t\"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n\t\"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdd58f0c-7a18-4853-a4f1-da10a3e909d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "647d11fa-e151-4d1a-aa0e-b9ca18cbf714",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fdc1950-cb3d-4a31-b1fe-40ee270b37a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f35ff6c6-f5df-4e8e-9146-2ae205cecad5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"NOT_EXIST\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67665f50-140e-4dfc-bbed-5dae90e3783d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: subscriptionDate.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdff7f5e-20cd-4f83-8e79-c6780d8738c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46189819-94c7-419d-a6d7-66d349fcc2c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription RESILIATED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64c90175-ecab-4ba9-914a-f4d8f07847b0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription is already RESILIATED.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f00d25ce-3b07-4125-a454-8c7f5a72eb15",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cb8f674-da13-484c-a8ad-4053b51ef2f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=SUB_TEST_1 already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "Title",
							"item": [
								{
									"name": "CreateOrUpdate Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a18da6a-bee8-4dfa-aa8b-a5dcd0f48531",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e306e328-4ce9-48cd-afe2-e6c4d49f59b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.environment.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Title ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82d15397-13d1-402b-9cc7-82175ad9789a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.environment.get(\"testCode\")+\"_TITLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6d619d9-db33-4bd3-bb07-51b42f1c1901",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6cdf4d-df18-4529-9d96-a08a884b2dd6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f255583-093f-4e1e-ba03-d2de2bdd386b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14fb64e1-5733-44e7-a739-19a5b1d222f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.environment.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b9aeb7d-d627-4b4d-bb87-020354504e78",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: titleCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf260ab2-92dd-4d50-ac9d-9e99a9e0d22c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"Test\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1cadf95-ebc8-43bc-af89-c80e6867b687",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6844c105-6f3d-4ad8-b9a4-0b2291d141a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.environment.get(\"testCode\")+\"_TITLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Calendar",
							"item": [
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e949b20-153f-4b4b-bbbc-f9b7f94e4611",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a9915dd-f67c-4667-b288-b4accc61698b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.environment.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Calendar ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4d1fcd3-8784-46d5-a547-f83ead63213a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.environment.get(\"testCode\")+\"_CAL already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc726363-7768-45ba-b055-0401bb785cbd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74e43a0c-39ec-4d31-9451-5c2d9eb4083c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df98efe3-d781-421a-a2b7-0b1b62d82ed2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "648e96e0-6964-4202-a233-4a67f1a374a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.environment.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month) updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ea5df43-8cca-4ac6-9427-da936a21bcaf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: calendarType.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa978c80-ddea-46dc-b1db-4091326d3ea0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"query did not return a unique result\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7aa7d363-0e29-4c3c-8f4d-9f45f1739705",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.api.dto.CalendarTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"INVALID\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46a869ec-1d89-4d54-87fa-57f7db4abeb4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6044e661-c8ec-4b94-9b80-d07592ce877e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.environment.get(\"testCode\")+\"_CAL does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Channel",
							"item": [
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2067538a-5f27-4846-8c8f-27f182802536",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa005b4d-c546-44c7-8f4c-d2d57fdb0368",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Channel ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34c68491-2955-4726-83c3-a5b2de1c28d4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.environment.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d489785-f243-4390-881e-2df9feccf2bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d145c589-9456-40e2-9bae-f3c940ef4697",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecbb90fd-540c-4174-88b5-edaf13d69811",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11eb8595-b21f-4881-8530-ee595c2e48eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46326b37-f377-4b8b-bf96-e1447861c3fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e216625e-190a-4707-9aeb-98bd5f156031",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e84002a5-ccad-48b3-b7f9-d51027e40cd9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73749424-6027-4241-bcd8-c1b7fc9dba75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.environment.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CountryIso",
							"item": [
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "621f2615-d091-4385-90f5-8500a095b038",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc83d3db-dbb9-4966-908b-1d9d4e3b73e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CountryIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f79d672f-6af4-41a2-90ee-1971f8bec4cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=TS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5aae604c-7039-4dd7-b0b6-495b71cd6ffd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "111e3323-1993-4f77-b2f3-355f2118c12c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "699423cc-7807-4002-8960-b0c2188134cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec0fcda2-8605-4b41-bb87-b263030c14a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b9128d5-89c5-40e6-91de-ac5a48c2443c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currencyCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"MISSING\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5db3aa75-0c44-4e7c-bea3-b8e02a68003b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"languageDescriptions\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7c18bbd-769e-49da-a468-997ed9853835",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"countryCode size must be between 0 and 10\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5600fd7f-1946-48ca-997a-3559af88e103",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"NOT_EXIST\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f5221a9-6e9f-435a-9a78-cf903babb153",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bef42d90-04fc-4452-8c4c-062f46099d4c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=TS does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CurrencyIso",
							"item": [
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49d46a23-73f2-4d37-9da5-be4c52ccf8c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "361dcaa1-cd0d-4563-92f9-12397507fc50",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CurrencyIso ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4eeff12c-0fd4-4219-a734-b237ad873d4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2970664c-2d50-4a00-a3a1-23d23471e21b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c82924b-3065-45ab-8253-1b41490d680b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d170906-c01f-4a46-a2b3-3be0a8b49d7b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af1ba382-c331-433f-8cc2-a9c1d031b4bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aef833ee-bf5c-4616-8fc3-f33d47b61d32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"currencyCode size must be between 0 and 3\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TEST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a604e25-5537-4fc5-af7c-1164ca1b69ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee302ecd-769e-4fc4-991d-2bd29b4441c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89b6e875-99ea-45c6-9c3b-018e70fdf6ac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd8a7a-2aff-46e1-a4fd-521dbdb0fbd5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "LanguageIso",
							"item": [
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e119a5fd-0570-45aa-a88e-bba0a7e01691",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"code\": \"TST\",\r\n  \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "872141d7-fcc8-49f6-b653-e5c7c8315040",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LanguageIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42a745f7-8148-4884-bb55-81af0e169a14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a219cc44-0cbb-427e-8b60-aa6789f8fef8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cbbf46d-d716-47c3-adbd-dfcfecdd1104",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d138400-a443-48fb-a073-073785ca0b58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84733936-312b-4923-962b-49e1932f301f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2ae100d-8ebf-4b12-bde2-36c3d513bff8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"languageCode size must be between 0 and 3\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TEST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c9be362-0457-40ed-8d04-22248a2eace8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1c21137-6d2a-49a1-915e-ec67ea18faf9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c7f37b4-0bcb-4d20-907b-d6c0a41a2b14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcbfa91b-7826-4c67-ba4a-5fff85f5aefa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider",
							"item": [
								{
									"name": "Create Provider BUSINESS_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34678cf0-5d1a-4003-b9d9-1a60b1f337a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"There should already be a provider setup\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4385de6e-66eb-4524-9bdc-35e4fdf16c5a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c291f716-aab2-4e55-b29c-9a27a742cd98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.environment.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca8c7166-0997-4b73-96c1-33bcddefb13f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1249b9e-871e-4461-b31e-5ad60b5261ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.environment.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19641495-aa6d-459f-807a-adee4f0529b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"INVALID\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88d6ffbb-1edd-4156-afa6-13b848e2e8e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"INVALID\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "355f2c88-991f-4c21-8560-a09c7a17f724",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "206d409a-19b4-4247-bf1b-f128b15c810c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "CreateOrUpdate Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9677b35f-853a-43a0-811f-c54ec98e91f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1b73483-5aaa-41a7-8a58-2b481fd4e91b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\"+pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.environment.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Role ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1e6d492-6de0-447e-bcca-5eb26ace3e0d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with role name=\"+pm.environment.get(\"testCode\")+\"_ROLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7db1a084-34dd-4726-9c75-ca120f1d3bf0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b46b2c6c-791e-4c10-9733-3032eac61736",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc710929-5adb-47d7-84c6-388cc8951e36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fe1f6e5-1bed-4e2f-8c01-767996dc2134",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.environment.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48b11eea-a1aa-4002-8443-93a2714fa3fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4af5c629-c427-4a1f-b467-3f8973662ec1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: name.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52a3f38c-f0c1-4cfe-8877-ca8f81404bdf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Permission with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"NOT_EXIST\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25b45ef6-af1f-44b0-be80-3f760feb45df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f09c5b68-8bd8-4e54-906e-d25b6d8ed508",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with name=\"+pm.environment.get(\"testCode\")+\"_ROLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax",
							"item": [
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2431382-fd55-460e-9bb6-c76f095a6d9e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "822addae-d1a1-4841-807e-deab2c6bca56",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.environment.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b40c85f4-a4ad-4e44-bf83-9fda4d59c0a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=\" + pm.environment.get(\"testCode\") + \"_TAX already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9256d171-827d-4e97-96e2-cf8d4b089572",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9118624e-1f56-4626-a286-2860b0bcffab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "927b6b48-3d4f-4de6-8c08-6a78ce8d8d38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax   SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01613867-6e82-4140-8633-71541afbe8eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.environment.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91ccc770-6ef3-44ed-aa13-60bff83ecaa2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5033ddb0-799a-4534-a302-0d8726929d2d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language INVALID is not supported by the provider.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"INVALID\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ae0769b-4eab-49e9-98de-853126dac8d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: percent.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00acba29-41cd-440a-8055-9c6343a4c440",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"TVA 20%\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": \"NOT_EXIST\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfa93f2d-b0df-4093-aa4b-f9bf20b094bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa95ff69-4c7e-4a1c-b4e1-3fac0eb84ad8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=\"+pm.environment.get(\"testCode\")+\"_TAX does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Type",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad068f1f-2e02-4446-af9f-8442d1d3d8e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a46f2e8-aaf1-43cb-bfc9-051086ff075e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.environment.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Type ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae7e454d-33b6-46ea-995e-fa04ed798a95",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\" + pm.environment.get(\"testCode\") + \"_IT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cae8ae19-97f8-4a20-9fd0-a20de36f6459",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09c8051b-e62a-4684-b11d-106644c6980a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c90b38c5-0f75-4473-b5b4-84bc741503c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f57a65d-1d4a-4a61-8c39-d6a11fb8b8d5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.environment.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5733c7c7-bee5-4949-ad3d-6c288f18dd57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70d9e036-6a46-4e3f-87d9-023e9e327ed3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08232bb3-0738-4e7c-b8e3-c149939e4b84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"EmailTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\",\r\n    \"emailTemplateCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee83d244-a078-4eee-95bd-5bb525e4fe92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"NOT_EXIST\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cce7f826-65be-471a-8a58-baf7d2ef7d44",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"NOT_EXIST\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c5176e8-cec5-4bbe-a49d-88f23f8ce008",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"NOT_EXIST\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b805933-644f-4795-862d-785fc05e5268",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a9c98ce-ed37-4a2c-83b1-a345143f463e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\"+pm.environment.get(\"testCode\")+\"_IT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Credit Category",
							"item": [
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1c70727-d68d-4465-97c6-da64f86bcbf0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd616989-ed75-471a-87e4-6c56440512c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.environment.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Credit Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "586b83dd-8647-46f3-b010-c1b49072da23",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.environment.get(\"testCode\") + \"_CrCat already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f47e3e54-1fe5-40c3-b673-871f0e7ddf98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdec6faf-5cfe-4b50-9c8f-f53532309c0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46686a6d-4da4-4a0b-8d80-2722fe5f4764",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "052740be-9ae5-4f28-b0c6-754810654dab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.environment.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20d8037c-c6f9-4fe3-9c1b-1acfa8e00196",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a0f2a2d-059c-4998-a915-45a84308bf7c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.environment.get(\"testCode\") + \"_CrCat does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d65415c8-0cb4-452f-a2ab-b674b7aa0db9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2696abf-8fe3-4b61-9eb2-c539614ae7ad",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Gateway",
							"item": [
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a58ebb4-63fe-4f7d-a146-577a365a04ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b1539c6-2cfe-4f26-9f63-15eb5060da9d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.code).to.eql(pm.environment.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Gateway ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afbc7b6e-b428-4a27-8a0a-24beb07447cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.environment.get(\"testCode\") + \"_PG already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b418e64-023a-4392-bfc5-b6020e7cc3d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c29d7754-e219-42c4-ab4c-7ba1d3b6264b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cbf138f-4a54-48e0-9323-957ec9dcae00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7b86574-0ded-4447-b11b-6c84152afaa0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.code).to.eql(pm.environment.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce893028-5c73-415d-ab75-537668b95759",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, type, paymentMethodType, sellerCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee887c26-c5d5-4728-9549-fdd3956ad65e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.PaymentGatewayTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"INVALID\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74734dee-6cec-461f-98b7-262446eebc75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a60cac67-4ad4-4504-8ff9-fc01955427e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.environment.get(\"testCode\") + \"_PG does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e7436a27-9271-4e09-8670-0a4c9c006b37",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bbc45bc-f25c-4a7b-82c3-dc9bdf204cdf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Schedule Template",
							"item": [
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec9a94fd-5f2b-4339-8682-95da702b4d2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"id_PST\", jsonData.message);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58ae8dd9-41f5-4bc5-9a04-b2d4e1f89950",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.environment.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Schedule Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6094e04-bb29-4769-8346-e570fb58ca75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.environment.get(\"testCode\") + \"_PST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "300dbe47-7800-4242-b884-2920ff8a2a8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3866117e-e159-4195-a977-76c92679e29f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5833ec06-1428-4c22-803c-e1e8ac86e485",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c690b464-bc47-4950-a826-8c27880f7401",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.environment.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bfc71c6-c352-49c1-9f0d-69d15a56ba10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, calendarCode, serviceTemplateCode, paymentDayInMonth, amount, paymentLabel, advancePaymentInvoiceTypeCode, advancePaymentInvoiceSubCategoryCode, generateAdvancePaymentInvoice, doPayment.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c56f51d1-e3e2-47eb-b07e-9c88dcbc1d2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_doPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5784ba5d-a915-426b-9e83-bf096df91c9f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_generateAdvancePaymentInvoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13113f64-6a04-485b-b220-8d7d26a1c31f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"INVALID\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_paymentDateInMonth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39bcf19e-7109-48b8-9a5a-4b1ac4c431b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvSubCat",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21fe9452-58c0-4e20-b3af-a7f3a3ed6385",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"NOT_EXIST\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b28e1858-f6c2-41f6-a8b8-59ae0575ff4b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"NOT_EXIST\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_calendarCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92858772-fae9-41a1-b573-3b3efbf03716",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"NOT_EXIST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_serviceTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e387c36e-979b-4123-a2d7-87f61ca2df99",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"NOT_EXIST\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57be3511-356d-441b-85a0-4fc16231e73a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3798d4ef-8842-4257-b9bc-e91b2c0f7ebf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.environment.get(\"testCode\") + \"_PST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19938298-bc54-4bd0-b62e-446ad9940ffb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "11f7b9e5-c057-4e57-a0ae-ab7f8cc3dfb6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom",
					"item": [
						{
							"name": "Entity Customization",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Custom Table",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# Portal APIs\r\n\r\nHere are all portal APIs. Are tested the CRUD processes when available as well as exceptions that might occure, to assure that everything works as intended.\r\n\r\n### Typical execution\r\n\r\nThe typical test consists of:\r\n1. A successful createOrUpdate (POST) - remplace with create when createOrUpdate is unavailable\r\n2. A successful read (GET) - check if entity created in point 1 is retreived\r\n3. A failed Create (POST) - due to entity already created\r\n4. A failed update (PUT) - due to a non existant entity\r\n5. A succesfull update (PUT) - update entity created in point 1\r\n6. A succesfull createOrUpdate (POST) - update entity created in point 1 - skip this if createOrUpdate is unavailable\r\n7. A successful read (GET) - check if updated entity from point 5 and 6 have been correctly updated\r\n8. Any extra failed tests such as MISSING_PARAMETER or INVALID_PARAMETER\r\n\r\nPlease ensure that tests are correctly asserted in the Tests tab.\r\n\r\n## Table of portal entities\r\n\r\n| Entity                    | Create | Read | Update | Delete | Other           | Exception Handling |\r\n|---------------------------|--------|------|--------|--------|-----------------|--------------------|\r\n| Access                    |        |      |        |        |                 |                    |\r\n| Account Hierarchy         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Account Operation         | TODO   | TODO | TODO   | TODO   |                 | TODO               |\r\n| Accouting Code            | OK     | OK   | OK     | OK     |                 |                    |\r\n| Addressbook               |        |      |        |        |                 |                    |\r\n| Audit                     |        |      |        |        |                 |                    |\r\n| Billing Account           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Billing Run               | OK     | NA   | NA     | NA     | Validate/Cancel | OK                 |\r\n| Billing Cycle             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Business Account          |        |      |        |        |                 |                    |\r\n| Business Offer Model      |        |      |        |        |                 |                    |\r\n| Business Product Model    |        |      |        |        |                 |                    |\r\n| Business Service Model    |        |      |        |        |                 |                    |\r\n| Calendar                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Catalog                   |        |      |        |        |                 |                    |\r\n| Channel                   | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Channel and Segments      |        |      |        |        |                 |                    |\r\n| Charge Template           |        |      |        |        |                 |                    |\r\n| Chart                     |        |      |        |        |                 |                    |\r\n| Communication             |        |      |        |        |                 |                    |\r\n| Configuration             |        |      |        |        |                 |                    |\r\n| Contact                   |        |      |        |        |                 |                    |\r\n| Counter Template          |        |      |        |        |                 |                    |\r\n| CountryIso                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Country                   |        |      |        |        |                 |                    |\r\n| Credit Category           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Currency                  |        |      |        |        |                 |                    |\r\n| CurrencyIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Custom Entity Instance    | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Custom Field Template     |        |      |        |        |                 |                    |\r\n| Custom Table              | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Customer                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Account          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Brand            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Category         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| DD Request Lot OP         |        |      |        |        |                 |                    |\r\n| Discount Plan             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Discount Plan Item        |        |      |        |        |                 |                    |\r\n| Document Sign             |        |      |        |        |                 |                    |\r\n| Dunning Document          |        |      |        |        |                 |                    |\r\n| Email Notification        |        |      |        |        |                 |                    |\r\n| Email Template            |        |      |        |        |                 |                    |\r\n| Entity Customization      | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| Filter                    |        |      |        |        |                 |                    |\r\n| Generic Workflow          |        |      |        |        |                 |                    |\r\n| Iban                      |        |      |        |        |                 |                    |\r\n| Import Export             |        |      |        |        |                 |                    |\r\n| Invoice                   | OK     | OK   | NA     | NA     | Generate        |                    |\r\n| Invoice Category          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Sequence          | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Invoice SubCategory       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Type              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoicing                 |        |      |        |        |                 |                    |\r\n| Job Instance              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Job Trigger               |        |      |        |        |                 |                    |\r\n| LanguageIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Language                  |        |      |        |        |                 |                    |\r\n| Measurable Quantity       |        |      |        |        |                 |                    |\r\n| Mediation                 |        |      |        |        |                 |                    |\r\n| Metric Configuration      |        |      |        |        |                 |                    |\r\n| Meveo Instance            |        |      |        |        |                 |                    |\r\n| Module                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Notification              |        |      |        |        |                 |                    |\r\n| OccTemplate               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template Category   |        |      |        |        |                 |                    |\r\n| One Shot Charge Template  |        |      |        |        |                 |                    |\r\n| Order                     |        |      |        |        |                 |                    |\r\n| Payment Gateway           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Method            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Schedule          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment                   |        |      |        |        |                 |                    |\r\n| PDF Document              |        |      |        |        |                 |                    |\r\n| PdfInvoice                |        |      |        |        |                 |                    |\r\n| Price Plan                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Provider                  | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Provider Contact          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Query                     |        |      |        |        |                 |                    |\r\n| Quote                     |        |      |        |        |                 |                    |\r\n| Rated Transation          |        |      |        |        |                 |                    |\r\n| Tax                       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Recurring Charge Template | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Refund                    |        |      |        |        |                 |                    |\r\n| Report Extract            |        |      |        |        |                 |                    |\r\n| Revenue Recognition Rules |        |      |        |        |                 |                    |\r\n| Role                      | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Rum Sequence              |        |      |        |        |                 |                    |\r\n| Script Instance           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Seller                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Service Template          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| SMS Notification          |        |      |        |        |                 |                    |\r\n| Subscription              | OK     | OK   | OK     | OK     | Activate        | OK                 |\r\n| Tax Category              |        |      |        |        |                 |                    |\r\n| Tax Class                 | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Tax Mapping               |        |      |        |        |                 |                    |\r\n| Terminate Reason          | OK     | TODO | TODO   | TODO   |                 | TODO               |\r\n| Timer Entity              |        |      |        |        |                 |                    |\r\n| Title                     | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Triggered Edr             |        |      |        |        |                 |                    |\r\n| Unit of Measure           |        |      |        |        |                 |                    |\r\n| Unitary Custom Table      |        |      |        |        |                 |                    |\r\n| Usage                     |        |      |        |        |                 |                    |\r\n| Usage Charge Template     |        |      |        |        |                 |                    |\r\n| User                      |        |      |        |        |                 |                    |\r\n| User Account              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| User Hierarchy            |        |      |        |        |                 |                    |\r\n| Wallet                    | OK     | OK   | TODO   | NA     |                 | OK                 |\r\n| WebHook Notification      |        |      |        |        |                 |                    |\r\n| Workflow                  |        |      |        |        |                 |                    |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72b93afb-b62f-4e51-9cc2-d0c973377cad",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1c2f43aa-54af-458b-92cd-ec5c9309bed0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Url",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1976b88d-55da-46fd-b9dd-a7b5cb0ebeb0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"index.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/providers/providerSelfDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b479b24c-5ba2-458f-acdd-385eed57b67a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/providers/providerSelfDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"providers",
								"providerSelfDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/providerContacts/providerContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec8160f2-848c-45d0-b323-86cbba143b62",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/providerContacts/providerContacts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"providerContacts",
								"providerContacts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoUsers/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c8271fc-20b0-40da-99c4-85abf737e405",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoUsers/users.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoUsers",
								"users.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userRoles/userRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b0a1378-1d50-46b5-b6cc-f0e1c2023ffa",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userRoles/userRoles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userRoles",
								"userRoles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userGroupHierarchy/userGroupHierarchy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d67494d-368e-49e7-933a-a121ea085c95",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userGroupHierarchy/userGroupHierarchy.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userGroupHierarchy",
								"userGroupHierarchy.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/sellers/sellers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7828555b-8866-42d0-9639-8b42b9b15eee",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/sellers/sellers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"sellers",
								"sellers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/title/titles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16e44b10-9e19-4663-ae9c-9db4d29edf30",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/title/titles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"title",
								"titles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerBrands/customerBrands",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0be30350-9c1b-489c-89ee-fa9adf50bce5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerBrands/customerBrands.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerBrands",
								"customerBrands.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerCategories/customerCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d53c0a5f-d686-4576-91dc-00255e1ab7d1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerCategories/customerCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerCategories",
								"customerCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/creditCategories/creditCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bf96bd4-764b-4b7c-bcd1-83c515f0d343",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/creditCategories/creditCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"creditCategories",
								"creditCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/occTemplates/occTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1fbcc402-a770-4010-9e46-19447af98743",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/occTemplates/occTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"occTemplates",
								"occTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingLanguages/tradingLanguages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bfef870-6c91-487d-97e2-cc8f9ddbc3f2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingLanguages/tradingLanguages.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingLanguages",
								"tradingLanguages.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCurrencies/tradingCurrencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a71d54bb-fa79-4f6d-920f-8c6fa536a1c5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCurrencies/tradingCurrencies.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCurrencies",
								"tradingCurrencies.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCountries/tradingCountries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "001f6d09-2fb3-4d5a-9e84-493347e6c47d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCountries/tradingCountries.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCountries",
								"tradingCountries.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/multiLanguageField/multiLanguageFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45b3bbd0-709f-4c5d-aced-4cc2b0d9371a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/multiLanguageField/multiLanguageFields.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"multiLanguageField",
								"multiLanguageFields.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/communication/emailTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bf1b3a8-3157-4a9e-b400-6103205e9f75",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/communication/emailTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"communication",
								"emailTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/calendars/calendars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97215256-6d5b-4b03-aa8d-4aed69dd6dc6",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/calendars/calendars.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"calendars",
								"calendars.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingCycles/billingCycles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1744e9f2-d130-41e0-9bc5-63fe16521bf3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingCycles/billingCycles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingCycles",
								"billingCycles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/taxes/taxes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3130f52-0286-410c-b835-7360a052f13f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/taxes/taxes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"taxes",
								"taxes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceCategories/invoiceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f36d5df6-f4dc-46ac-ac3a-068eb345e2a6",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceCategories/invoiceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceCategories",
								"invoiceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceSubCategories/invoiceSubCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f52dae9-59da-4739-b137-94913d48c70c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceSubCategories/invoiceSubCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceSubCategories",
								"invoiceSubCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceTypes/invoiceTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4468990-9e83-4d3b-858b-c05727e030d7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceTypes/invoiceTypes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceTypes",
								"invoiceTypes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceSequences/invoiceSequences",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38b38056-6e42-4f08-8fad-9ef8b4c401a3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceSequences/invoiceSequences.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceSequences",
								"invoiceSequences.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/terminationReason/terminationReasons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dfeb666-10b0-491c-be96-8fbf74605cff",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/terminationReason/terminationReasons.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"terminationReason",
								"terminationReasons.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/channels/channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d178697-1ce5-4e86-a1d2-b960792ac83c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/channels/channels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"channels",
								"channels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplates/offerTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "339fa5eb-7816-4262-b98d-bfb90b19c13c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplates/offerTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplates",
								"offerTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplateCategories/offerTemplateCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c9b9d3e-276d-4789-ad97-7345b55fa96d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplateCategories/offerTemplateCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplateCategories",
								"offerTemplateCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/serviceTemplates/serviceTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7b91f24-a36e-4441-98e5-c7cf0fd8dcdc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/serviceTemplates/serviceTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"serviceTemplates",
								"serviceTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/chargeTemplates/chargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8434b58-cc6a-49e6-962f-afbbb6a6d56d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/chargeTemplates/chargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"chargeTemplates",
								"chargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/recurringChargeTemplates/recurringChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a506c151-304c-40fe-9ead-1ec02c053c22",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/recurringChargeTemplates/recurringChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"recurringChargeTemplates",
								"recurringChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/usageChargeTemplates/usageChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "147b4408-647d-4b3f-a6a3-6d68a8e6b06e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/usageChargeTemplates/usageChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"usageChargeTemplates",
								"usageChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/oneShotChargeTemplates/oneShotChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67c63729-46b7-4c74-be23-3b0b03d5dc6b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/oneShotChargeTemplates/oneShotChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"oneShotChargeTemplates",
								"oneShotChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/counterTemplates/counterTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cdac849e-e69a-4357-9122-2932380a2c7f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/counterTemplates/counterTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"counterTemplates",
								"counterTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productTemplates/productTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba5b1044-6bc0-4bfd-9f8e-7856be6e9d20",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productTemplates/productTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productTemplates",
								"productTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productChargeTemplates/productChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a71ce71c-d3fb-4363-a529-e71958cd3115",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productChargeTemplates/productChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productChargeTemplates",
								"productChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/bundleTemplates/bundleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3624aa7d-4c23-40cf-af31-efeb72c66c71",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/bundleTemplates/bundleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"bundleTemplates",
								"bundleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/triggeredEdrTemplates/triggeredEdrTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9329d70c-b19a-4df2-a11f-762a8169bd7f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/triggeredEdrTemplates/triggeredEdrTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"triggeredEdrTemplates",
								"triggeredEdrTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/walletTemplates/walletTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61db4003-7053-4ec2-a1b9-b75146af7f23",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/walletTemplates/walletTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"walletTemplates",
								"walletTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessOfferModels/businessOfferModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e493c497-2469-41bd-a591-84a65156fad9",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessOfferModels/businessOfferModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessOfferModels",
								"businessOfferModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessServiceModels/businessServiceModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7d9ce54-6529-4bc3-949f-1c6b766cb671",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessServiceModels/businessServiceModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessServiceModels",
								"businessServiceModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessProductModels/businessProductModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0628054-fc4f-4f88-b8a0-76a1f9caba5a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessProductModels/businessProductModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessProductModels",
								"businessProductModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/pricePlanMatrixes/pricePlanMatrixes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f611c5db-ea51-4458-a04f-7aa8ad333388",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/pricePlanMatrixes/pricePlanMatrixes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"pricePlanMatrixes",
								"pricePlanMatrixes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/discountPlans/discountPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "668c9040-2479-4afd-8908-faba96343326",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/discountPlans/discountPlans.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"discountPlans",
								"discountPlans.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customerSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf1d33fe-cab7-4796-bb86-8fbe769c158e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customerSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customerSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85de9d43-0dfe-4a17-9c69-96abe62a1777",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/customerAccounts/customerAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08c93a50-9674-4bf2-8e89-0b38aa887897",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/customerAccounts/customerAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"customerAccounts",
								"customerAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingAccounts/billingAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c82e5e1b-7bd6-4809-b297-113f5f93d698",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingAccounts/billingAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingAccounts",
								"billingAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/userAccounts/userAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7975ff17-ef4b-470d-bef6-715a91555658",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/userAccounts/userAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"userAccounts",
								"userAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/crmAccounts/crmAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd11c75e-8b19-4602-bd31-cf5d100566b4",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/crmAccounts/crmAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"crmAccounts",
								"crmAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/subscriptions/subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d07b9033-7303-4543-81a7-7ec4e9dc8bfb",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/subscriptions/subscriptions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"subscriptions",
								"subscriptions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/access/access",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df99bde3-4bd3-4686-b408-58eba10abf69",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/access/access.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"access",
								"access.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/businessAccountModels/businessAccountModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80451ff1-c236-4086-85f6-0e9ca0a77b12",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/businessAccountModels/businessAccountModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"businessAccountModels",
								"businessAccountModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "quote/quotes/quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de39747b-a2da-4ffd-a46c-8ae6a8fdce7d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/quote/quotes/quotes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"quote",
								"quotes",
								"quotes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "order/orders/orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3337013c-99e6-402d-bdeb-a32c808d1e79",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/order/orders/orders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"order",
								"orders",
								"orders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "rating/edr/edrList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41a1b2a0-317c-4359-aa5b-58d45053d678",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/rating/edr/edrList.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"rating",
								"edr",
								"edrList.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/importedFile/importedFiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30bb5ec5-b537-4d72-bcd8-875d316311cb",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/importedFile/importedFiles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"importedFile",
								"importedFiles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/walletOperations/walletOperations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54659ef6-1ec1-4b7f-951d-9837407da82c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/walletOperations/walletOperations.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"walletOperations",
								"walletOperations.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/ratedTransactions/ratedTransactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04387428-eea7-4f26-97d7-1174665f574d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/ratedTransactions/ratedTransactions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"ratedTransactions",
								"ratedTransactions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/billingRuns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77131858-3118-45ab-a801-ab2d2153490d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/billingRuns.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"billingRuns.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/recurringInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbfa71e9-4260-4af3-a969-5bec60600963",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/recurringInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"recurringInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/exceptionelInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d7f0e44-8003-45f1-8db6-67ed1c152117",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/exceptionelInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"exceptionelInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "112d6fc1-f6e1-4956-96f5-a7faabb983de",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/invoices.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"invoices.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/createInvoiceDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2dd2b1f-05ac-4551-a030-d4239cfdd62a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/createInvoiceDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"createInvoiceDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d786731-26ec-4b39-8ff4-57ca2eef366a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab56676a-f0ce-4360-89e1-75f297487d9f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLotOp/ddrequestLotOps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d36044b-7811-43ee-819e-d86d900f4e71",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLotOp/ddrequestLotOps.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLotOp",
								"ddrequestLotOps.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLot/ddrequestLots",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac0476e9-1c29-4e80-b123-95f1c8e8d207",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLot/ddrequestLots.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLot",
								"ddrequestLots.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentGateways/paymentGateways",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14eaedfc-d451-4ea6-a918-87cd5445f610",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentGateways/paymentGateways.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentGateways",
								"paymentGateways.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentScheduleTemplates/paymentScheduleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c10f196-97f4-4e77-b5f9-139d65bf035e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentScheduleTemplates/paymentScheduleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentScheduleTemplates",
								"paymentScheduleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/genericWorkflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "051b24bb-c0e4-49be-b874-fce6305d02a8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/genericWorkflows.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"genericWorkflows.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/workflowInstanceHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06b2e5d4-4b13-4e47-980d-82b1963cfde4",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/workflowInstanceHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"workflowInstanceHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/accountingCodes/accountingCodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f5a0820-c42e-4a24-9cb4-f891e0c6eab1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/accountingCodes/accountingCodes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"accountingCodes",
								"accountingCodes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/generalLedgers/generalLedgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e116be5d-bfe8-422f-a731-0ea14865dfdf",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/generalLedgers/generalLedgers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"generalLedgers",
								"generalLedgers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueRecognitionRules/revenueRecognitionRules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aafa96fe-e768-4042-9238-3e6c2a7c4625",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueRecognitionRules/revenueRecognitionRules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueRecognitionRules",
								"revenueRecognitionRules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueSchedules/revenueSchedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d32b999-6ae0-4b8f-b6e5-593998ac2de3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueSchedules/revenueSchedules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueSchedules",
								"revenueSchedules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtracts/reportExtracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6af395a2-9793-4af7-9ca2-24f1bf3de064",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtracts/reportExtracts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtracts",
								"reportExtracts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtractHistories/reportExtractHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41ace99b-58d9-4c1b-b2f7-d24c26a21532",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtractHistories/reportExtractHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtractHistories",
								"reportExtractHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/accountingWriting/accountingWritings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02ef7816-b98f-4cd7-bad8-d356ce86723c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/accountingWriting/accountingWritings.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"accountingWriting",
								"accountingWritings.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measurableQuantities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89f1ee8f-822b-4251-bc1f-e3d450be6945",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measurableQuantities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measurableQuantities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measuredValueDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "717f2135-a46f-4f62-b2f4-711df64f48d6",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measuredValueDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measuredValueDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/charts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe89fdb1-971d-419f-8029-5c01904e6d68",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/charts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"charts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/jobInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1b18831-9e33-490f-a1e3-74e427e2b6a0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/jobInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"jobInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/timerEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d390e54-0cc7-459f-b1fb-14c8f2aa9360",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/timerEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"timerEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoInstance/meveoInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de1d7633-a277-436f-93dc-d1d13143b7f5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoInstance/meveoInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoInstance",
								"meveoInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/module/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa68a6bf-19bb-4180-a6b7-6b3a0223f56e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/module/modules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"module",
								"modules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/customEntities/customizedEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1461d041-acdc-4179-b98b-b250c8ea4088",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/customEntities/customizedEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"customEntities",
								"customizedEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstanceCategories/scriptInstanceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1163b6e2-ed9c-4e15-999a-8fa835596782",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstanceCategories/scriptInstanceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstanceCategories",
								"scriptInstanceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstances/scriptInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78c22066-7e21-4277-9c08-a1b03d52b622",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstances/scriptInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstances",
								"scriptInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/filters/filters/filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39a99c4e-9889-45f5-895e-7c99308d367d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/filters/filters/filters.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"filters",
								"filters",
								"filters.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90845ccd-5387-4554-ba03-c33496aba22a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/webHooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03a8e561-3718-4018-87a2-e61a65b4284a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/webHooks.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"webHooks.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/emailNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3085fddd-532b-434f-b740-dc13e60e6571",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/emailNotifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"emailNotifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/jobTriggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ede9517-c71b-40fc-98da-9dd2e81ba761",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/jobTriggers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"jobTriggers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notificationHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a162907-7a78-4a4c-b3ef-ee2daae8dda8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notificationHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notificationHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/inboundRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37b664ee-103f-42b5-9d96-03ba42f10c79",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/inboundRequests.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"inboundRequests.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/import",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d993eff8-7245-4da7-ac82-f5d3f8ccd71f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/import.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"import.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/export",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2313d5cf-2665-4cb0-9177-2c870aa47e0e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/export.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"export.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dea6f3c3-5ab9-4fbc-a5fb-aea62cda379e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditConfiguration.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditConfiguration.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5ee0f5d-7cab-4cad-80e9-f6b07e11ad76",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditLogs.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditLogs.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/cache/caches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b619aac-79a0-43dc-ac76-3a48888ef909",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/cache/caches.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"cache",
								"caches.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/fullTextSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95015ee9-d563-437a-8b9c-d0b77e3ff4e1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/fullTextSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"fullTextSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "467151e3-504f-470d-b95a-b5206a02af67",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"index.jsf"
							]
						}
					},
					"response": []
				}
			],
			"description": "This will run a GET on the admin pages and check if a proper status 200 is returned. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9c7a0e61-0246-46db-bef4-cd21f00d9424",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "74595f20-8b1a-4398-bdd3-8b71bfd1d2bf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios",
			"item": [
				{
					"name": "Setup Base Data",
					"item": [
						{
							"name": "Cleanup data - clear customizations",
							"item": [
								{
									"name": "Clear Seller Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5b45dac-f888-4c8b-8f30-31cd186081a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.admin.Seller\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9de175be-cc3d-4577-b33b-c37505279148",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Customer\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "488607c4-30b7-484a-b8e5-803d0f8bd8be",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.CustomerAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b3e6816-c10b-4a39-a969-590e923e4194",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear User Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3804a1a3-5f18-4120-83d5-f73edeb72a20",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.UserAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Subscription Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdf4d4de-5091-4664-ad70-90f82353a0fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Subscription\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Access Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8cc7be9-2fb6-4fe5-a6af-389ecc182a7f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.mediation.Access\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Provider Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aedd019c-11fe-4270-9525-58ba3e340578",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Provider\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eafb6d88-bc96-4aa0-864d-8df13c7d50a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ProductTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Instance Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fca7f48-be75-465e-8d7e-e4e49a8cab91",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.ProductInstance\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Service Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8d9d227-fa1b-4902-8988-6069b103b3ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ServiceTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Offer Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e837d01e-bb05-47d3-90f2-f59f065d0f30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.OfferTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Charge Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2215d4d-6343-4715-8520-e6ccc832522b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ChargeTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Price Plan Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97581e5e-cb33-43c2-b130-bdc1d5f652d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.PricePlanMatrix\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Category Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7e56a94-887b-4486-95b6-04123395f77f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice SubCategory Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "309a31e2-2e86-42e6-b593-d5dc505dfeda",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.AccountOperation\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Account Operation Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22b9d570-f945-421e-abe8-5ead4f2d2de8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceSubCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f70e96ea-e7d5-4b80-a60f-adebc1e01181",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Invoice\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Tax Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e387439-9e49-471d-8669-dd2b37385f2f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Tax\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Cycle Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92383ab8-fdd8-4aa9-854f-3a06b6ad03ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingCycle\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Purge Job Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c56cd59-d09b-4c29-a753-5aab890956bd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.admin.job.PurgeJob\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - restore provider and configuration",
							"item": [
								{
									"name": "Update provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "872a93f6-f27c-4504-958f-fcca40707b76",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"demo\",\r\n    \"currency\": \"AFA\",\r\n    \"country\": \"AD\",\r\n    \"language\": \"DEU\",\r\n    \"multiCurrency\": \"true\",\r\n    \"multiCountry\": \"true\",\r\n    \"multiLanguage\": \"true\",\r\n    \"enterprise\": \"true\",\r\n    \"levelDuplication\": \"false\",\r\n    \"rounding\": \"8\",\r\n    \"invoiceRounding\": \"2\",\r\n    \"prepaidReservationExpirationDelayinMillisec\": \"60000\",\r\n    \"bankCoordinates\": {\r\n        \"bankCode\": \"SGMB\",\r\n        \"branchCode\": \"12345\",\r\n        \"accountNumber\": \"33333333333\",\r\n        \"key\": \"11\",\r\n        \"iban\": \"11\",\r\n        \"bic\": \"11\",\r\n        \"accountOwner\": \"owner\",\r\n        \"bankName\": \"SGMB\",\r\n        \"bankId\": \"11\",\r\n        \"issuerNumber\": \"1111\",\r\n        \"issuerName\": \"DEMO\"\r\n    },\r\n    \"recognizeRevenue\": \"false\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"false\",\r\n        \"displayProvider\": \"false\",\r\n        \"displayCfAsXML\": \"false\",\r\n        \"displayPricePlans\": \"false\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayBillingCycle\": \"false\",\r\n        \"displayFreeTransacInInvoice\": \"true\",\r\n        \"displayOrders\": \"false\",\r\n        \"displayWalletOperations\": \"false\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "104c4c48-1cec-4086-b01b-3a5dceccfcba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"false\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4429f4ee-ca01-47b0-ae31-d7bd05897bc3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"service.allowMultiInstantiation\",\n            \"value\": \"false\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - user and ES",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19fa048c-3fab-434a-9475-836af8795624",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{opencell.username}}\",\r\n    \"password\": \"{{opencell.password}}\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\"administrateur\"],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean and reindex Full text - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "996cf0de-f52d-4137-baa1-5624c7da0aac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/reindex",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"reindex"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Configuration: InvType, BC and Seller",
							"item": [
								{
									"name": "Create InvoiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c395cdb4-f914-46f9-8ba4-a4e0bf80954e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_TEST-Type\",\r\n\t\"description\": \"Invoice Test Type\",\r\n\t\"occTemplateCode\": \"INV_STD\",\r\n\t\"sequenceDto\": {\r\n\t\t\"prefixEL\": \"Fact_\",\r\n\t\t\"sequenceSize\": \"9\"\r\n\t},\r\n\t\"matchingAuto\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2591e5f-999d-46ab-827f-955b53997b85",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_1\",\r\n\t\"description\": \"Monthly Invoice Cycle 1\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"invoiceTypeCode\": \"{{baseEntityPrefix}}_TEST-Type\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1f69f7b-beae-4f5a-8e68-a1deb6fd3b7d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_3\",\r\n\t\"description\": \"Monthly Invoice Cycle 3\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"dueDateDelayEL\": \"#{ba.id + invoice.billingAccount.id}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba431179-6fbc-467d-ae44-8d5884b40cf8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    {\r\n    \t\"code\": \"SELLER_FR\",\r\n    \t\"description\": \"France Seller\",\r\n    \t\"currencyCode\": \"EUR\",\r\n    \t\"languageCode\": \"FRA\",\r\n    \t\"parentSeller\": \"MAIN_SELLER\",\r\n    \t\"invoiceTypeSequences\": {\r\n    \t\t\"{{baseEntityPrefix}}_TEST-Type\": {\r\n    \t\t\t\"prefixEL\": \"SellFact_\",\r\n    \t\t\t\"sequenceSize\": 9,\r\n    \t\t\t\"currentInvoiceNb\": 9\r\n    \t\t}\r\n    \t}\r\n    }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update InvoiceType COM Sequence",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28cb7e6f-1401-4481-9ae6-cef37e98a965",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"COM\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"COM_\",\n        \"sequenceSize\": \"9\"\n    },\n    \"matchingAuto\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Catalog: Charges, Services, Offer, PP, Counters, Wallets",
							"item": [
								{
									"name": "Create Tax Class 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf655914-81bf-45a3-a996-73eb5e8a9615",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e53a8e95-4c1a-4e0b-bf0c-1980e4690fee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass2\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}} 2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a94fe137-8df3-4ca0-910f-9249123da569",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountTaxCategoryCode\": \"Tax category\",\r\n    \"chargeTaxClassCode\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"taxCode\": \"TAX_18\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxMapping/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxMapping",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Category 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7e6699d-13f0-4708-add0-c802ddcd1717",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\":\"{{baseEntityPrefix}}_taxCategory2\",\r\n\t\"description\":\"Tax category 2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create PrepaidWallet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea5b392b-70da-4fdc-8ea8-d6bceb3f8c3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PPW1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PrepaidPWallet_Description\",\r\n\t\"walletType\": \"PREPAID\",\r\n\t\"consumptionAlertSet\": \"false\",\r\n\t\"fastRatingLevel\": \"1\",\r\n\t\"lowBalanceLevel\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/template/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"template",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Counter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b704a05-e835-4e8d-bc72-9912864da019",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CounterTemplate_Description\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"unity\": \"Quantity\",\r\n\t\"type\": \"USAGE\",\r\n\t\"ceiling\": \"1\",\r\n\t\"disabled\": \"false\",\r\n\t\"counterLevel\": \"BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create TriggeredEDR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68ca80f7-c54d-4cc2-ab7e-c32c75e91ab0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_EDR1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_Triggered_EDR_DESC\",\r\n\t\"quantityEl\": \"#{op.amountWithoutTax}\",\r\n\t\"param1El\": \"#{edr.parameter1}\",\r\n\t\"param2El\": \"#{edr.parameter2}\",\r\n\t\"param3El\": \"#{edr.parameter3}\",\r\n\t\"param4El\": \"#{edr.parameter4}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"triggeredEdr",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c5a4bc8-9281-43e8-920e-70526b41bd19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n\t\"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99ccfa3b-3fff-4372-bde9-4c8610138edd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71713ec9-9307-423d-84fa-c0f503656580",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Termination Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"TERMINATION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c0b7c28-5663-490c-b042-3212ce550f54",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"true\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}s-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"OTHER\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15fb82fb-981a-4f85-a5b0-92c931304b13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('{{baseEntityPrefix}}_USAGE1')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86246f89-c57a-4f93-b46e-d9a870d4bf2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateTerminations\": {\r\n\t\t\"serviceChargeTemplateTermination\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OST1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36953084-5f25-4916-b9cd-fa74ae5c552f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"description\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"invoicingCalendar\": \"MONTHLY\",\n    \"serviceChargeTemplateRecurrings\": {\n        \"serviceChargeTemplateRecurring\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_REC1\"\n            }\n        ]\n    },\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff4fd0c-12ee-4eaa-bf09-5a512153e39d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ba0a5a3-74e1-4773-a0da-297225b9c312",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 2 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef4e453c-1c20-4b2e-b0c8-18a822ffb7cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT1 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n\t\t{\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de0c4c88-3411-4cd2-9eaf-9fe2a37684d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n        {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "409eaa37-168f-47dd-a8c2-7b9396153c07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\"\r\n            }\r\n        }\r\n    ],\r\n    \"offerProductTemplate\": [\r\n        {\r\n            \"productTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bb8dc13-f9f5-493d-8db7-718cd71193b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.rating.RatingScript\",\n    \"description\": \"rating script\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.rating;\\r\\n\\r\\nimport java.math.BigDecimal;\\r\\nimport java.util.Map;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.billing.WalletOperation;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\npublic class RatingScript extends Script {\\r\\n\\r\\n    private static final Logger log = LoggerFactory.getLogger(RatingScript.class);\\r\\n\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.debug(\\\"Rating script creation script...\\\");\\r\\n        // DO not change any amount, as it is untestable\\r\\n        //WalletOperation op = (WalletOperation) context.get(Script.CONTEXT_ENTITY);\\r\\n        //op.setAmountWithoutTax(op.getAmountTax().add(BigDecimal.ONE));\\r\\n    }\\r\\n}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6a1a2d2-9b89-4f43-96d8-15aeb339a420",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"scriptInstance\": \"org.meveo.service.script.rating.RatingScript\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3277b355-9512-410a-a0bf-e1e51c284fc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d066d705-ff35-42fd-b75d-2dfc61195c69",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"amountWithoutTax\": \"21\",\r\n\t\"amountWithTax\": \"25\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e7519c5-b9bd-4dc8-9580-da18c7558b81",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\",\r\n\t\"woDescriptionEL\": \"#{\\\"Special \\\".concat(op.description)}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5cc5f10-11e1-4762-8bac-7cb5b6ae4034",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"amountWithoutTax\": \"9\",\r\n\t\"amountWithTax\": \"14\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1 in Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "508f7ea8-6739-426e-88e3-a16019e14077",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP2\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"0.5\",\r\n\t\"amountWithTax\": \"0.6\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf120cec-58e1-4356-a1cc-6dde7e809f15",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e532c8b6-0278-456c-a315-5ed8c5727ae4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC2_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\"amountWithoutTax\": \"5\",\r\n\t\"amountWithTax\": \"6\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reccuring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa724755-b712-4efe-94b0-de882556fa32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef9ced05-0f1f-4fbd-9c3a-eb88177e42a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecfd06ef-4d31-4e44-8bde-fefeb20ca36c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8332100-cbc5-4bb9-9295-046e225fd8eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eec8f5e8-1721-4498-a817-624d3d99b919",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n} ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5cb5e47-6b51-4ad3-b35d-362f860cc730",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE3\",\r\n\t\"priority\": \"2\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('NO_MATCH')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2aa9e569-f854-4efc-a57c-eeb8ca7d93fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc3b5d24-d3e5-4349-90cc-a7f84a9943ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17f3a1a8-8e1a-4e5a-b70f-dae65441851d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        \r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9269986-f2fa-4b32-9052-f41980301eff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2aeb2332-01e4-41a7-81d1-546d7381d86b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Usage 1 in Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e3141dc-4f42-43a2-9b70-47bf1f70da72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"0\",\r\n\t\"amountWithTax\": \"0\",\r\n\t\"priority\": \"0\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot OS3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53188d2f-d190-417b-a76a-61428b0daf18",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de709096-5745-481e-a33d-6f23a466c671",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0339d260-316f-4361-9f59-1a671c10a650",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Bundle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4d9c3ba-6568-4e63-88e9-ccfb0225c543",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BUNDLE1\",\r\n    \"description\": \"Bundle 1\",\r\n    \"productChargeTemplates\": {\r\n        \"productChargeTemplate\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_PC2\"\r\n            }\r\n        ]\r\n    },\r\n    \"bundleProducts\": {\r\n        \"bundleProduct\": {\r\n            \"productTemplate\": [\r\n                {\r\n                    \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/bundleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"bundleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - WEB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52a7ee42-3440-4fbf-a146-d3ebc2a41ba2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - SOCIAL_MEDIA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4900cd6f-dd42-4986-9241-27861f071488",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - SOFTWARE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0fcd779-9ef8-4db9-bca7-7fa5baa81349",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - DISK_SPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e558b6d9-9a60-4dad-b92d-b892dea2bac6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Customer accounts, subscription, access",
							"item": [
								{
									"name": "Create Customer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65686cae-9382-4749-8c93-ebf71ee5c8cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab97fef7-d085-4b42-ad5a-c1ade5f6d109",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f28618d6-c77f-4a15-8522-5f823a7f3ccc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24de9f94-a1b3-4a4c-9c26-552c9cbe76b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9aff0f7-b81b-4c4d-8046-d4ccb4ee4745",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d41b2259-e267-406b-912f-ba3ac376b37c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68a801b8-6a5f-4a70-9dce-42ec7a920fdd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9eea7eb-6f75-4375-8de9-e579524757c8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a212e36-a0db-425a-aef7-76cb75ee2939",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"billingCycle\": \"CYC_INV_MT_3\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e5af925-3995-44c5-a23e-b3d85b34a9f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e63b7fe5-94d8-4f20-ba0a-e210e4c512b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72088f0b-55a2-4b47-b9b6-9fb0cd89d333",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83f256c4-75e4-4eb0-89bc-134352501657",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"description\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b3112d1-e528-49d7-ac74-d5137d6ff883",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_ACCP\",\r\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"startDate\": \"2016-06-01\",\r\n    \"endDate\": \"2016-06-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Administration: Measurable Qtt,Charts, Notifications, etc..",
							"item": [
								{
									"name": "create MeasurableQuantities",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ee040bc-8815-47e6-b99f-f460098ea5e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_MQ1\",\r\n    \"description\": \"{{baseEntityPrefix}}_MQ1-DESC\",\r\n    \"dimension1\": \"1\",\r\n    \"dimension2\": \"2\",\r\n    \"dimension3\": \"3\",\r\n    \"dimension4\": \"4\",\r\n    \"editable\": \"false\",\r\n    \"additive\": \"true\",\r\n    \"sqlQuery\": \"select count(*) from billing_subscription where status='CREATED' and date(created)='#{date}'\",\r\n    \"measurementPeriod\": \"MONTHLY\",\r\n    \"lastMeasureDate\": \"2016-03-16\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/measurableQuantity",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"measurableQuantity"
											]
										}
									},
									"response": []
								},
								{
									"name": "create BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36c0bc1c-fc7c-44e0-bb9c-7ee01e3e3c74",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_BarCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"100\",\r\n    \"height\": \"100\",\r\n    \"style\": \"test1\",\r\n    \"styleClass\": \"test1\",\r\n    \"extender\": \"test1\",\r\n    \"visible\": \"true\",\r\n    \"legendPosition\": \"n\",\r\n    \"barPadding\": \"100\",\r\n    \"barMargin\": \"100\",\r\n    \"orientation\": \"vertical\",\r\n    \"stacked\": \"true\",\r\n    \"min\": \"100\",\r\n    \"max\": \"100\",\r\n    \"breakOnNull\": \"false\",\r\n    \"xaxisLabel\": \"test\",\r\n    \"yaxisLabel\": \"test\",\r\n    \"xaxisAngle\": \"10\",\r\n    \"yaxisAngle\": \"10\",\r\n    \"legendCols\": \"20\",\r\n    \"legendRows\": \"20\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"true\",\r\n    \"showDataTip\": \"true\",\r\n    \"datatipFormat\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/bar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"bar"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "882ea84f-ad56-44ce-9956-5f2e7dec9b00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PieCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"123\",\r\n    \"height\": \"123\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"style_class1\",\r\n    \"extender\": \"extender1\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"n\",\r\n    \"diameter\": \"120\",\r\n    \"sliceMargin\": \"10\",\r\n    \"shadow\": \"true\",\r\n    \"showDataLabels\": \"false\",\r\n    \"legendCols\": \"23\",\r\n    \"legendRows\": \"23\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/pie",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"pie"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17db6bef-e689-43d1-95d1-8234abdc40e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_LC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_LineCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"200\",\r\n    \"height\": \"200\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"styleClass2\",\r\n    \"extender\": \"extender3\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"w\",\r\n    \"shadow\": \"true\",\r\n    \"minX\": \"45\",\r\n    \"maxX\": \"45\",\r\n    \"minY\": \"45\",\r\n    \"maxY\": \"45\",\r\n    \"breakOnNull\": \"true\",\r\n    \"xaxisLabel\": \"label 1\",\r\n    \"yaxisLabel\": \"label 2\",\r\n    \"xaxisAngle\": \"12\",\r\n    \"yaxisAngle\": \"12\",\r\n    \"stacked\": \"true\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"false\",\r\n    \"showDataTip\": \"false\",\r\n    \"datatipFormat\": \"false\",\r\n    \"legendCols\": \"56\",\r\n    \"legendRows\": \"56\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/line",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"line"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3a01135-3466-48a9-aa6d-ffd7b5a999da",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\n    \"description\": \"{{baseEntityPrefix}}_Script_Instance\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\r\\n            import java.util.Map;\\r\\n            import java.math.BigDecimal;\\r\\n            import org.meveo.admin.exception.BusinessException;\\r\\n            import org.meveo.model.admin.User;\\r\\n            import org.meveo.model.crm.Provider;\\r\\n            import org.slf4j.Logger;\\r\\n            import org.slf4j.LoggerFactory;         \\r\\n            public class {{baseEntityPrefix}}_Script extends Script {             \\r\\n                private static final Logger log = LoggerFactory.getLogger({{baseEntityPrefix}}_Script.class);\\r\\n                public void execute(Map<String,Object> context) throws BusinessException{\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script...\\\\\\\");\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script.\\\\\\\");\\r\\n                }\\r\\n            }\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "489d7b0f-cd19-4b11-80a5-9bd538691e1a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Notification1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Webhook",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3af06cec-e575-4e27-9bea-fab88898a4de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_WebHook1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"host\": \"localhost\",\r\n    \"port\": \"8080\",\r\n    \"page\": \"meveo/api/rest/\",\r\n    \"httpMethod\": \"HTTP_GET\",\r\n    \"username\": \"test.username\",\r\n    \"password\": \"test.password\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bf73e09-fa97-4e6c-924f-968c02ab7c0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_EmailNotif1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"emailFrom\": \"OpenCell\",\r\n    \"emailToEl\": \"edward.legaspi@opencellsoft.com\",\r\n    \"subject\": \"Test Meveo Application\",\r\n    \"body\": \"Test Body\",\r\n    \"htmlBody\": \"HTML Body\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "015d59ac-f5b4-466e-ac8c-720a61d3ce9c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Timer_DESCP\",\r\n    \"hour\": \"1\",\r\n    \"minute\": \"10\",\r\n    \"second\": \"45\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da3cd216-c843-4062-938a-122e651a9af1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"ExportSubscriptionsJob\",\r\n    \"code\": \"{{baseEntityPrefix}}_ImpExp-Job1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Import-Export\",\r\n    \"timerCode\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"jobCategory\": \"IMPORT/EXPORT\",\r\n    \"followingJob\": \"ACCO_JOB\",\r\n    \"parameter\": \"param1\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd104af7-a8f3-461f-be1f-b1ed4efd4f5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Filter1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Filter1_DESCP\",\r\n    \"shared\": \"false\",\r\n    \"inputXml\": \"<filter>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n      <primitiveFilterCondition>\\n        <filterConditionType>PRIMITIVE</filterConditionType>\\n        <fieldName>startRatingDate</fieldName>\\n        <operator>>=</operator>\\n        <operand>date:01/09/2015</operand>\\n      </primitiveFilterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n  <primarySelector>\\n    <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n    <alias>p</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>eventCode</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n</filter>\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Hourly",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af7caa84-056b-4aef-abef-4e1400b1fab2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Hourly\",\r\n    \"description\": \"Hourly\",\r\n    \"hour\": \"*\",\r\n    \"minute\": \"0\",\r\n    \"second\": \"0\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create GDPR JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2a4d92b-a782-4035-8d8e-1fc5ff6a728f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jobTemplate\": \"GDPRJob\",\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobCategory\": \"DWH\",\n    \"active\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Daily - Midnight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5054697-d2b2-44bd-ae7f-10e2291b1b2d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Daily-midnight\",\r\n    \"description\": \"Daily-midnight\",\r\n    \"hour\": \"23\",\r\n    \"minute\": \"59\",\r\n    \"second\": \"59\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PaymentSchedule Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "455e33be-ef5e-474a-89a1-2e70e097fa90",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"PaymentScheduleProcessingJob\",\r\n    \"code\": \"PaymentSchedule_Job\",\r\n    \"description\": \"PaymentSchedule_Job\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup TerminationReason",
							"item": [
								{
									"name": "update TERM_REASON_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "146e0110-e8b7-47ba-89e6-2b5a927e00a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_1\",\r\n    \"description\": \"Agreement Reimbursement Charge\",\r\n    \"applyAgreement\": \"true\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2e09e8d-2365-4420-ad70-1f03a08e58b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_2\",\r\n    \"description\": \"Reimbursement\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c998a7d1-2627-4b57-918b-3d802125ef48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_3\",\r\n    \"description\": \"Charge\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"false\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service workflow",
					"item": [
						{
							"name": "Service workflow - service multi activation",
							"item": [
								{
									"name": "SET_VARIABLES",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50c002cf-3c47-4360-a726-b208e32cf281",
												"exec": [
													"pm.globals.set(\"index\", 240);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91970f82-a954-4a2e-b815-c3f2f0d72e09",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://postman-echo.com/",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Set service.allowMultiInstantiation=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1bcadb4-03c2-4a1f-b6c6-685d7384ddff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"service.allowMultiInstantiation\",\r\n            \"value\": \"true\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebfc07dd-ba6a-4c1e-b820-f4d5fae3ccf7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8181295-8ef1-4b98-ad7a-69dc08f155a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3d9cb04-4a54-45b5-9b99-9634dadaca73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c5be8de-b7b0-4811-94a0-5449a81ae658",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(3);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1481414400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1]).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98a9fb57-b11b-45ce-a349-caa6cdbd544b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a135eff8-47db-4309-b112-8433b23a1f54",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab9cf764-36ea-4201-b934-dc71ec96ec87",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.quantity).to.eql(1);",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3dfebb2-8775-4536-8cdf-aa801d345d1a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4eee8dd0-2e54-4753-a640-3e978564116c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - change quantity and subscription date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc8d27d-ac71-4788-bf73-36072affc412",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2016-12-08\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76e323d9-774a-4ee0-a7c6-09449b30b4e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.eql(1481155200000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1 A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed0bc3c7-434c-42a5-9347-66f71c8ed193",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "568dc797-b8c9-480a-9319-964b5b8d37b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"11\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - no changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "094be3c3-d32f-41bb-ae7a-4775ac77ff74",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92d134d5-1064-4966-88ee-efbfdd0699c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid3\", jsonData.subscription.services.serviceInstance[2].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.eql(1481155200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationDate).to.eql(1481155200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid4\", jsonData.subscription.services.serviceInstance[3].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].quantity).to.eql(11);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].subscriptionDate).to.eql(1481414400000);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6f9608c-5ffe-45d3-a78b-d9f51624bf1c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"More than one service instance with status [] was found. Please use ID to refer to service instance.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52b943a0-662b-4f21-8231-d6ff5247eef3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"TERMINATED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa0ff1cc-9589-454e-8398-78af4ac7c57e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"serviceIds\": [{{siid4}}],\r\n\t\"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"terminationReason\": \"TERM_REASON_1\",\r\n\t\"terminationDate\": \"2016-12-31\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55254309-6bd9-4bef-bb7f-1d8b7e3b0ea7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].id).to.eql(pm.globals.get(\"siid4\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "968069d2-3b67-49f7-bbf2-447132d6e643",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c51b7553-778b-43bf-9cdc-e03f157d5f93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service workflow - service single activation",
							"item": [
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09f55cb3-efc5-4f99-b315-8c557cb20963",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"service.allowMultiInstantiation\",\r\n            \"value\": \"false\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d08c47c-07b6-4500-9e7e-4d58c74888a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11ff3643-c9e8-4963-a6c8-40a224808165",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-12-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2260b3f4-e894-430d-a6e5-a697fb637773",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"3\",\n                \"subscriptionDate\": \"2016-12-11\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription I",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ff47c0b-e97a-4c4d-b99e-069795a523a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480550400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f8ac24-7266-4b5a-99e8-22d3dca7cf04",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2c1eee3-fb0a-4ba7-b54d-7945cb7edcfd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7cdf5fb-22b4-4b4b-90a7-1399440383e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37e497ca-2b06-4d15-8741-504853a6485d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca80ec2f-951e-4eb3-9b58-922f10483ed7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\"quantity\": \"5\",\r\n\t\t\t\"subscriptionDate\": \"2016-12-08\"\r\n\t\t}\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d5d5ed0-e3ab-4881-a147-2202ba533a31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4446f24-9bf5-4658-a4c9-c09707254c65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIds\": [\n        \"{{siid1}}\"\n    ],\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2016-12-31\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0decdac8-cd3b-490c-8614-d547656659c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38dac255-a6f4-4505-9133-60f8cc16c336",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_3\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d9b5d7f-7cdd-4d98-8304-bd54b24df7a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b0087fd5-29b4-427a-8dcc-b535e628dfed",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 242);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "59034762-5ff1-4792-bfc5-f53503f94c17",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription workflow",
					"item": [
						{
							"name": "Terminate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b23630b4-c345-4a97-b547-89628aec1074",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a12fca6-66e9-46b8-a30a-048f4641e6a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a38f1b3-094b-4d64-9317-99d6db79b3a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1456790400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1422835200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1427846400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fffe6ea-f08e-4f87-a03c-92d0c9a1b573",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-04-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad354889-5803-4c62-b0a4-cb5c8b5c83b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1456790400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1422835200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1427846400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3e88b84-374d-4a97-8df1-3e703c5c3db7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2c5f65f-8b67-45a4-8ed9-2483a7167e19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a585e21-7dc2-4037-90cf-ac26570da941",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"RECURRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fc13916-8d5a-4910-b184-5a0ea6fead45",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{terminationDate}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ff47926-6d42-4c35-b587-b552e7b83fa5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "270461c4-9e63-4b36-af91-524500291c01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a460582-eec8-4e85-8bb4-a60519a23956",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{5daysBefore}}\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{2daysBefore}}\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50f67e8c-e7f2-443b-9897-66ef76ab4a1b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - before Subscription's subscription date -KO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63679b01-c90d-46ea-b91b-126de9039281",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Termination date can not be before the subscription date\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{20daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - on Subscription's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01889f7b-8b54-4f48-80d9-0fcd1d49c663",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c27c5d2-d8c6-4abd-9ef4-ad02c7ca946a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdb6b2f9-e2c1-48b4-856e-3d9ac80f2be9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44847e6a-8e9b-4380-8e18-4f7cff29468e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{5daysBefore}}\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{2daysBefore}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce286928-859d-42ac-98a7-6ee0d7090035",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days 2 termination - inbetween service's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "369f400f-4405-42e9-9982-5c4750ba88fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{3daysBefore}}\"\r\n}\r\n\t",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23d75448-f60a-4e1d-bae7-cbf05750550d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"3daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(new Date(pm.globals.get(\"3daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac6b35aa-dc7e-4d6f-94d7-88d2a40cd38c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1996d6d5-e1a6-4139-8ce0-250a020783fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_3\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b04178f3-2b72-4031-9c94-2b508b65d74d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49ae6279-83f0-49ca-9ab5-5ba4ca9e8f6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d547caf-a32d-4919-8fc7-bdf96ebafa00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31a28042-25b0-4429-ba2b-c9f42c8be357",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_4\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"FIXED\");",
													"    pm.expect(jsonData.subscription.renewalRule.autoRenew).to.eql(false);",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.renewalRule.extendAgreementPeriodToSubscribedTillDate).to.eql(false);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ApplyOneShotChargeInstance",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "172d0312-71fe-4273-a2ba-629941d3c29d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3f36357-ed03-4e9b-a33c-b0f8e41cd0df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "applyOneShotChargeInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3260c92-4068-4959-9c89-94f33d5950fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS1\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\n    \"createWallet\": false,\n    \"operationDate\": \"2016-04-06\",\n    \"quantity\": \"1\",\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"13\",\n    \"criteria1\": \"criteria1\",\n    \"criteria2\": \"criteria2\",\n    \"criteria3\": \"criteria3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription instantiate/activate service NOT in Offer and modify offer in subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa13dc87-3e14-40cd-b5eb-b995d2ebb8cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create service with min req Vals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c84b4f4-1957-497f-a1d7-7543ad6879b1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n    \"invoicingCalendar\": \"Multi period\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53691187-5f86-4cb6-bcd4-75635a3685e9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Service \"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE is not associated with Offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03edd2f4-7349-4b0d-990d-34f1b7872315",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"No offerServiceTemplate corresponds to \"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e65f37ad-2d46-4bb6-a868-a245f0e7bb62",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcba1f6d-0797-443d-bbfc-16c2708cfddd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d779c4f3-3620-47c6-ae6f-b921da0f71cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot change the offer of subscription once the services are instantiated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Apply Product",
							"item": [
								{
									"name": "Create CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff7c88a8-1e7f-47d5-88fd-e50e5f28333e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0439aa1f-a304-446a-a321-c8ef8c655c3c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product charge100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7253c23-5a68-4b95-8d8d-ec564356b2ac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": false,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 100 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "deef1f3a-2f33-443e-921b-e3b420a7d935",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n    \"name\": \"{{baseEntityPrefix}}_PRODUCT100 NAME\",\r\n    \"productChargeTemplate\": [\r\n        {\r\n            \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n            \"invoiceSubCategory\": \"SUB_DATA\",\r\n            \"disabled\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c64891e-d5cb-45de-949c-7f206c9374db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100_PP\",\r\n    \"description\": \"price plan product 100\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"6\",\r\n    \"priority\": \"1\",\r\n    \"amountWithoutTaxEL\": \"#{mv:getInheritedCFValue(productInstance,'{{entityPrefix}}_{{index}}_CF_PROD_PRICE100')}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94578020-c9e7-4513-84d1-30a72c0d458a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e88d94f2-69f9-4b5b-acbc-fbebe4eada46",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ecbeb40-c8c1-426e-bcd1-50bd3e12e8b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "009d6304-10f6-4f7c-8f92-5748fcfb407c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f86cd3d3-62c2-47e9-a9e2-2b2621a2236d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e8c9b48-1a75-429d-922d-2bebaf22d7e2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.2\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f3c0db8-6301-44c8-9a3a-bb8a4a9f1abd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE100/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d629d72-8a0c-4f41-9552-e2b630bc8fc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE101/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6527919-2960-46b8-b288-30287d6f1f80",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var body = ",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_PROD\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.productInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_PRODUCT2\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_PROD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_PROD"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update service instance",
							"item": [
								{
									"name": "Create CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b5d9e9c-00d6-45b5-a88d-e40f739ef6bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ServiceInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2a5206d-c9b5-4dce-8ade-71016222a2ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2017-03-15\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2910927c-ba3b-460a-a881-dc19893c092e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2e762c0-4441-4d20-b016-2b5534536464",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60d046a7-aeed-42bb-8d21-23f5aa2eb079",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"endAgreementDate\": \"2017-03-29\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"201\"\n                    }\n                ]\n            }\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"endAgreementDate\": \"2017-03-30\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"202\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription-Updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01bc2fba-56d2-4724-ad5e-355b24d98a86",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 1,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 2,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - change quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7da0d3cc-637e-4bca-83db-ab3aa6b3b277",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"quantity\": \"5\"\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"quantity\": \"7\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - Updated quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a695f4a-e8f5-4fa9-a313-5d52526bde2d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(jsonBody.code);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 5,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 7,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b58b410-ec21-41ed-82e0-397dc3ac3efa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_SERV_UPD_100/ServiceInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100",
												"ServiceInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b71a237a-9502-43e7-959b-fd995b98cf8b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "164eafe7-6a1f-4b8e-86a0-ca4d43525997",
												"exec": [
													"var today = new Date();\r",
													"var terminationDate = new Date();\r",
													"terminationDate.setMonth(today.getMonth() + 5);\r",
													"\r",
													"\r",
													"pm.globals.set(\"testCase.terminationDate\", terminationDate.toISOString().slice(0, 10));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"terminationDate\": \"{{testCase.terminationDate}}\",\n            \"terminationReason\": \"TERM_REASON_1\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8223b11-8142-48e0-baf5-27238f3b1ee5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.serviceInstances[0].code).to.eql(jsonBody.serviceInstances[0].code);",
													"    pm.expect(jsonData.serviceInstances[0].quantity).to.eql(jsonBody.serviceInstances[0].quantity);",
													"    pm.expect(jsonData.serviceInstances[0].subscriptionDate).to.eql(jsonBody.serviceInstances[0].subscriptionDate);",
													"    pm.expect(jsonData.serviceInstances[0].terminationDate).to.eql(new Date(pm.globals.get(\"testCase.terminationDate\")).getTime());",
													"    pm.expect(jsonData.serviceInstances[0].serviceRenewal).to.eql(jsonBody.serviceInstances[0].serviceRenewal);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionStatus\": {\n        \"status\": \"SUCCESS\"\n    },\n    \"serviceInstances\": [\n        {\n            \"id\": 30,\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"description\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"subscriptionDate\": 1489536000000,\n            \"quantity\": 5,\n            \"serviceRenewal\": {\n                \"initialTermType\": \"FIXED\",\n                \"renewalTermType\": null,\n                \"initialyActiveFor\": null,\n                \"initialyActiveForUnit\": null,\n                \"calendarInitialyActiveFor\": null,\n                \"autoRenew\": false,\n                \"daysNotifyRenewal\": null,\n                \"endOfTermAction\": \"TERMINATE\",\n                \"terminationReasonCode\": \"TERM_REASON_1\",\n                \"renewFor\": null,\n                \"calendarRenewFor\": null,\n                \"renewForUnit\": null,\n                \"extendAgreementPeriodToSubscribedTillDate\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstances?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstances"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscribe to disable offer",
							"item": [
								{
									"name": "Disable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f03c81e-51d6-4fb3-b14e-07cc8308a340",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/disable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"disable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23861db0-d89c-4a74-b7cf-87217c507ff8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot subscribe to disabled offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d8e763c-053d-4dfc-b8b8-36a5cdac1e01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/enable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"enable"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Due date delay",
							"item": [
								{
									"name": "Find due date delay - bc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "318756ea-54b9-4b01-90ba-eaacd5083adf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData).to.deep.equal(jsonBody);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"dueDateDelay\": {\r\n        \"delayOrigin\": \"BC\",\r\n        \"computedDelay\": 2,\r\n        \"delayEL\": null\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode={{baseEntityPrefix}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25435c76-a1e8-4ee7-8534-1a7d9a048ec8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"CA_DELAY_{{index}}\",\r\n    \"description\": \"CA_DELAY_{{index}}\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"USD\",\r\n    \"language\": \"ENG\",\r\n    \"creditCategory\": \"PRO\",\r\n    \"dueDateDelayEL\": \"#{ba.customerAccount.auditable.created.date}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7551aa6c-b589-4149-90c2-b8f263a92791",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"BA_DELAY_{{index}}\",\r\n    \"description\": \"BA_DELAY_{{index}}\",\r\n    \"customerAccount\": \"CA_DELAY_{{index}}\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"US\",\r\n    \"language\": \"ENG\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71bdf88e-0750-4fe8-a87d-e03be4f349c9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"UA_DELAY_{{index}}\",\r\n    \"description\": \"UA_DELAY_{{index}}\",\r\n    \"billingAccount\": \"BA_DELAY_{{index}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63538a3f-d1cf-45dc-bbe7-a62f278aab47",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DELAY_SUB_{{index}}\",\r\n    \"description\": \"DELAY_SUB_{{index}}\",\r\n    \"userAccount\": \"UA_DELAY_{{index}}\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2017-01-07\",\r\n    \"endAgreementDate\": \"2017-01-07\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find due date delay - ca",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e61adca-97d9-431e-8280-4a853dcb0ede",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.dueDateDelay.delayOrigin).to.deep.equal(jsonBody.delayOrigin);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"delayOrigin\": \"CA\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode=DELAY_SUB_{{index}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "DELAY_SUB_{{index}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de671094-f480-43ea-980c-f48109dae68b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"DELAY_SUB_{{index}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n                \"quantity\": \"10\",\r\n                \"subscriptionDate\": \"2017-05-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription age",
							"item": [
								{
									"name": "Create recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c75c6361-fbff-45ae-9d6a-183b76200ede",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": true,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Subscription Age\"\r\n        }\r\n    ],\r\n    \"calendar\": \"MONTHLY\",\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"durationTermInMonth\": \"4\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "048c9d95-eda0-43e5-91f2-3a86b995fc50",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"invoicingCalendar\": \"MONTHLY\",\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7efce807-1b39-42d5-9805-a50bf0f09893",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": false,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b61e73ab-09ce-4169-bb8c-0660c2bf78ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"10\",\r\n    \"priority\": \"1\",\r\n    \"minSubscriptionAgeInMonth\": \"5\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "245eb4b1-2198-4652-9685-22ea06de261d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"15\",\r\n    \"amountWithTax\": \"30\",\r\n    \"priority\": \"1\",\r\n    \"maxSubscriptionAgeInMonth\": \"3\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbce2153-cd36-4e2b-8acc-e97238e3f852",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE1\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"2\",\r\n    \"amountWithTax\": \"4\",\r\n    \"priority\": \"2\",\r\n    \"minSubscriptionAgeInMonth\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f59e3aa-ca85-4da2-94ef-2e737997c256",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8858dc8d-2a5f-431d-8ed7-427a6c33f56a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcbff1bb-03fe-4608-95ca-b68f7b1e160c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-12-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54f35cf5-a972-4aef-8a20-6722a425ff41",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-07-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "804af8c8-b2fd-4a16-966b-6280cba47716",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-07-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f8c973e-9857-46dd-8d2b-c877de66f120",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-09-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Activate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2dbf56f-6649-46b8-8955-82a058c8267f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f1c223a-d8c3-4593-a6a2-4be4028e95ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68946fec-25d1-486b-b9e8-db9e4113b8f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0642037a-aeac-40a1-a893-1133b4c0cb92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9cd1896-0cca-41bd-b854-ce9c1f915633",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bde1b282-fd81-4493-abf2-284fafde63ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION2",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription status notification",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "251b4a7e-b1e7-45d6-83ec-4933cfab7d6f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"description\": \"rating script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.billing.Subscription;\\nimport org.meveo.model.billing.SubscriptionStatusEnum;\\nimport org.meveo.service.billing.impl.SubscriptionService;\\nimport org.meveo.service.script.Script;\\n\\nimport java.util.Map;\\n\\npublic class SubscriptionStatusUpdatedScript extends Script {\\n\\n    private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(\\\"SubscriptionService\\\");\\n\\n    @Override\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\n        log.info(\\\"<<<<<<< SubscriptionStatusUpdatedScript >>>>>>>>>>\\\");\\n        Subscription subscription = (Subscription) methodContext.get(\\\"subscription\\\");\\n        SubscriptionStatusEnum previousState = (SubscriptionStatusEnum) methodContext.get(\\\"previousState\\\");\\n        SubscriptionStatusEnum currentState = (SubscriptionStatusEnum) methodContext.get(\\\"currentState\\\");\\n        log.info(\\\"subscription.getCode() : \\\" + subscription.getCode());\\n        log.info(\\\"currentState : \\\" + currentState.name());\\n        log.info(\\\"previousState : \\\" + previousState.name());\\n        subscription.setDescription(\\\"from_\\\" + previousState + \\\"_to_\\\" + currentState);\\n        subscriptionService.update(subscription);\\n    }\\n} \"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3d1a420-a97f-41df-b8dc-eba83b9ea469",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification\",\r\n    \"classNameFilter\": \"org.meveo.model.billing.Subscription\",\r\n    \"eventTypeFilter\": \"STATUS_UPDATED\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"scriptParams\": {\r\n        \"subscription\": \"#{event.entity}\",\r\n        \"previousState\": \"#{event.previousState}\",\r\n        \"currentState\": \"#{event.currentState}\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3b2c4c7-ff34-4fd5-9158-6a210403c307",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f98b1a4-32b0-4985-bc87-59c0216b44d1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b683fb8-0a79-41f0-b96c-d7e9a982b457",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53e04ed9-6f5b-412a-92c0-836acfc6407a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.subscription.description).to.deep.equal(jsonBody.description);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"description\": \"from_CREATED_to_ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9a73d03-e7ec-478f-afe6-9fa8a1094528",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "adccfe25-d5db-47cf-aba7-f136c9b49083",
								"type": "text/javascript",
								"exec": [
									"var today = new Date();",
									"var terminationDate = new Date();",
									"var days20before = new Date();",
									"var days10before = new Date();",
									"var days5before = new Date();",
									"var days3before = new Date();",
									"var days2before = new Date();",
									"terminationDate.setDate(today.getDate() + 1);",
									"days20before.setDate(today.getDate() - 20);",
									"days10before.setDate(today.getDate() - 10);",
									"days5before.setDate(today.getDate() - 5);",
									"days3before.setDate(today.getDate() - 3);",
									"days2before.setDate(today.getDate() - 2);",
									"",
									"pm.globals.set(\"index\", 194);",
									"pm.globals.set(\"today\", today.toISOString().slice(0, 10));",
									"pm.globals.set(\"terminationDate\", terminationDate.toISOString().slice(0, 10));",
									"pm.globals.set(\"20daysBefore\", days20before.toISOString().slice(0, 10));",
									"pm.globals.set(\"10daysBefore\", days10before.toISOString().slice(0, 10));",
									"pm.globals.set(\"5daysBefore\", days5before.toISOString().slice(0, 10));",
									"pm.globals.set(\"3daysBefore\", days3before.toISOString().slice(0, 10));",
									"pm.globals.set(\"2daysBefore\", days2before.toISOString().slice(0, 10));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "22c0cdc0-d570-44fa-88d7-a7a488bbb9ba",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription with Inherited CF",
					"item": [
						{
							"name": "Tests",
							"item": [
								{
									"name": "Create CFT for User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0160fddd-d630-42cf-abea-a159a62d4bd2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"userAccountCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9af01277-97ca-42fd-8e07-28cebb529c05",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription - Not Inherited",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11e10c10-9936-4688-a666-1df77ee14241",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCFNotInherited\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3 - Temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01f5fe7c-5572-42dc-bdab-c88399ea2653",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"subscriptionDate\": \"2016-03-10\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aae6a23b-3345-4cc6-9fcc-c8a65f7412f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2015-02-01\",\n    \"endAgreementDate\": \"2015-05-01\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54d254d5-15b0-4702-abd4-6a3041e1e031",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_InheritedCF\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA_3_InheritedCF\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1422748800000);",
													"    pm.expect(jsonData.subscription.endAgreementDate).to.eql(1430438400000);",
													"    pm.expect(jsonData.subscription.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].stringValue).to.eql(\"subscriptionCFNotInherited\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].stringValue).to.eql(\"SUB_INHERITED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"subscriptionCFNotInherited\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_InheritedCF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_InheritedCF"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f410f884-74db-4787-b528-8e536f190f17",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_UA_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_UA_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7977f81-a52b-42af-bef3-aadb0910cb67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "860fd9c0-d828-4984-b1cf-6d0b514443bb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_NOT_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_NOT_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Inherited CF in Account",
							"item": [
								{
									"name": "Create CFT for CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "272fcd00-9aa3-4044-ad2e-db9706f1af3a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Customer\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1438be7f-cf8d-4370-894d-7d81ae7d151f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"BillingAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a49f8ec-ee71-406f-9ce8-f3c4252eb522",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"CustomerAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7590d043-244e-4218-bb7f-e58e1a918ac8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b843304-f9a5-4850-8616-75da9d4b7959",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_432@manaty.net\",\n    \"paymentMethod\": \"2\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"sellerCode\": \"SELLER_FR\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"CYC_INV_MT_1\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"75001\",\n    \"city\": \"Tunis\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8da41017-2326-474c-a7c7-88cb756b8339",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customerCategory\": \"CLIENT\",\n    \"seller\": \"SELLER_FR\",\n    \"customerBrand\": \"DEFAULT\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueC1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueC2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59d6aa2f-4377-4ff3-8619-0b3be6f9338c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customer\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"currency\": \"EUR\",\n    \"language\": \"FRA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cccdf33-e4cb-4bf1-ba8d-b09712c51879",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2016-04-01\",\r\n    \"subscriptionDate\": \"2016-01-01\",\r\n    \"electronicBilling\": true,\r\n    \"status\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}@manaty.net\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueBA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueBA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc387f3d-c6f9-4ac3-935e-3dd2620b0089",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\r\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"address1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"address3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\",\r\n    \"status\": \"ACTIVE\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueUA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueUA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b89f928-b107-457f-bc38-8d74abd27008",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueC1\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueC2\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueCA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueCA2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        \"inheritedCustomField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueC1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueC2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f3d84e9-b2e7-4fdd-8b33-b292ae539119",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_BA\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b23b07bd-8c38-43ea-b08a-0e70b4123869",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueUA1\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueUA2\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n            },\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueUA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueUA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3a361b6-40d4-4e28-925a-fe75dabfe1e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3601be72-647c-4e5c-a93a-98908ebfe028",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b5affe8-b426-47de-a3af-17ad21fac7c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb59ee70-ef67-46af-942c-a6284e8f0342",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a33f00f0-8cc3-4a8b-ac18-23de0ab77ca1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6691fd1-bd8b-4054-8a3e-4d67ffc247e2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/BillingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"BillingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "941c0c7d-26ab-4153-ba49-8d3279d5ce02",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"CustomerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8561193e-0ccc-4fc0-b3a2-e995cac97a1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/Customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"Customer"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6008436d-36c7-4b3c-90c6-84292df51896",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 460);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "928e832e-43f5-4cac-9f3e-6f951ab7deba",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EL expression tests",
					"item": [
						{
							"name": "Calling script from EL",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f4d386c-f52a-4bc8-a76d-6158c055c7db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\n            import java.util.Map;\\n            import java.math.BigDecimal;\\n            import org.meveo.admin.exception.BusinessException;\\n            import org.meveo.model.admin.User;\\n            import org.meveo.model.crm.Provider;\\n            import org.meveo.model.BusinessEntity;\\n            import org.slf4j.Logger;\\n            import org.slf4j.LoggerFactory;\\n            public class The{{baseEntityPrefix}}_ScriptEL extends Script {\\n                private static final Logger log = LoggerFactory.getLogger(The{{baseEntityPrefix}}_ScriptEL.class);\\n                public void execute(Map<String,Object> context) throws BusinessException{\\n                    log.debug(\\\"The{{baseEntityPrefix}}_ScriptEL called\\\");\\n                    context.put(Script.RESULT_VALUE, ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode()!=null && ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode().startsWith(\\\"EL_\\\"));                 \\n                }\\n            }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT on Charge",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eafce58b-e20d-4755-8512-8987934a3b27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"description\": \"Field visible on entities with code starting 'EL_'\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"ChargeTemplate\",\n    \"defaultValue\": \"KUKU\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": true,\n    \"applicableOnEl\": \"#{mv:executeScript(entity,'org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL', null, entity.auditable.creator)}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recuring Charge OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d5e0298-0b52-4655-8f78-74a6272015ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC1\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf286fe-504b-434b-b0b3-20a229730ada",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customFieldTemplateCode\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"appliesTo\": \"ChargeTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{baseEntityPrefix}}_CFT_EL_SCRIPT/ChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{baseEntityPrefix}}_CFT_EL_SCRIPT",
												"ChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Script Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47bbefdb-3983-4dc5-98cd-64484825c897",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Charge filter expression",
							"item": [
								{
									"name": "Update recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edc22575-8b85-45eb-9e04-529ab6c14d30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    },\n    \"filterExpression\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f91c6c06-0606-40a9-b3dc-8abf33097883",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\n    \"subscriptionDate\": \"2018-01-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8dd13c45-bf83-4f66-b26b-4a6e02ea77f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"quantity\": \"2\",\n                \"subscriptionDate\": \"2018-01-01\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70d04623-80fb-4713-8a03-efa2aa258b2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_CHARGE_FILTER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_CHARGE_FILTER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update recurring 3 - restore",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f86ff54-b3ad-423d-b326-0c268fc0ce52",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "InvoiceType - EL AO",
							"item": [
								{
									"name": "Create Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "725c43b3-4d8b-4fb3-a092-03a75a22dc5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98acffab-5b94-475d-9f27-1fc355284c6c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"name\": \"{{baseEntityPrefix}}_EL_INV_OFFER1\",\n    \"disabled\": false,\n    \"offerServiceTemplate\": [\n        {\n            \"serviceTemplate\": {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\"\n            }\n        }\n    ],\n    \"lifeCycleStatus\": \"ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create InvoiceType - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58ce87aa-33a7-46e8-96a0-e0a6c13acb51",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description_Created\",\n    \"occTemplateCode\": \"INV_REB\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"2\",\n        \"currentInvoiceNb\": \"1\"\n    },\n    \"sellerSequence\": {\n        \"SELLER_FR\": {\n            \"prefixEL\": \"SellFact_\",\n            \"sequenceSize\": \"9\",\n            \"currentInvoiceNb\": \"9\"\n        }\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"matchingAuto\": false,\n    \"billingTemplateName\": \"BTN\",\n    \"billingTemplateNameEL\": \"DEMO_#{invoice.id}\",\n    \"occTemplateCodeEl\": \"#{invoice.invoiceNumber.startsWith(\\\"Fact_\\\")?\\\"INV_STD\\\":\\\"INV_REB\\\"}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2528a41-00bd-43a1-af1f-f4fe74457c1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"dueDateDelay\": \"1\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceDateDelay\": \"1\",\n    \"invoiceTypeCode\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64c0e346-87e6-43ef-979c-71620212dfb9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_43@manaty.net\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"sellerCode\": \"SELLER_US\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"toto\",\n    \"lastName\": \"toc\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"4050\",\n    \"city\": \"Los Banana\",\n    \"methodOfPayment\": [\n        {\n            \"paymentMethodType\": \"DIRECTDEBIT\",\n            \"bankCoordinates\": {\n                \"bankCode\": \"12456\",\n                \"branchCode\": \"23456\",\n                \"accountNumber\": \"34589324756\",\n                \"key\": \"45\",\n                \"iban\": \"1212\",\n                \"bic\": \"67789456\",\n                \"accountOwner\": \"Me and co\",\n                \"bankName\": \"Some bank\",\n                \"bankId\": \"78946\",\n                \"issuerNumber\": \"46789\",\n                \"issuerName\": \"Some issuer\",\n                \"ics\": \"5587\"\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5231324-a06e-4b86-90e3-c33db69b9ffa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"userAccount\": \"UA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"offerTemplate\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"subscriptionDate\": \"2050-10-13\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbed6a7d-2930-473d-ae64-4f23e9726aa7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e963caf-a4a4-4209-96b3-07098952f08c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2050-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Charge CDR - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2819d675-68eb-45b2-b79c-ece32cb0c624",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2050-10-13T00:00:00.000Z;1;{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO;USAGE",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate invoice - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8994998-021c-49bb-b3e0-dee6f9e5e3b0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"BA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2050-10-15\",\n    \"firstTransactionDate\": \"2050-10-01\",\n    \"lastTransactionDate\": \"2050-10-31\",\n    \"generatePDF\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DDRequestLotOp - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a14d127-dfc7-4321-8846-87a7c0f61514",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fromDueDate\": \"2050-01-01T00:00:00Z\",\n    \"toDueDate\": \"2051-01-01T00:00:00Z\",\n    \"ddrequestOp\": \"CREATE\",\n    \"status\": \"WAIT\",\n    \"ddRequestBuilderCode\": \"SEPA_STD\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "AO Job - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fea33d35-6f5f-4455-bafa-0b2dccf92b28",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"AO_Job\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Account operations - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e736140-f871-47a6-9b3c-df1503d1de32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"paging\": {\r\n        \"fullTextFilter\": null,\r\n        \"filters\": {\r\n            \"customerAccount.code\": \"CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\"\r\n        },\r\n        \"fields\": null,\r\n        \"offset\": null,\r\n        \"limit\": null,\r\n        \"sortBy\": \"id\",\r\n        \"sortOrder\": \"DESCENDING\",\r\n        \"totalNumberOfRecords\": 2,\r\n        \"loadReferenceDepth\": 0\r\n    },\r\n    \"accountOperations\": {\r\n        \"accountOperation\": [\r\n            {\r\n                \"id\": 2,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_03\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 21.240000000000,\r\n                \"amountWithoutTax\": 18.000000000000,\r\n                \"taxAmount\": 3.240000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 21.240000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_02\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 10.620000000000,\r\n                \"amountWithoutTax\": 9.000000000000,\r\n                \"taxAmount\": 1.620000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 10.620000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation/list?customerAccountCode=CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation",
												"list"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98ae5c75-fe41-4252-9650-e940605bf8a5",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 73);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c943aba6-a87e-44da-a63a-d8bdab79dfcd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom Fields in Filters",
					"item": [
						{
							"name": "Setup Test Data",
							"item": [
								{
									"name": "Create Test Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21812c10-be44-47ce-9d77-30ec6d65da75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-06-01\",\n    \"endAgreementDate\": \"2016-06-30\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c377795b-84d7-4906-ba29-d7d650f38dd7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_ACCP\",\n    \"subscription\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb42d338-639c-4755-bae3-5b5e30d1c110",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_BA\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_BA\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n      \"title\": \"MR\",\n      \"firstName\": \"ABC123\",\n      \"lastName\": \"DEF456\"\n    },\n    \"address\": {\n      \"address1\": \"adress1\",\n      \"address2\": \"address2\",\n      \"address3\": \"adress3\",\n      \"zipCode\": \"21000\",\n      \"city\": \"Dijon\",\n      \"country\": \"FR\"\n    },\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\n    \"billingCycle\": \"CYC_INV_MT_1\",\n    \"country\": \"FR\",\n    \"language\": \"FRA\",\n    \"nextInvoiceDate\": \"2015-04-01\",\n    \"subscriptionDate\": \"2015-01-01\",\n    \"electronicBilling\": \"true\",\n    \"email\": \"ABC123@manaty.net\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "750fcb94-0052-4eb2-9a18-a4af49562934",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_REC1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_REC1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_REC1\",\n    \"amountWithoutTax\": \"10\",\n    \"amountWithTax\": \"12\",\n    \"startRatingDate\": \"2016-06-01\",\n    \"endRatingDate\": \"2016-06-30\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"6\",\n    \"maxSubscriptionAgeInMonth\": \"12\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan OneShot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa75a402-9032-4bd3-bb55-0811b06406f7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_OS1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_OS1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_OS1\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"15\",\n    \"startRatingDate\": \"2016-06-01\",\n    \"endRatingDate\": \"2016-06-15\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"6\",\n    \"maxSubscriptionAgeInMonth\": \"12\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan usage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9721f33c-4dba-4a9a-9be9-0a4420dd25d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_USAGE1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_USAGE1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\n    \"amountWithoutTax\": \"9\",\n    \"amountWithTax\": \"14\",\n    \"startRatingDate\": \"2016-06-15\",\n    \"endRatingDate\": \"2016-06-30\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"12\",\n    \"maxSubscriptionAgeInMonth\": \"24\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create recurring charge template",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e7010b1-76e8-4432-883e-19c1863dba1c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_REC100\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\",\n    \"durationTermInMonth\": \"10\",\n    \"taxClassCode\": \"{{baseEntityPrefix}}_taxClass\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Filters",
							"item": [
								{
									"name": "Create Access Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8ef8339-fd37-4d8d-b5c0-d4ba2e186bc9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Access\",\n    \"description\": \"Subscription with Start and End Date\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.mediation.Access</targetEntity>\\n                <alias>a</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>startDate</field>\\n                  <field>endDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>startDate</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfDate:ACCESS_START_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>endDate</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfDate:ACCESS_END_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>subscription</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfEntity:ACCESS_SUBSCRIPTION</operand>\\n                                <className>org.meveo.model.billing.Subscription</className>\\n                                <label>Subscription</label>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter - Rating date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed44e984-0625-4731-bc72-93805e3aa612",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix\",\n    \"description\": \"Start and End Rating Dates\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>startRatingDate</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfDate:PRICE_PLAN_START_RATING_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>endRatingDate</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfDate:PRICE_PLAN_END_RATING_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter by Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c298926-b49d-41f3-95bb-6fb10a2d8f08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Code\",\n    \"description\": \"Priceplan by code\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>code</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfString:PRICE_PLAN_CODE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter by Amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dd5a0c0-7548-4379-8a16-a1ddeb1e445d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Amount\",\n    \"description\": \"Priceplan by code\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>amountWithoutTax</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDecimal:AMOUNT</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter Age",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d26f340-7598-43e0-9e5c-9c06682c350e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Age\",\n    \"description\": \"PP by Age\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>minSubscriptionAgeInMonth</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfLong:MIN_SUBSCR_AGE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>maxSubscriptionAgeInMonth</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfLong:MAX_SUBSCR_AGE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94772e80-645f-4fe6-b57c-409291480d93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Billing_Account\",\n    \"description\": \"Multi Fields\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.billing.BillingAccount</targetEntity>\\n                <alias>ba</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>statusDate</field>\\n                  <field>email</field>\\n                  <field>nextInvoiceDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>statusDate</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDate:BILLING_ACCOUNT_STATUS_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                        <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>email</fieldName>\\n                                <operator>LIKE</operator>\\n                                <operand>cfString:BILLING_ACCOUNT_EMAIL</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>customerAccount</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfEntity:BILLING_ACCOUNT_CUSTOMER_ACCOUNT</operand>\\n                                <className>org.meveo.model.payments.CustomerAccount</className>\\n                                <label>Customer Account</label>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                        <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>brAmountWithTax</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDecimal:BILLING_ACCOUNT_AMOUNT_WITH_TAX</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account Filter enum",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f8178d5-a37c-4c66-9495-1908af55bc47",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Billing_Account_Enum\",\n    \"description\": \"Multi Fields\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.billing.BillingAccount</targetEntity>\\n                <alias>ba</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>statusDate</field>\\n                  <field>email</field>\\n                  <field>nextInvoiceDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>paymentTerm</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDate:PAYMENT_TERMS</operand>\\n                                <className>org.meveo.model.payments.PaymentTermEnum</className>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                        \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring charge template Filter by Duration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1907f9ec-eddf-48fa-8bcb-d541d18ead59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Duration\",\n    \"description\": \"RCT by duration\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.RecurringChargeTemplate</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>durationTermInMonth</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfInteger:DURATION</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring charge template Filter by Prorata",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bde73194-2e20-4302-8ffe-4d5b5e2fac18",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Prorata\",\n    \"description\": \"RCT by Prorata\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.RecurringChargeTemplate</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>subscriptionProrata</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfBoolean:SUBSCRIPTION_PRORATA</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search with Filters",
							"item": [
								{
									"name": "Search PP by date - date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2010e5cd-00f6-4a97-b715-1587617cfbfb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix\"\n    },\n    \"parameters\": {\n      \"entry\": [\n        {\n          \"key\": \"PRICE_PLAN_START_RATING_DATE\",\n          \"value\": \"cfDate:2016-06-01\"\n        },\n        {\n          \"key\": \"PRICE_PLAN_END_RATING_DATE\",\n          \"value\": \"cfDate:2016-06-30\"\n        }\n      ]\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												},
												{
													"key": "query",
													"value": "PRICE_PLAN_START_RATING_DATE:cfDate:2016-06-01&PRICE_PLAN_END_RATING_DATE:cfDate:2016-06-30",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search PP by code - string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa8420a-7616-45d9-9778-913183c4ad0d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Code\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"PRICE_PLAN_CODE\",\n        \"value\": \"cfString:{{baseEntityPrefix}}_TEST_REC1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search PP by amount - decimal",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87c5a9fa-b75f-4364-9484-edfbcecbb795",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Amount\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"AMOUNT\",\n        \"value\": \"cfDecimal:10\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search PP by age - long",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58808b9c-9e87-4c88-acbf-2127027348bb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Age\"\n    },\n    \"from\": \"0\",\n    \"size\": \"100\",\n    \"parameters\": {\n      \"entry\": [\n        {\n          \"key\": \"MIN_SUBSCR_AGE\",\n          \"value\": \"cfLong:6\"\n        },\n        {\n          \"key\": \"MAX_SUBSCR_AGE\",\n          \"value\": \"cfLong:12\"\n        }\n      ]\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search RCT by duration - integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c0c75cf-93dd-4f3d-ac60-ee70febe0c02",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Duration\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"DURATION\",\n        \"value\": \"cfInteger:10\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search RCT by prorata - boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcd1e30d-cc78-4885-a08c-e34ffbb20efb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Prorata\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"SUBSCRIPTION_PRORATA\",\n        \"value\": \"cfBoolean:true\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test Data Cleanup",
							"item": [
								{
									"name": "Remove recurring charge template",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f47ed58-7348-4d08-a925-6227f1f1a215",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"recurringChargeTemplateCode\": \"{{entityPrefix}}_{{index}}_REC100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{entityPrefix}}_{{index}}_REC100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{entityPrefix}}_{{index}}_REC100"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a9bc987-db0b-43f8-b5f7-701ea91dd205",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessCode\": \"{{baseEntityPrefix}}_TEST_ACCP\",\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/{{baseEntityPrefix}}_TEST_ACCP/{{baseEntityPrefix}}_TEST_SUB/2016-06-01/2016-06-30",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"{{baseEntityPrefix}}_TEST_ACCP",
												"{{baseEntityPrefix}}_TEST_SUB",
												"2016-06-01",
												"2016-06-30"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bc790b4-0e40-4abf-b3cd-ff0bc06e2d65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeBillingAccount\": {\n        \"billingAccountCode\": \"{{baseEntityPrefix}}_TEST_BA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{baseEntityPrefix}}_TEST_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{baseEntityPrefix}}_TEST_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87f4e4ff-6ea0-47e0-98f9-7db82cc71757",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_REC1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{baseEntityPrefix}}_TEST_REC1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove priceplan OneShot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98bb6acb-9f66-415e-b313-3b95ce604911",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_OS1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_OS1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{baseEntityPrefix}}_TEST_OS1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove priceplan usage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4333bee8-4f74-414e-9667-2e47011b6543",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_USAGE1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_USAGE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{baseEntityPrefix}}_TEST_USAGE1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c16edf78-0106-43d5-baa6-66a387579ee3",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 641);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0308dfb0-3b3b-4e85-9751-0e12e5dc32cf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Customization",
					"item": [
						{
							"name": "Reference Entity",
							"item": [
								{
									"name": "Create CFT with reference entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40a76759-1deb-4f04-8eae-10f67a716531",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"fieldType\": \"ENTITY\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityClazz\": \"org.meveo.model.crm.Customer\",\n    \"storageType\": \"SINGLE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - no wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78c69c7b-5b1a-4496-99da-18d9c28db732",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - with wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb5f214a-8eca-47fe-953b-89a891ef40c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100&wildcode=2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												},
												{
													"key": "wildcode",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List per entity instance - el evaluated",
							"item": [
								{
									"name": "Create CFT Offer visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b78e54b-d18f-4ad6-ac22-6de550e7720c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"VISIBLE\",\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Offer hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73fcca36-6e06-4de3-8b43-52bd525d7a77",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"HIDDEN\",\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query visible CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c39cda8-ff15-4992-b5b2-80f5fdb9d8e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.field[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.field[0].description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfa548a2-bd05-4f16-b95e-cb4d71a5a224",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42a32dec-2646-4d32-8e7d-49dfe09c40f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"description\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2aba004-298c-4578-b00e-e97a93edbcf2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "List visible CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac33fe7c-78f8-4c22-8907-d0d9dd2d447d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.action[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.action[0].description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.entityCustomization.action[0].appliesTo).to.deep.equal(jsonBody.appliesTo);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f433cdb8-39ee-4121-a6ff-807025d358ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_HIDDEN/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_HIDDEN",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b717b5e-f6c7-4a5f-8d83-75ec30bb209b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_VISIBLE/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_VISIBLE",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf782fd-b4be-4762-866a-8c0e5aaa684f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Execute entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af64dd96-4dd4-4274-ba60-c98c6f7c785c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b51656d2-9d07-4938-a108-fa5c2741ea0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}\",\n    \"description\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b9ba8e9-2dab-43f3-844e-4f1e1763eeb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityCode\": \"{{baseEntityPrefix}}_OFFER3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/action/execute/ExecuteCustomAction_{{index}}/OfferTemplate/{{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"action",
												"execute",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate",
												"{{baseEntityPrefix}}_OFFER3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c139f63d-18a0-4699-81a0-81c7eb51828b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.offerTemplate.description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"action executed\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{baseEntityPrefix}}_OFFER3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3619f350-36e0-4e3f-bf4c-09b0d670d37d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f9a4fb0-0e6e-45b1-807d-ec89ec848fd9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script "
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e42fde8-7b02-491f-b497-880a91c054d3",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 461);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e1f24e4e-0681-4915-89fd-89b2d4fd95a7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Security",
					"item": [
						{
							"name": "Setup Data",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86714f94-a4c9-40a7-9bca-b774aef68e08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6975c2e4-05b5-4b1b-b797-b63aff1d7f5f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "002b2302-845e-489d-9b64-aa326efb2c11",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e81b2572-988a-4848-9e27-7bddf8d08313",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbae800b-5d9e-4255-babc-10ee9547bee6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "435cc917-9b13-4f54-ae5e-5cb8e9881ea8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Account Hierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8abbb705-c22c-427b-ad3e-8edbf878e7a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellers\": {\n        \"seller\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"currencyCode\": \"EUR\",\n                \"countryCode\": \"FR\",\n                \"languageCode\": \"FRA\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"currencyCode\": \"USD\",\n                \"countryCode\": \"US\",\n                \"languageCode\": \"ENG\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/customerHierarchyUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"customerHierarchyUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserHierarchyLevels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f745e480-e48b-4f76-a1f8-437e77c30085",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description1\",\n    \"orderLevel\": \"1\",\n    \"userHierarchyLevel\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 2\",\n            \"orderLevel\": \"1\",\n            \"userHierarchyLevel\": [\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 21\",\n                    \"orderLevel\": \"1\"\n                },\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 22\",\n                    \"orderLevel\": \"2\"\n                }\n            ]\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_3\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 3\",\n            \"orderLevel\": \"2\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6b73028-30c8-486d-bc34-500ceeac3368",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9d30f38-1ff2-4cc1-854d-979632a063b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4209024b-b5fa-440c-b84a-84d39e08e1cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "902bf9ee-3b1f-4741-846e-80b28104a222",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9a7ca16-5bb1-473e-bdaa-d0234dc7cffc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n      \"administrateur\"\n    ],\n    \"firstName\": \"Level 3\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserRole with userSelfManagement permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6b634d3-23ca-42a6-9f8d-aa56971899f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"description\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"permission\": [\n      {\n        \"permission\": \"userSelfManagement\",\n        \"name\": \"User Self Management\"\n      }\n    ]\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93991c24-79ec-450e-8aba-e80fd65ae10f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c45a99c4-f2a2-4657-84ed-657ddd71b70a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93a08d8b-67c6-4f8c-9bf9-af5f9408dec4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_B\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce751c1f-c21f-4324-9329-9b33eef96210",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A,B,C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ab8d454-14e2-4ee0-bde0-375bc6b5939a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_D\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\",\n        \"{{entityPrefix}}_{{index}}_SELLER_B\",\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ce43ec0-db49-46d1-a8a6-a4b40d98bd1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"true\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller Tests",
							"item": [
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f00d8b06-1213-4b7c-b228-18e7c39d0b1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58b5aba0-5c90-475f-a1e9-7c560fb0ea9f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7653ef26-f3d6-4b9f-8a65-86b0ba985606",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to MAIN_SELLER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77454ced-d206-4cf8-9e67-74e191f613cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"MAIN_SELLER\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba95c880-eb2c-4edb-b31d-d519ee8fc29b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a13615ae-7c24-449f-896d-e386bd53353c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "843ee9ed-5148-44fe-87cd-9829275cf9fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21ddccd0-53f1-4eba-9068-c4219f43d6ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae099d09-cca8-4a36-b011-b4ae27386e0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc6b6db7-fa5a-4b6c-9cca-0dfd3b906f12",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03d39e69-3a5b-427c-a5a3-e2912baf6706",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d79f849-7e63-4f2b-86d8-07b74e2f7eaf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a09962d-314d-445d-b821-e6320411cf7a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8fbd3e4-c1fc-4889-b639-9142084769b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a66daafe-8a6d-46ed-a1b7-20fa635e0cd6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed61224f-a0fe-4094-99b5-4ed41910b02a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb658e34-b834-42f3-ba13-2cd25feee3fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dccbbfd0-bd6c-4559-9a4d-0c8ba8c365b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d36b06b-d4da-4b4d-8078-607b1d1ff38c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        \n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea0ab4bd-cb08-43d9-88b6-dc091aaee972",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a126b55c-3c25-4b28-b5d2-0647f0f99a95",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ea27162-bdaa-4044-8dfd-113c25af03e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e486eaf3-d877-42cb-b019-dc888c16f23a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01111230-33fa-42c1-bdd7-ecfe3b071129",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3812be46-6a1d-4f9e-a23c-4009e37ddc8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55d74531-171a-460c-b7c3-5443e6b20776",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "131ca3bd-fbb1-41e4-af63-83ff2ac0eabf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d9afd2c-4fcf-43f3-a8ec-6717c5571536",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ced05bd-72b1-4f6a-b087-2285659c082c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7824b5da-f4b8-41d8-8882-ff0c7d473c7c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f790f1ff-c470-481b-80b3-ebbb49ae28b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "975fc530-42b6-46dd-8b37-e193ae53d1d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b74a86aa-5fe0-4ce6-a7e4-a9193f228d3b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86c7d1c2-500b-4cad-8f40-22d0b735b0d5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f160431f-2b8f-443a-bd30-d5620a4edd11",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98c6e151-369b-431e-8ac2-acdf2ea08ad8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "853b33bd-8b92-4a2b-a928-781c366defcb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92e4ee86-79f3-4d2f-a2c9-ec65d089b4d1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5660a393-9bb7-4cd8-a3c5-10ab5ca7ea53",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce00408b-7a9f-414c-b0ca-869afd007ac2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fc7ae20-6c3a-4db8-b83b-701a7b6137f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acfe87bd-fe18-49c3-8a78-83af7016737c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ee1bee-abd3-4d2b-9c77-8e9e647f541d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8508d3ed-a329-4c50-93e8-d01770a2103e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28483c79-8ed7-4524-9bce-1e2334493ff2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f4a73e6-8e7a-4289-ada2-3103fac17c83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf7ca088-e32a-474c-a931-1de93c575a9d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0babc075-c0cb-43c4-9501-4ecf94aa848a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bf39eeb-559f-48c0-b7e9-10575b7a4df6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f82bcdf-48cb-4b8f-9956-2586ffd1f812",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b6572e5-f1e9-4265-b2fb-b0e949c8b550",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46deee72-142d-4fb2-89be-a341f774b83b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "661de06a-e09e-4e9d-9bb1-3a7eab2fcfd6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9aea1f86-bb6c-4186-a85b-4e4dac67783d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75a586c6-0f5e-4c6b-8c70-36c84d92c05a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c45169c-7903-4769-a08b-737dfaedd6bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45ecd7a5-a692-4789-b451-8b483c049d88",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0544388d-f965-4ce7-a522-3208b8476f11",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_A\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dadccd3-7abc-4e49-a3cf-5981c38d489a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "871ef6b8-ca85-4a3d-9da2-a91851788d82",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "981d8607-c8ff-4471-97ca-7dbf5e5ac1b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d57a14e3-e2ae-4463-8205-49cb93947956",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff10a671-df9a-4ead-b086-3ba5f3d8eea8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1fe5155-6fa4-4e42-8a99-b62071ae2bc3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b508cb0a-7279-441d-8ee0-d2d29dbefacb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0794a0f8-4fc8-47af-8519-4e56354c0b95",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA and CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1f2e3ae-28bf-4a0a-9aa2-58e26077d94f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d10e9ae-15c4-4e03-9849-360f92f225be",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA with all its CustomerAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48ae2678-4bf0-4af9-b3d0-cedb1ab842d1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9603efd-d28a-44ef-9f68-dc740f45dec0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Billing Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f166b516-563e-4252-9c72-82d83e98f7fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5eb9e9c-f13e-4155-9f37-27fe19e56adf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20811e40-a4c1-49d3-a3f0-719ca0059c98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97df523e-6d02-4279-824f-fb745155b39b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4ad5bd5-add7-4b7c-bbcd-eddb377fb995",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67ef3e48-4114-4a6e-bc61-81c3d0a510ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8455f571-00dc-4a4a-9a1c-66a3a234c48d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95abba74-a8c9-4e87-b065-7a6122db244e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40445206-2d35-46ea-96f2-6007f9b7c756",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c16fdfe-d2b9-4c31-8ac9-d64b1b9f01b1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f181a9-57bf-4214-a982-3eec3ed63741",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c89902ce-7fc0-4d94-9225-b1717a2a466a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "776336d6-c018-4ec5-914f-53ba16e210af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddff9434-cef9-480e-be2a-0932f843e734",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6d24338-643b-4206-aa77-8ad7edd1adb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fe5aae1-0873-4f64-a58a-c34a48dd2146",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e4d4c45-ac39-4806-b36b-6657fd03c877",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f824c14-fd71-4f0d-bba5-a876838706af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c1861b7-7542-487f-ac7c-c1b48eced480",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c34f279-18cb-44eb-829c-0c8986a8eef9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec4e995a-69c8-4ec6-bf00-8d0875a806b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad384dbf-1b50-4e79-bfff-01e162aa8c7a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16532c1a-d53a-4ae2-9d66-bc8f6145025f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "960fb625-1542-49e9-bec0-c685aea576ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a5df7c2-79a1-443b-8e3b-ebb88dad793c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84374585-6ac2-4aca-9942-2e415cc931e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc807d99-2c0c-4e77-9f8c-153efddcce2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e2c58ba-cda2-4c1a-a615-1a8ffa559d37",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31fbfe86-c02d-4892-a9ec-f006da4e4004",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17a59a63-6dbf-4b4a-bc79-fd8a674b87bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e958e46-b180-491e-8718-8907698633e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6cc4a0a-9450-46da-b75c-0416b03bcb02",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c339bace-a9c1-44db-9d88-2baf47b66816",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d0b4788-7ede-4d54-a758-12682ad0b760",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83e34fde-a77d-4d13-afc5-bdbe1735dfb4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "739954bf-4413-4e1b-a77f-716257ba2955",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3d58409-4050-4669-810d-8c156d123fa8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73fa6e79-33e3-4810-bd28-6e5cd299368c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4665471e-cb3b-454f-adfb-80b113343186",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 and BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4b7d8b3-196d-4e24-8fc4-a56247dfb661",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 with all its BillingAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07756787-9445-48c9-944a-a0fe8a8b04da",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffadfc97-ee28-42e9-942a-31537839cb31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c26cbf4c-f1db-4079-a105-9118376c6284",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ab6f73a-3fca-4398-b860-f93b9ba3f840",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8751ccd1-7771-411f-bb71-44e1484309f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe5530a6-d5e8-4e48-b167-586c530ccb93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f560dee7-945b-4c5e-b9e0-dacf40e56f31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9852b29-1dff-487f-8321-1e4d0f058230",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f71b858e-3be5-4c3d-b7f3-e9a3b6679a50",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6d7ff9c-30b2-4090-adac-1e650747f50b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e567841b-1d08-4564-ba36-2c085c32facf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb5ae856-2b67-45fb-90d8-89c725b8ce6c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fc8c292-de14-4a84-9eca-e461017b911a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ff866cf-ec55-4024-afd1-b2f69b4fb19c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11ba8155-7d0a-4ba6-84b6-bb0b32d296df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af470e47-eec6-4b43-97e0-d4b407732abe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "447399fe-6bd1-40c8-90cb-8c73050a9c27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "410c74ba-aff4-40f4-b2ad-b41ec71383b0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d36b07ec-b215-4394-9903-abe219fe917c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4c21991-5124-4380-a425-65b10cfe33df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea9fbdcc-7b5d-46da-8414-0463cd5334a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec471078-a934-4b2c-87e4-15257497f04f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b18e9f2-4801-4f98-a7b9-edf595943376",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14c07831-b25b-4d78-8129-39b91e9786fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e86cfbc4-5650-444a-8005-d7d3d8810cf5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da1599d9-03c1-4483-aa29-d402745c59f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21d286df-8edc-4bd5-8fe0-88a837490aac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05d892d7-63ff-4c37-a3b5-702f477a3c81",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b96918df-aabe-46ba-802e-bef448f43db7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcded30f-35c8-4609-ad96-77a64aaa70bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd3f0a24-761e-4652-ac70-6792997e2a22",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f21a5b8e-4029-4bc3-9e4f-2e911553b6bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8f1a3eb-f6a3-4ca5-869f-1c579ef2eee3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac5da63a-7043-4694-9e21-8226c3744924",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6d2c86b-f121-4464-a00e-1b34d26e6e4c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4e9c513-c5df-4487-a681-914cde4b4b90",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41735dbe-cec3-4de3-aeca-03be7c1b1ae8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c23a6b3-b367-42e7-9090-48b481baa121",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a978b56b-7903-47cf-bb3f-728b4b46eb3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3eb50e82-f042-4539-b6ed-93fa9cb5615a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9380b3f2-f92e-45f1-aa42-a2b8efdaa950",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e29d47b-d084-4c5e-bd86-789d3ae42900",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "439944a5-8e4c-4102-afed-3713bedae8de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f240941-3adc-41f5-84b7-24689f8b82c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f11ae8f4-568d-4048-b722-887321a29e48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "678b0c4c-c241-49cb-b68c-0738100f3de4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c96abf3-64e9-4629-ba9a-10a6196cb5ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67540f75-fc20-4678-a850-c647fb9843b5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72f93fe7-8d39-4f42-85ac-d587dcbd48a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5aa20c98-6236-4bf1-badd-41b1285c436c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55114ca3-a935-44b9-ac12-07338c9e7265",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 and UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41d5a13a-d174-4a65-8ca3-32b11e00ca5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 with all its UserAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1686253-ed10-41b5-bb65-e18fee46b9c8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d7ade32-5347-42b2-bfab-97612e40c22c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AccountHierarchy API Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4adf4e96-9389-4cca-a178-454b5896b3fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "081bbf4b-ec3e-4557-a9ef-2da863305e29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9893b99-2d58-426b-a7b0-49b7fabf928a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6429e88b-45dd-47a5-82f8-4bda60547e0d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2aeb39b-3e4e-447e-a40f-7209abe3981d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2446b1ac-ed58-4fc7-b51a-28fbd5fb67a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03888b3d-3c7b-442e-b3f2-3e3f5c0c5a07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3055dd97-d791-419c-aa27-2c150b5b10b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2025db81-8b1b-4d3a-b4d5-4a9edb44d946",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e686e4c-2025-432e-ab5c-a058ca8f798d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54ea86d2-13a6-4a4e-b46a-576c176fdadb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93e80d6a-a5dd-4a66-baa9-fc41ccd7bf52",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53bca9ee-7941-4e23-8c55-3ce42c576a2e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68d0e8c4-1dc4-42dd-b765-810540d65b08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c871fea-0b2c-4794-baa6-507e78eff530",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f32f5ea5-26f1-49e4-8006-be34ee20956e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17242df6-a998-4a30-8a32-e854ae6e2e4c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CRM-CUST only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2550d78e-e7f9-413b-8808-e51c0a4c758b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e1a6f8f-5787-4f6c-ab7b-89666a0ac5b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CRM_CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "197432f8-33ce-4053-bea7-7982e6172e27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"M\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CRM-CUST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3cb13c8-33ad-4205-bed1-7b36e41bcc7f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Offer templates",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fd5f5c5-e17d-4283-aa72-9c9519af4a43",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c2a1049-55a2-4049-95b6-f5dd1e39c7ba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8527a399-8d58-442d-a6d9-3ed1b54fb61a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f0a4cf3-1b3f-4978-ad20-baea8dc33ef5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5c0c5c0-3277-44ca-98c0-251b6c4e4de6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ed88a19-0dbc-4751-9e8e-57c714a41529",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fe7c03a-4cae-40da-944f-9515462f6a58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30bd4066-7e43-46d8-aa79-5bb8d0374356",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show B and C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4642ec8-31c9-4798-bf4a-5f7991fa3d00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9439ebd-ea6b-44b3-b61e-f3d19ffeb605",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "090f38cd-a5a4-423b-9af4-27c77fe8bac4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8aa9161e-d05a-4ee1-a6d8-8955633c929c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_C only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5580c6fb-1c79-42d6-bd0b-bfc1c5ff1957",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06c8f155-314d-4dc7-8143-752e9ea343f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b73701f-42f8-4337-9e4e-3bbaa4c54edd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50d44c6e-0bc2-46c0-b4dd-9a93f5770db2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cef9afd-fb86-4084-8b2d-5be5734e6242",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8adb2991-2295-4394-93e4-6d52621b59f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - show only C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48cf9329-3ca6-4832-bf87-459364df02b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(3);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - do not show C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afd0c295-2b68-47e4-883c-540b8dff35f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(2);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filters\": {\n        \"not-inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\",\n        \"like code\": \"{{entityPrefix}}_{{index}}_*\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Data",
							"item": [
								{
									"name": "Set securedEntities=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac96c84a-5228-4f16-be77-b6f490192c99",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superuser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"false\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccd478ae-913d-4548-81a4-2d344e70fec2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "968d78ea-cd7c-4bb1-95a3-7dfaff1294d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f180f9a-57fe-4d30-8939-072ecd6291c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cf832dc-37a6-4281-9bc8-878b0d9b070d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2e364a9-6fa4-4537-b55b-bac86e7b503f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "549c6ed5-784c-489c-af07-f964819835b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00e40faf-800f-4128-85aa-b37384fe90fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fda2bbd-9047-4630-874e-fa8c6aa1413e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - D",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3dd45e3-2bb7-4a64-9ca4-02d7fa9c44df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_D",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_D"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5854ad3a-e4cf-4f3c-adf7-8c1222579b2d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d754397-e4cb-45b0-a17e-b7096461a9d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_A does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a866bb02-3f78-4ce7-a372-e9dfb5fbd66b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4574dffa-f2b4-45bd-87dd-4cf0c5bcd562",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6ec2db1-1520-44d9-a426-b83cd9c77e4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_B does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21597840-ecb2-4089-8861-29029bec5231",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9dd1aff-c7a3-4e95-aa71-f7fb53ea0bbb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d0c7d5b-0e40-49e3-abe5-1b2875d23831",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b10296b-84d3-4e33-81d7-64f5edf1e714",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "121e93d4-6e8b-4385-9edb-59698eb68e48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql()",
													"    ;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level21",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2d6f4c1-067c-4505-921b-2afc7eb73b38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level22",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level22"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c20ab85d-e7e6-4d47-883c-1501b092cac7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove UserHierarchyLevel 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6924c833-09de-4c26-bc04-9ae1704dcf77",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"hierarchyLevelCode\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel/{{entityPrefix}}_{{index}}_LEVEL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel",
												"{{entityPrefix}}_{{index}}_LEVEL_1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c864b429-8bbf-4f4a-b78b-cba3b18efcd7",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 34);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "142fbc6d-e5b1-49f0-86a9-6881d5b19758",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflow executions",
					"item": [
						{
							"name": "Test data",
							"item": [
								{
									"name": "Create customer account for WF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83fe2ffe-c741-49cf-a612-8a98a393908c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"description\": \"testWF_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}@manaty.net\",\r\n        \"phone\": \"00123456789\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"mandateIdentification\": \"1234569548\",\r\n    \"mandateDate\": \"2016-03-10\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"status\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance for Action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ace5ad20-0fc1-413c-8093-a901c551a9a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.TheAction\",\r\n    \"description\": \"The Action Script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\nimport java.util.Map;\\nimport java.math.BigDecimal;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.crm.Provider;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\npublic class TheAction extends Script {  \\n  private static final Logger log = LoggerFactory.getLogger(TheAction.class);\\npublic void execute(Map<String,Object> context) throws BusinessException{\\nlog.debug(\\\"\\\\nTheAction Execution\\\\n\\\");\\ncontext.put(Script.RESULT_VALUE, \\\"A string response\\\");\\n}\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Dunning WFType Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58c053ea-93cb-4271-8a7a-a7d8168101af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"description\": \"DunningWFTypeScript\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.List;\\n\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.DunningLevelEnum;\\nimport org.meveo.service.script.wf.WFTypeScript;\\n\\n\\npublic class DunningWFTypeScript extends WFTypeScript<CustomerAccount>{\\n\\n  public DunningWFTypeScript() {    \\n  }\\n  \\n  public DunningWFTypeScript(CustomerAccount e) {\\n    super(e);\\n  }\\n  @Override\\n  public List<String> getStatusList() {    \\n    List<String> values = new ArrayList<String>();\\n    for (DunningLevelEnum dunningLevelEnum : DunningLevelEnum.values()) {\\n      values.add(dunningLevelEnum.name());\\n    }\\n    return values;\\n  }\\n\\n  @Override\\n  public void changeStatus(String newStatus) {\\n    entity.setDunningLevel(DunningLevelEnum.valueOf(newStatus));\\n    entity.setDateDunningLevel(new Date());\\n  }\\n\\n  @Override\\n  public String getActualStatus() {    \\n    return entity.getDunningLevel().name();\\n  }\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with natif WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93532c72-d595-4c8a-b3e1-d23e5b5f74ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningWorkflow\",\r\n    \"description\": \"Dunning workflow from class\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.admin.wf.types.DunningWF\",\r\n    \"initStatus\": \"R0\",\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R0\",\r\n            \"toStatus\": \"R1\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R1\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with runTime WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74d5507f-f4a7-4193-a869-5e2bf2960882",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningRunTimeWF\",\r\n    \"description\": \"Dunning workflow from script\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"initStatus\": \"R0\",\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R1\",\r\n            \"toStatus\": \"R2\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R2\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "find & execute",
							"item": [
								{
									"name": "find workflow by entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bee9314d-f1a0-4c8b-8f49-285e44751f84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/findByEntity?baseEntityName=org.meveo.model.payments.CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"findByEntity"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - NatitType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "595ee82d-767b-4e9b-a2b6-88459a2edf59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"baseEntityName\": \"org.meveo.model.payments.CustomerAccount\",\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"workflowCode\": \"{{baseEntityPrefix}}_DunningWorkflow\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningWorkflow",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "{{entityPrefix}}_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{baseEntityPrefix}}_DunningWorkflow"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - scriptType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "141476f6-d575-4f42-8726-dd0f75dc91ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"baseEntityName\": \"org.meveo.model.payments.CustomerAccount\",\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"workflowCode\": \"{{baseEntityPrefix}}_DunningRunTimeWF\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningRunTimeWF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "{{entityPrefix}}_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{baseEntityPrefix}}_DunningRunTimeWF"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wf history",
							"item": [
								{
									"name": "findHistory-no criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae41f9ea-ebab-4706-9a51-d43589d5587b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											]
										}
									},
									"response": []
								},
								{
									"name": "findHistory-with criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ff118df-1366-4460-b14a-5cd6e039f272",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"fromStatus\": \"R1\",\r\n    \"toStatus\": \"R2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode=RS_FULL_{{index}}_WF_CA&fromStatus=R1&toStatus=R2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											],
											"query": [
												{
													"key": "entityInstanceCode",
													"value": "RS_FULL_{{index}}_WF_CA"
												},
												{
													"key": "fromStatus",
													"value": "R1"
												},
												{
													"key": "toStatus",
													"value": "R2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b56ed85-a356-4ac6-a049-0f1f79e523aa",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 453);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a641707-54ba-410a-ab3f-f7fe22baeb60",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter search and invoicing",
					"item": [
						{
							"name": "Data model",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea1d6588-f298-4187-9636-640ef4a4793f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-02-01\",\n    \"endAgreementDate\": \"2017-02-01\"\n  }\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "451c02af-1bb4-49ff-a3ce-3be521fed3dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-02-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create RatedTransactions Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8334e118-d0b1-4af8-97d9-54114ca6a781",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\",\n    \"description\": \"Rated transactions for invoicing test\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n    <primarySelector>\\n    <targetEntity>org.meveo.model.billing.RatedTransaction</targetEntity>\\n    <alias>r</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>description</field>\\n      <field>usageDate</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                  <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>usageDate</fieldName>\\n                    <operator><![CDATA[<=]]></operator>\\n                    <operand>date:01/05/2016</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>code</fieldName>\\n                    <operator>=</operator>\\n                    <operand>{{baseEntityPrefix}}_REC1</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n</filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rated Transaction Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c3c44f2-b893-4ffc-bf0a-c03067d1ab2e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search from filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9affeeb8-161c-41dc-a465-1f1db3913d83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Body matches string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"<code>\"+pm.environment.get(\"baseEntityPrefix\")+\"_OS1</code>\");",
													"    pm.expect(pm.response.text()).to.include(\"<code>\"+pm.environment.get(\"baseEntityPrefix\")+\"_REC1</code>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7654fe4b-5636-48ef-bec2-fd8c0d32b619",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 456);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "05e00404-bdf4-4737-9ef0-5f16dd27f1eb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Inbound Request Tests",
					"item": [
						{
							"name": "Inbound 1",
							"item": [
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe6fdaea-9aad-4719-8012-d63265832ee7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.inbound.InboundServletScript\",\n    \"description\": \"InboundServletScript\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.inbound;\\n\\nimport java.math.BigDecimal;\\nimport java.util.Map;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.billing.WalletOperation;\\nimport org.meveo.service.script.Script;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport org.meveo.model.notification.InboundRequest;\\n\\npublic class InboundServletScript extends Script {\\n\\n    private static final Logger log = LoggerFactory.getLogger(InboundServletScript.class);\\n\\n    public void execute(Map<String, Object> context) throws BusinessException {\\n        log.debug(\\\"InboundServlet script...\\\");\\n      \\n        InboundRequest inboundRequest = (InboundRequest) context.get(\\\"event\\\");\\n        inboundRequest.getHeaders().put(\\\"INBOUND_SCRIPT_VAR\\\", \\\"InboundServletScript\\\");\\n\\n    inboundRequest.setResponseBody(\\\"API test\\\");\\n\\n        if (inboundRequest.getParameters()!=null && inboundRequest.getParameters().get(\\\"returnStatus\\\")!=null){\\n            inboundRequest.setResponseStatus(Integer.parseInt(inboundRequest.getParameters().get(\\\"returnStatus\\\")));\\n        }\\n    }\\n}\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37627e2c-79db-49c3-9bc0-51618b409dc1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"INBOUND_SERVLET_NOTIF\",\n    \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\n    \"eventTypeFilter\": \"INBOUND_REQ\",\n    \"scriptInstanceCode\": \"org.meveo.service.script.inbound.InboundServletScript\",\n    \"elFilter\": \"#{event.parameters!=null and !event.parameters.containsKey('doNotFire')}\",\n    \"scriptParams\": {\n        \"event\": \"#{event}\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fired=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "321014c1-2095-4d5a-a877-d904317a9a17",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Fired - change return status to 230",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0837ff1a-243a-44c6-b396-30bd7698b444",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Fired=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a7fb544-14bd-43aa-911d-244811c91660",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "List notification history",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77349869-92bd-416d-af3b-52f9e5bb33f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"/*",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.notification).to.deep.equal(jsonBody.notification);",
													"    pm.expect(jsonData.entityClassName).to.deep.equal(jsonBody.entityClassName);",
													"    pm.expect(jsonData.nbRetry).to.deep.equal(jsonBody.nbRetry);",
													"}); */"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"notification\": \"INBOUND_SERVLET_NOTIF\",\n    \"entityClassName\": \"org.meveo.model.notification.InboundRequest\",\n    \"nbRetry\": \"0\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/listNotificationHistory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"listNotificationHistory"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "What is this for and what API is it using?",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f21b10d8-3af5-4925-9ef4-80d86716ffba",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 377);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d2bb06e-95d9-44b1-85cf-8654fd9729fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Jobs",
					"item": [
						{
							"name": "Job Reporting",
							"item": [
								{
									"name": "Execute 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b77b6e7-7535-4c13-854f-6f4fda0807ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"job_id\", jsonData.actionStatus.message);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83c52ddd-910c-4769-889f-521ab8bd5ade",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fa46a57-9b22-4d4c-971c-a3bbdaba005f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?code=M_Job",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "code",
													"value": "M_Job"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e83157e-8980-4b4e-9510-1641f73c33ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"    pm.expect(jsonData.jobExecutionResultDto.id).to.deep.equal(jsonBody.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": {{job_id}},\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?id={{job_id}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "id",
													"value": "{{job_id}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reporting",
					"item": [
						{
							"name": "ReportExtract",
							"item": [
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70e39b17-091f-47e1-9fc7-fac57af46220",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.finance;\\n\\nimport java.io.File;\\nimport java.io.FileWriter;\\nimport java.text.DateFormat;\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\nimport java.util.Map;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.payments.AccountOperation;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.RecordedInvoice;\\nimport org.meveo.service.payments.impl.AccountOperationService;\\nimport org.meveo.service.script.Script;\\nimport org.meveo.service.script.finance.ReportExtractScript;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport java.util.Date;\\n\\npublic class {{entityPrefix}}_{{index}}_RE_SCRIPT_1 extends ReportExtractScript {\\n\\n    private static final Logger LOGGER = LoggerFactory.getLogger({{entityPrefix}}_{{index}}_RE_SCRIPT_1.class);\\n\\n    private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(AccountOperationService.class.getSimpleName());\\n\\n\\n    @Override\\n    public void execute(Map<String, Object> initContext) throws BusinessException {\\n        try {\\n            LOGGER.debug(\\\"#####################Starting of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n    \\n            // Get transaction start and end date\\n            Date startDate = (Date) initContext.get(ReportExtractScript.START_DATE);    \\n            Date endDate = (Date) initContext.get(ReportExtractScript.END_DATE);\\n            DateFormat df = new SimpleDateFormat(\\\"yyyy-MM-dd\\\");\\n             \\n            List<AccountOperation> accountOperations = accountOperationService.list();\\n            //create export file\\n            String exportDir = String.valueOf(initContext.get(ReportExtractScript.DIR));\\n            File dir = new File(exportDir);\\n            if (!dir.exists()) {\\n                dir.mkdirs();\\n            }\\n            CustomerAccount customerAccount = null;\\n            StringBuilder sb =new StringBuilder();\\n            sb.append(\\\"Transaction Date;Transaction Type;Amount;Due Date;Reference;Transaction Category;Invoice Date;\\\"\\n                    + \\\"Customer Account Code;Customer Account Description\\\\n\\\");\\n            for (AccountOperation accountOperation : accountOperations) { \\n                if(accountOperation.getTransactionDate().equals(startDate) || accountOperation.getTransactionDate().equals(endDate)\\n                        || (accountOperation.getTransactionDate().after(startDate) && accountOperation.getTransactionDate().before(endDate))) {\\n                    \\n                    customerAccount = accountOperation.getCustomerAccount();\\n                    sb.append(nil(accountOperation.getTransactionDate().toString())+ \\\";\\\");\\n                    sb.append(nil(accountOperation.getType()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getAmount().toString()) + \\\";\\\");\\n                    sb.append(isNull(accountOperation.getDueDate()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getReference()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getTransactionCategory().toString()) + \\\";\\\");\\n                    if(accountOperation instanceof RecordedInvoice) {\\n                        RecordedInvoice invoice = (RecordedInvoice) accountOperation;\\n                        sb.append(invoice.getInvoiceDate().toString() + \\\";\\\");\\n                    } else {\\n                        sb.append(\\\";\\\");\\n                    }\\n                    sb.append(nil(customerAccount.getCode()) + \\\";\\\");\\n                    sb.append(nil(customerAccount.getDescriptionOrCode()) + \\\";\\\\n\\\");\\n\\n                    \\n                }\\n            }\\n              String strFilename = String.valueOf(initContext.get({{entityPrefix}}_{{index}}_RE_SCRIPT_1.FILENAME));\\n              LOGGER.debug(\\\"output={}\\\", strFilename);\\n            File file = new File(dir + File.separator + strFilename);\\n            file.createNewFile();\\n            FileWriter fileWriter = new FileWriter(file);\\n            fileWriter.write(sb.toString());\\n            fileWriter.close();\\n            \\n            LOGGER.debug(\\\"#####################Ending of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n        } catch (Exception e) {\\n            LOGGER.error(\\\"Exception:\\\", e);\\n            throw new BusinessException(e.getMessage());\\n        }\\n        \\n    }\\n  \\n  private String isNull(Object obj) {\\n    if(obj == null) {\\n      return \\\"\\\";\\n    } else {\\n      return obj.toString();\\n    }\\n  }\\n  \\n    private String nil(String word) {\\n        if (word == null || \\\"null\\\".equalsIgnoreCase(word)) {\\n            return \\\"\\\";\\n        } else {\\n            return word;\\n        }\\n    }\\n}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "060a995e-8d4b-4ac0-b2c2-1229c3efa526",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"scriptType\": \"SQL\",\n    \"filenameFormat\": \"#{re.category}_accounts-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"sqlQuery\": \"select code, description from ${dbSchema}account_entity where :START_DATE<>:END_DATE\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66800f81-c5fb-4964-9708-5f8c4dd7f176",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"scriptType\": \"JAVA\",\n    \"filenameFormat\": \"accounts-ops-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"scriptInstanceCode\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "601fd5df-ff9f-42f0-9e2e-4df1cb5127d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/run",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"run"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80b0d1d9-eb54-49dd-83a3-061450283c64",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/run",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"run"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - SQL 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a37a4f71-e344-4b08-b361-162ddc1dd68d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - JAVA 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ca8a372-9b43-4097-8cb5-d7ac8adf3731",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eceae096-132c-49be-972a-0a0965a0a554",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_RE_SQL_1",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a0b3fc1-0396-4bbe-be64-9db2565755d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_RE_JAVA_1",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "499d6342-3316-458c-9e85-41fb76f53cd7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_SQL_1 does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "856ec9a1-4de8-4eae-be0e-a7d2f05edb36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_JAVA_1 does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a886866c-d5b3-40cd-9aa3-902e1f56f3ba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RE_Job\",\n    \"jobTemplate\": \"ReportExtractJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\",\n    \"limitToSingleNode\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7265972a-3be2-477b-9f03-aeadeecffe40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RE_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a7f50ad-b88a-454b-a027-9db71f78cf3f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51e99b94-a6c3-4e75-b096-f16dabbc3544",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 339);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb60dd34-c597-41d4-bf12-d32d10f97da1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GDPR Erasure",
					"item": [
						{
							"name": "Account operations",
							"item": [
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0eb6687-81f2-450f-8896-6300e7ecb93f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR AO {{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ccda44e-16d8-4005-b068-01e879a8aa24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"crmAccountType\": \"C_UA\",\n    \"crmParentCode\": \"SELLER_FR\",\n    \"code\": \"GDPR_{{index}}\",\n    \"description\": \"Name\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"14 rue Crespin du Gast\",\n        \"zipCode\": \"75011\",\n        \"city\": \"PARIS\",\n        \"state\": \"Paris Area\",\n        \"country\": \"FR\"\n    },\n    \"email\": \"edward.legaspi@opencellsoft.com\",\n    \"language\": \"FRA\",\n    \"customerCategory\": \"CLIENT\",\n    \"customerBrand\": \"DEFAULT\",\n    \"currency\": \"EUR\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"country\": \"FR\",\n    \"electronicBilling\": \"true\",\n    \"contactInformation\": {\n        \"email\": \"edward.legaspi@opencellsoft.com\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f477ee7-ffdd-4a52-aa46-5ae2fc2f6187",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e22c5d3-e5c8-43c1-8064-503a794f3600",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e13187c2-a2f2-4d73-a1b7-a9f16137ee07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Previous Invoice old",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "232b35fc-bcb2-442f-9c03-8061b6380260",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2007-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Payment for Invoice old",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea82c317-26d0-4e5d-863c-c70317f63be6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2007-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47c9c800-dfa5-4315-af03-4986a341cbb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e42f1eca-fb36-4afb-8683-c15807087d5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2017-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb1e3fcd-4b89-4670-9fc9-1a93e3889d6b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Previous Invoice new",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f80cf782-f00e-4a1f-854b-ed54c15071cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2017-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Payment for Invoice new",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93d657b2-3088-402a-85f2-2f80941fe229",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2017-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2017-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2017-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Undue payment 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f51c20bb-52b0-4432-98f6-d546c5c292bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"undueRefundId\", jsonData.message);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-09-30\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-09-30\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Refund 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22c9be7f-e6b7-4aa7-b72a-41e68720be61",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"unduePaymentId\", jsonData.message);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Refund undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-31\",\n    \"transactionCategory\": \"DEBIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-31\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Match Undue payment and Refund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08df0a71-ebdb-4c39-a27c-ce660791596f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccountCode\": \"GDPR_{{index}}\",\n    \"accountOperations\": {\n        \"accountOperation\": [\n            {\n                \"id\": {{unduePaymentId}}\n            },\n            {\n                \"id\": {{undueRefundId}}\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation/matchOperations",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation",
												"matchOperations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription",
							"item": [
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84124842-cd87-4027-b8d4-16a2d24ac03d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Active sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "293f5d42-5803-4ea8-aedd-927682dc6910",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "059969d5-c27d-4799-b2d7-199d5f45dc74",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspended sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9564b1d9-53d2-486d-90f0-3a5efd8579f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access to suspended sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bd4e27c-7d48-4686-a7e0-f2c8018eddd0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED_ACCESS\",\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3427fec-b093-494a-a477-1126106f28a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"actionDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/suspend",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"suspend"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resiliated sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdcac0f1-7156-4b7a-9288-d91ecce04728",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service - Resiliated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ae29889-b8cb-4abd-a6e1-ca13789538b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resiliate sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cea539fa-4695-43a0-ae61-ca6432181438",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"terminationReason\": \"TERM_REASON_3\",\n    \"terminationDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Order",
							"item": [
								{
									"name": "Create old order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de8f1ec3-99af-4c86-a5e7-7be35c97f8d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2007-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_OLD\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2007-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/productOrder",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"productOrder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2696a7c-db53-49cb-82c1-3f90b258db32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2018-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_NEW\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2018-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/productOrder",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"productOrder"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice",
							"item": [
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93ab5184-2572-4340-8819-840978367597",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR_{{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create InvoiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15c6cbff-a5f8-45ec-b4cf-f07b1797b137",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"9\",\n        \"currentInvoiceNb\": \"5000\"\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"useSelfSequence\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91b8f5f5-0052-4918-87d6-d9dddbd1ab14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address2\": \"address2\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"country\": \"FR\",\n    \"language\": \"FRA\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7161a21-f324-492f-9c07-675c0073c481",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "176176ab-4625-4639-b029-fd5241fb5ac3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2018-08-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply one shot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f528fea-3e80-4480-8712-b7920c0f0d26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS_OTHER\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"operationDate\": \"2018-08-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c5ed6e2-3af0-4a6b-908b-c3696c998096",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13f0520c-ca4e-45be-a77d-da5c3ec998a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"billingRunId\", jsonData.message);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billingCycleCode\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"billingRunTypeEnum\": \"AUTOMATIC\",\n    \"lastTransactionDate\": \"2018-08-31\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/invoicing/createBillingRun",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"invoicing",
												"createBillingRun"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invoicing Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16c7b27b-ad3b-49fe-933b-330d3000e979",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"Inv_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate BR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc48cec5-5de6-4ae1-b3ff-bfe904637889",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:validateBillingRun\": { \"billingRunId\": \"1\" }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4d21939-6257-481e-90d0-29299834ad66",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"invoiceType\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"billingAccountCode\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"dueDate\": \"2007-10-13\",\n    \"invoiceDate\": \"2007-10-13\",\n    \"invoiceMode\": \"AGGREGATED\",\n    \"categoryInvoiceAgregate\": [\n        {\n            \"categoryInvoiceCode\": \"SUBSCRIPTION\",\n            \"description\": \"SUBSCRIPTION\",\n            \"subCategoryInvoiceAgregateDto\": [\n                {\n                    \"description\": \"SUB_DATA\",\n                    \"invoiceSubCategoryCode\": \"SUB_DATA\",\n                    \"amountWithoutTax\": \"100\",\n                    \"amountTax\": \"20\",\n                    \"amountWithTax\": \"120\",\n                    \"ratedTransaction\": [\n                        {\n                            \"code\": \"WS_BASE_OS_OTHER\",\n                            \"unitAmountWithoutTax\": \"100\",\n                            \"amountWithoutTax\": \"100\",\n                            \"quantity\": \"1\",\n                            \"description\": \"API\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GDPR",
							"item": [
								{
									"name": "Create GDPR Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fac7973-7688-4fe7-9d5c-11d1f9afdf0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobTemplate\": \"GDPRJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run GDPR Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5f0ccda-5c64-459c-81d6-3f355821bfc5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"GDPR_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Remove base data",
					"item": [
						{
							"name": "Remove Administration",
							"item": [
								{
									"name": "find BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e084765a-cf5d-44f4-8b65-b4f6f9b01669",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.chartDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_BC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_BC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_BC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2973fb47-7552-40c4-bdf9-4918c626b23a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.chartDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_PC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_PC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_PC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13d178bd-0ccb-41cf-9885-3cc87566be53",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.chartDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_LC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_LC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_LC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06ce4a93-4a21-4cff-8ac9-a32d3f6b49c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scriptInstance.code).to.eql(\"org.meveo.service.script.\"+pm.environment.get(\"baseEntityPrefix\")+\"_Script\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance?scriptInstanceCode=org.meveo.service.script.{{baseEntityPrefix}}_Script",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance"
											],
											"query": [
												{
													"key": "scriptInstanceCode",
													"value": "org.meveo.service.script.{{baseEntityPrefix}}_Script"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40085c9d-3881-4d47-9422-95007bc40009",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_Notification1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification?notificationCode={{baseEntityPrefix}}_Notification1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification"
											],
											"query": [
												{
													"key": "notificationCode",
													"value": "{{baseEntityPrefix}}_Notification1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find WebHookNotification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ddfc00b-6269-41a8-a935-4bc4c225b71d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.webhookDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_WebHook1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook?notificationCode={{baseEntityPrefix}}_WebHook1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook"
											],
											"query": [
												{
													"key": "notificationCode",
													"value": "{{baseEntityPrefix}}_WebHook1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17bc4b48-6be0-4fb1-8bb1-244f11e664e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.emailNotificationDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_EmailNotif1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findEmailNotification\": {\n        \"notificationCode\": \"{{baseEntityPrefix}}_EmailNotif1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email?notificationCode={{baseEntityPrefix}}_EmailNotif1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email"
											],
											"query": [
												{
													"key": "notificationCode",
													"value": "{{baseEntityPrefix}}_EmailNotif1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87d1c3a6-4c60-4856-971a-b01478ce9dd5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.timerEntity.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_Timer1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/timer?timerCode={{baseEntityPrefix}}_Timer1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"timer"
											],
											"query": [
												{
													"key": "timerCode",
													"value": "{{baseEntityPrefix}}_Timer1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1856cde-b645-4d5f-96ad-d5b67acbbc06",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_ImpExp-Job1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findJobInstance\": {\n        \"jobInstanceCode\": \"{{baseEntityPrefix}}_ImpExp-Job1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{baseEntityPrefix}}_ImpExp-Job1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{baseEntityPrefix}}_ImpExp-Job1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11ef98b3-fc7a-487a-96a4-126e9eb73706",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_BC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_BC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abf36d60-1a14-4351-80a7-90af7c9c3ec5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_PC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_PC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "032b8a15-7ed9-4c34-92b2-68bc85f5a0cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_LC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_LC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e40cc32-245b-4fba-a971-9b28e23d8e15",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/{{baseEntityPrefix}}_Notification1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"{{baseEntityPrefix}}_Notification1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove WebHookNotification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bec6547-a4c6-4a75-96c4-cc46cb2656ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook/{{baseEntityPrefix}}_WebHook1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook",
												"{{baseEntityPrefix}}_WebHook1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c573d2f-6ed3-4b85-b8bc-28007ea89ae7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email/{{baseEntityPrefix}}_EmailNotif1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email",
												"{{baseEntityPrefix}}_EmailNotif1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bde07ff2-f243-4315-90cb-bc1c90234859",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{baseEntityPrefix}}_ImpExp-Job1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{baseEntityPrefix}}_ImpExp-Job1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31d5c2d3-d2d4-4973-8da3-edd128499be0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeTimer\": {\n        \"timerCode\": \"{{baseEntityPrefix}}_Timer1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/timer/{{baseEntityPrefix}}_Timer1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"timer",
												"{{baseEntityPrefix}}_Timer1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove Catalog",
							"item": [
								{
									"name": "findRecurringChargeTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e2444ed-dcaf-4483-a688-4a2620ec22cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_REC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{baseEntityPrefix}}_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_REC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find RecurringCHargeTemplate with Calendar",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4d2a5f2-85a0-49c4-9ed1-a74aa303ba08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_REC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{baseEntityPrefix}}_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_REC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findOneShotChargeTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b54e5fab-cc2f-4bfa-8fab-0746d4feca25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oneShotChargeTemplate.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_OS1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate?oneShotChargeTemplateCode={{baseEntityPrefix}}_OS1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate"
											],
											"query": [
												{
													"key": "oneShotChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_OS1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findUsageChargeTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7fb4984-8b7b-44ee-91f5-56363b617e84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.usageChargeTemplate.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_USAGE1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findOneShotChargeTemplate\": {\n        \"oneShotChargeTemplateCode\": \"{{baseEntityPrefix}}_OS1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate?usageChargeTemplateCode={{baseEntityPrefix}}_USAGE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate"
											],
											"query": [
												{
													"key": "usageChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_USAGE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findServiceTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f30dddf8-4c68-45b7-83c2-133dbedb1381",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findServiceTemplate\": {\n        \"serviceTemplateCode\": \"{{baseEntityPrefix}}_SERVICE1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findOfferTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86dd5f61-ae00-4d46-aa17-bb60f5f6d31f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_OFFER1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findPricePlanRec",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fd7b47-721b-4fe1-9d0c-f61880c50166",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_REC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{baseEntityPrefix}}_REC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findPricePlanOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da56b9d5-dd30-486d-8f58-f44c3e0b5031",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_OS1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findPricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_OS1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_OS1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{baseEntityPrefix}}_OS1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findPricePlanUC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfd86190-e565-454b-b550-dd78be70005b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_USAGE1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_USAGE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{baseEntityPrefix}}_USAGE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "removeRecurringChargeTemplate 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adc7c049-3d8b-436b-b7a0-68fa838c26fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{baseEntityPrefix}}_REC2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{baseEntityPrefix}}_REC2"
											]
										}
									},
									"response": []
								},
								{
									"name": "removeOneShotChargeTemplate 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dab5ce5-1405-4329-99e2-b7f5a59fefb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/{{baseEntityPrefix}}_OS2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"{{baseEntityPrefix}}_OS2"
											]
										}
									},
									"response": []
								},
								{
									"name": "removeUsageChargeTemplate 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdcd7460-2b27-401d-b1d7-3b1b3eff7293",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/{{baseEntityPrefix}}_USAGE2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"{{baseEntityPrefix}}_USAGE2"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove Customer accounts, subsription, access",
							"item": [
								{
									"name": "find Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fe30313-9ee7-4c76-bab0-c3ae761df70a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_CUST\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{baseEntityPrefix}}_CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{baseEntityPrefix}}_CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find CustomerAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d85b5687-4f5a-4a3c-9ec5-16bfacefaf40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_CA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{baseEntityPrefix}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{baseEntityPrefix}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find BillingAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89b3285c-ec6d-4a1b-8b60-ab5884508f91",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_BA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{baseEntityPrefix}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{baseEntityPrefix}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find UserAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a469a2b-ea8a-4c47-be61-dabc08b705fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_UA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findUserAccount\": {\n        \"userAccountCode\": \"{{baseEntityPrefix}}_UA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{baseEntityPrefix}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{baseEntityPrefix}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ccd4ace-ca73-4881-97b9-ee8c7ed80767",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SUB\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{baseEntityPrefix}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32dcd854-2453-418a-b51c-dd8861968cf8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accessDto.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_ACCP\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n}\n{\n    \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access?accessCode={{baseEntityPrefix}}_ACCP&subscriptionCode={{baseEntityPrefix}}_SUB&startDate=2016-06-01&endDate=2016-06-30",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access"
											],
											"query": [
												{
													"key": "accessCode",
													"value": "{{baseEntityPrefix}}_ACCP"
												},
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												},
												{
													"key": "startDate",
													"value": "2016-06-01"
												},
												{
													"key": "endDate",
													"value": "2016-06-30"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06b2f2d9-1709-4c7b-a1ac-790376fc751b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeAccess\": {\n        \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n        \"subscriptionCode\": \"{{baseEntityPrefix}}_SUB\",\n        \"startDate\": \"2016-06-01\",\n        \"endDate\": \"2016-06-30\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/{{baseEntityPrefix}}_ACCP/{{baseEntityPrefix}}_SUB/2016-06-01/2016-06-30",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"{{baseEntityPrefix}}_ACCP",
												"{{baseEntityPrefix}}_SUB",
												"2016-06-01",
												"2016-06-30"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove Script BOM, BSM, BAM",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Banking Calendar and Date status",
					"item": [
						{
							"name": "Create 2017 Banking Calendar",
							"item": [
								{
									"name": "Create 2017 Banking Calendar with All Vals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6acd4ec3-8c65-4cc3-a8de-fff536431da1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"FR_2017_BANKING_CALENDAR\",\n    \"description\": \"France Banking Calendar for 2017\",\n    \"calendarType\": \"BANKING\",\n    \"startDate\": \"2017-01-01\",\n    \"endDate\": \"2017-12-31\",\n    \"weekendBegin\": \"6\",\n    \"weekendEnd\": \"7\",\n    \"holidays\": [\n        {\n            \"holidayBegin\": \"101\",\n            \"holidayEnd\": \"101\"\n        },\n        {\n            \"holidayBegin\": \"414\",\n            \"holidayEnd\": \"414\"\n        },\n        {\n            \"holidayBegin\": \"417\",\n            \"holidayEnd\": \"417\"\n        },\n        {\n            \"holidayBegin\": \"501\",\n            \"holidayEnd\": \"501\"\n        },\n        {\n            \"holidayBegin\": \"1225\",\n            \"holidayEnd\": \"1226\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Date status",
							"item": [
								{
									"name": "Saturday Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc5ea17a-1f24-4d04-bcaa-1d34d49b9dc1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.eql(1483747200000);",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-07",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-07"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sunday Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "277d54ef-1321-4a7a-a454-2a2f8eecc2c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.eql(1483833600000);",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-08",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-08"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Monday Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f143cd33-540c-43a5-be82-cd1bd3b6f0b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.eql(1483920000000);",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-09",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-09"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Year's Day Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b23ba1e0-ed6f-4294-a065-e66888a34399",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.eql(1483228800000);",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Labor Day Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df91955d-43b8-4390-a8b9-d68b37cc16a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.eql(1493596800000);",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-05-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-05-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Simple Working Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95e66895-770f-4118-bfc5-43f926bd6470",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.eql(1487030400000);",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:getBankingDateStatus\": { \"date\": \"2017-02-14\" }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-02-14",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-02-14"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# FullCRUD\r\n\r\nHere are migrated scenarios from Soap FullCRUD.\r\n\r\n## Table\r\n\r\n| Scenarios                        | State       |\r\n|----------------------------------|-------------|\r\n| Setup base data                  | OK          |\r\n| Service workflow                 | OK          |\r\n| Subscription workflow            | OK          |\r\n| Subscription with Inherited CF   | OK          |\r\n| EL expression tests              | OK          |\r\n| Custom Fields in Filters         | todo        |\r\n| Entity Customization             | OK          |\r\n| Entity Security                  | OK          |\r\n| Workflow executions              | OK          |\r\n| Filter search and invoicing      | todo        |\r\n| Inbound Request Tests            | todo        |\r\n| Jobs                             | todo        |\r\n| Reporting                        | todo        |\r\n| GDPR Erasure                     | todo        |\r\n| Remove base data                 | todo        |\r\n| Banking Calendar and Date status | todo        |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4477adf0-edc6-4287-820d-bc2d1f47dc09",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e1b9c43f-13ef-4c4e-a173-00f95bfbecc8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
{
	"info": {
		"_postman_id": "cd596341-def7-4337-a2bc-7174ee107e2f",
		"name": "Opencell",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API",
			"item": [
				{
					"name": "Accounting",
					"item": [
						{
							"name": "Account Code",
							"item": [
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f66dd97-b384-4bde-b1bc-8816638a02ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "827d55ff-0eb3-4c9d-9d8f-4f415de6edeb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.environment.get(\"testCode\"));",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Accounting Code ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74c31550-d47e-4099-b778-9946acb39f5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"AccountingCode with code=\"+pm.environment.get(\"testCode\")+\" already exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7728931-990a-4253-83e4-a3f08a32c0a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"chartOfAccountTypeEnum\": \"ASSETS\",\r\n    \"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81a197e1-13af-49a2-9513-925b9eccdb9a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fe71565-d0e0-444e-b9e8-28bad08826a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c6888eb-9385-47d1-b0da-7851cfe2c02b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.environment.get(\"testCode\"));",
													"});",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.environment.get(\"testDescription\")+ \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4080d93f-e713-4f1d-9d61-6e09ede6aa7f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61d1591c-ba6d-4058-85be-4eddd977d6a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.ChartOfAccountViewTypeEnum`\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "OCC Template",
							"item": [
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf74ea3a-04b2-4eb2-a1f2-bc75291a29f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OCC Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9503baf5-cb36-4148-a771-e2835972d32a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"OCCTemplate with code=\"+pm.environment.get(\"testCode\")+\" already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11e335e1-f97a-4b04-b44e-78a14f8d4740",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d5a25e-21ce-4e58-80fe-f8df14b49162",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49fa1749-9671-483f-a7bf-2ee70d405560",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32a83e70-a649-496f-8f82-e93d4c6db3d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: accountCode / accountingCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_Missing\",\r\n  \"description\": \"{{testDescription}} missing\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be608007-76ab-4adc-80f7-e296337500b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.OperationCategoryEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Accounting Code GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c35eb0c-aa83-43d5-b5a7-9ae68f93a846",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"is still referenced from table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "913e8219-13c8-4e2f-ac01-f896194f2234",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fdd85f6-98a8-42f1-b245-d57529df4f8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"OCCTemplate with code=\"+pm.environment.get(\"testCode\")+\" does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c6189da-68af-46ba-905c-1dce0ff20e0a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa947154-110e-42be-9cee-b4ac0ac8c7fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"AccountingCode with code=\"+pm.environment.get(\"testCode\")+\" does not exists.\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "BillingCycle",
							"item": [
								{
									"name": "CreateOrUpdate Billing Cylcle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acf6093f-582f-43f1-a264-cf38d85d10e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c64739f-cccb-443b-b254-fd4e02166721",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"BillingCycle with code=\"+pm.environment.get(\"testCode\")+\"_BC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72ba9bd2-a053-4b4e-8d75-41e534da0560",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.environment.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41554211-98b4-4265-8073-317b97367acb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"BillingCycle with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BtN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43cb961c-efb4-4481-b7f6-5d0ac122d6db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31a0d865-856d-45fd-855b-7f2dd3a3873e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4fd0339-6600-46b7-aaec-4618e136e9a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.environment.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03c4f392-a959-499f-a58d-df9fe8b7d58c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: invoiceDateDelay.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"MISSING\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"MONTHLY\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc10b4e7-a795-47b4-b621-6c53764a7349",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"NOT_EXIST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller",
							"item": [
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "067984a1-9d2b-4261-aa37-f268e4f9d721",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ed61a7d-0b21-4a19-8a2e-caa65cbf6afe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=\"+pm.environment.get(\"testCode\")+\"_SELLER already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f4efcdb-a65c-488b-9363-549c3f55ee59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.environment.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c37805f-16e7-4956-900f-579c1f232bcd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf827fd8-d2bf-472d-82c3-4074f731ccb3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d902d502-ec8a-49e7-ad42-88c925fe7eea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9ccc205-66af-4a8a-a833-b368307a583b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.environment.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5aeefab7-62b9-49e6-a9b0-5b81bac72104",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerBrand",
							"item": [
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "feeb2b05-328b-4ef0-8ad2-2eae453a983c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerBrand ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8d2e30e-1b4c-4770-b209-858d8b802e3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b7805e7-c80e-41b9-8434-1f8bf56e0b92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16f12877-1d7f-4c52-8db4-ca83d69a7573",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6339d597-f5a1-4ac1-b9da-c51648e5f061",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fece965-243d-4ee1-adbd-e98c11054dff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Category",
							"item": [
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e5979da-8827-46cc-add2-4aff67d81fff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a382e3c-5dee-41ae-97ae-ab31e1e72a54",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3e795e9-4391-480c-9c49-b9a29b5cb03a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerCategory with code=\"+pm.environment.get(\"testCode\")+\"_CC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53fb84a1-169a-452a-b63d-8f00ffbb0a32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2272dab2-a831-46c2-9719-2943b4466db0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd6502dd-3b7e-419e-aef6-f979300d5475",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73624ced-fbc9-4359-8c4d-373465cbcc64",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44197965-4d84-4b08-9c77-0fc691075b3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testCode}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "263ea99e-13a3-47c5-961d-a87f44925ef1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\",\r\n    \"accountingCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "537ae62c-f12a-4545-a9cb-8394b9568f84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"INVALID\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer",
							"item": [
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c86059c9-da72-430b-9653-5977da478b9c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b318f403-988e-40db-9db2-0ca5c50694ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d9d1771-40cd-4208-895f-6860c292ef0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_C already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c804c6f-a9c4-4320-b79b-e59a639c436e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72215990-faff-47b3-82e6-c3fd4869f659",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9ead557-0dff-41e4-82b4-1c036eacb97d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d50ac1a1-f17c-4eb4-b2a7-d38e62117f0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f11cb2b8-a8c1-4316-adc0-2ffd2aef1792",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: customerCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ad8c586-27f1-4227-b4ec-8b9a9761dc55",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateDate\": \"INVALID\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e05ef72b-830b-4f68-83df-4ec82ada329a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"NOT_EXIST\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3be05ff-b96e-4df9-a45d-47abb7c34a00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"NOT_EXIST\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "062f0c1a-48cc-4fbd-b98b-bc360b073e19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"NOT_EXIST\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerAccount",
							"item": [
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b172f51-b801-424e-aa95-726cc34ab68c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ce8a40e-d462-45b0-9cd8-74ac9ec065eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8066a9d3-26a2-40ec-ae29-d325500c0064",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerAccount with code=\"+pm.environment.get(\"testCode\")+\"_CA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8e588b1-34ff-4f88-88c1-67e5ec22c046",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9630361-4104-4f20-85b2-c8050ea496ad",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a95937c-fe8c-49f1-bd6b-60d0372c4668",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ddd6668-e004-4de4-a05b-a0f8bf521fcb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef45f8a5-04c7-4776-8026-931b34962f6e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: currency, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83201786-022c-491b-bd5a-b7ab59399127",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"mandateDate\": \"INVALID\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fd9ef34-3f00-43d2-916c-c1cf8f18a713",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"customer\": \"NOT_EXIST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "BillingAccount",
							"item": [
								{
									"name": "CreateOrUpdate BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d84a26b-006d-4e19-8077-1a615ff0f559",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54d496ee-cf28-404b-8238-118f2ec5dc89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccfd76a5-9441-4517-98a2-8f33cac83234",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"BillingAccount with code=\"+pm.environment.get(\"testCode\")+\"_BA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa97678f-cfd1-4a8b-bddd-8d1600ad392a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5ce0d29-9824-48ff-9a69-3409bff3a5d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "255857d7-a1a5-4959-9db6-5352012fee0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40f13ff7-b098-4b83-9906-9c8744512cb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5e7efe7-64de-4df3-89ef-f07d7a57dcc8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: country, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d5cd544-4884-49d0-89e2-d4a264693c03",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e59c315-e8b3-48f7-9ba5-8b99920d4ce5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserAccount",
							"item": [
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "407373b4-ff0d-4038-877e-a266d1353b5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "166ce8d1-b589-4179-9151-9f6712e28659",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef467acc-d05f-453c-98ab-9ebaaa91224e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"UserAccount with code=\"+pm.environment.get(\"testCode\")+\"_UA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a2f7a9d-65e6-47a9-8450-9699c807286d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84146e3e-6d48-455a-ab6e-73d76aa98e9e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1671da3a-719f-4c4f-b616-53abce324ed1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90ea126c-711a-4c75-8466-c9021219a4dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1deab1ea-f37f-4c94-b97a-bc806dc0e6da",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: billingAccount.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"MISSING\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8675b4f-43b1-402a-9a30-58fd683abcbb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.AccountStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"{{testCode}}_BA\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"INVALID\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21ae12dc-fa7f-4daa-add8-f2fd9ab84689",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"NOT_EXIST\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"ACTIVE\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider Contact",
							"item": [
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89a29baa-ec83-4712-aded-a978037517a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ffe3ee0-002b-40b9-9811-32abc23bc31f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.environment.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Provider Contact ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ada9844-abc1-4e47-a6db-2a4a71144cb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ProviderContact with code=\"+pm.environment.get(\"testCode\")+\"_PC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76dab968-524c-4436-8946-f5982a13649f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ProviderContact with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e690fc83-4776-4eb4-899e-da7d6416959f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "715d4c8f-da48-409c-9f33-0f4b4aa359f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e1cf779-8438-46e3-9abe-e41eb5c89242",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.environment.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ea3933a-395f-4756-a50d-97775d913c05",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: description.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INTERNAL_SERVER_ERROR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2c5c1b2-8a9b-44a5-b3e0-3e537f6f865c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"At least 1 of the field in Contact Information tab is required [email, genericEmail, phone, mobile].\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b2bcc39-a76d-4a4c-ac95-e20b7da70e24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.account.AddressDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ca20be5-e8ea-4129-809c-2efbe1637fc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42eede3c-98af-4374-9def-8cf1a0bf70b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ProviderContact with code=\"+pm.environment.get(\"testCode\")+\"_PC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account Hierarchy",
							"item": [
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6044e8e-12b4-465d-bab7-e44b15ea81cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5172f588-8096-4335-abd7-ce209fa87699",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b8b1157-06ad-4e39-bf64-d720e044af41",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a0629b1-9b7e-4299-aa87-eff35fddd341",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Customer with code='NOT_EXIST' does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"NOT_EXIST\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc177790-c782-4abe-9b35-689b291dbfdc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ad87da-7c97-4ea4-8834-81bbf97061b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"SELLER_US\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a5e3a8-ae64-4f4a-9fa7-cd3af31eee8d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c890e5a-3fef-43b0-800c-a1256923fdf2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: customerCode, customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a7c9e62-4d34-4d69-8ce5-8569efb31441",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"customerCode\": \"{{testCode}}_CH\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a463244-31ac-409a-bdb9-1c8771861491",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"NOT_EXIST\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39df2614-437a-491c-8adf-97e51f8f739e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"NOT_EXIST\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a68fd0d0-2dc8-4d86-89b6-5804fbf474d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_BC\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\",\r\n    \"birthDate\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f53fed5-3889-4cd0-b471-6fdc57322c67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6706eeca-52a2-4a21-9637-f85227a08d90",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "137a01c6-85a5-4031-82df-9b8e3fa71482",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "471b100d-c5b8-496a-a682-bad70f688400",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"UserAccount with code=\"+pm.environment.get(\"testCode\")+\"_UA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  DELETE_REFERENCED_ENTITY_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60bc12f5-c2b0-4ba0-985f-35ea381f823d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"DELETE_REFERENCED_ENTITY_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB is referenced.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce1f8852-1012-477e-87f6-48524a148c57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d9ff6d1-29e8-46cc-a6b8-fd877e263711",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"BillingAccount with code=\"+pm.environment.get(\"testCode\")+\"_BA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e46565ba-cce9-43fe-8a8c-3b9a11513acd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a8fe884-a0e6-4e58-b9c2-ab8c54291b61",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerAccount with code=\"+pm.environment.get(\"testCode\")+\"_CA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "747376ae-d48e-4b21-b994-5476a101ef8f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acb5650c-effb-4a91-99b6-472023544d6f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12a7ed92-c1f6-4f39-b080-71d6d572bc74",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd8acb82-c197-4435-ae29-964401dea115",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=\"+pm.environment.get(\"testCode\")+\"_SELLER does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32d58d1d-8ccd-4f43-86c9-5f31a65b0d0b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "227d1a5a-e238-4034-8686-64c584df5808",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"BillingCycle with code=\"+pm.environment.get(\"testCode\")+\"_BC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4615c810-ab43-4e7d-a29f-fd4b333e5d51",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "152263b9-6d4b-474d-8917-d7b2d2211793",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Administration",
					"item": [
						{
							"name": "Module",
							"item": [
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68d5ae02-da90-426f-9a5f-34445a8af8ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41c354a7-2dcf-450f-9e11-be300026c698",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.environment.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Module ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a84a016d-c535-4cbb-b6f6-1fbb034a595d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"MeveoModule with code=\"+pm.environment.get(\"testCode\")+\"_MOD already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78750a13-2f4f-4cbc-b41a-efa6293af2ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"MeveoModule with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5ef56ff-2ede-4067-b17b-461eeb717cbd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ece2a865-ec83-44bd-a13c-97fe61af1cfd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a19453e-306c-430b-a0b0-49172df59091",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.environment.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c52a2ff-c42f-4d2b-b25c-bb7d82252e75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "657181e5-c155-4e82-88aa-ad4d47cddce2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"MeveoModule with code=TEST_MOD does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Job Instance",
							"item": [
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8488d5aa-3861-4ac8-8529-767bd6811a4f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6abb7529-d233-415a-8947-5d27673994b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Job Instance ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47cb2c62-9e0b-4b62-9769-dece8c0466c9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"JobInstance with code=\"+pm.environment.get(\"testCode\")+\"_JI already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "837f211a-2799-43ac-8781-2a901385c779",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"JobInstance with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0803fdbb-59f8-48d7-a05c-3713fadedf47",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1911b0f-fe33-424f-b7a8-fe7998ce4bfd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f53a1565-9f30-4cdc-a189-87fc3b2a35b1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "625ba814-ea5d-496c-8f21-15c2034ba265",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: SepaJob_ddRequestBuilder.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testDescription}}_JI\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92c1e788-2050-4c3e-ac73-3c0364992039",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"JobTemplate with code 'NOT_EXIST' doesn't exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"NOT_EXIST\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "014a393e-e9b7-4c80-80dc-8c8f3206ca02",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c931f94-b514-4908-a7c1-eeac7fbe6764",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"JobInstance with code=\"+pm.environment.get(\"testCode\")+\"_JI does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Discount Plan",
							"item": [
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b2f4499-808a-4325-bd1e-49876c64f4dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b3d332d-24d8-437a-af66-d07d02cd7099",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.environment.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Discount Plan ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b48b0c3a-7f37-4fd2-bb53-cdcca03f43fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"DiscountPlan with code=\"+pm.environment.get(\"testCode\")+\"_DP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dee1b05-313a-4fac-b07f-36c480e08825",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"DiscountPlan with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"TEST\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21f09605-03fd-4274-aabb-ff05e8081be0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de238209-baeb-4910-8213-4ff191273aa0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62ec531a-e456-4121-b710-e9111f0d48fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.environment.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac54be65-8917-467a-b98a-bab2db651d0c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"INVALID\",\r\n    \"endDate\": \"INVALID\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48c5c3e6-2931-40da-bac9-8e21f90eb951",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73a88369-a12c-4db1-a430-61ed319b56e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"DiscountPlan with code=\"+pm.environment.get(\"testCode\")+\"_DP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "Offer Template",
							"item": [
								{
									"name": "CreateOrUpdate  Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2db8e6ef-6fd9-41f8-b15c-753592c4c605",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a223e42-f8d8-4222-9ee8-478b713426ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fbda5db-e258-4487-88b6-db972d24d224",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceCategory with code=\" + pm.environment.get(\"testCode\") + \"_OF already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72d296b8-08fc-4cd2-890c-73766e090ba1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"OfferTemplate with code=NOT_EXIST /  /  does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b882090e-ec55-4942-839e-af6ba29a42e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "263e933b-7227-4a5e-bfb9-09f5e267cf2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0895ac40-d759-4d65-a567-b04c180d5523",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffaed199-149a-4abc-a352-c7d45302a98b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.catalog.LifeCycleStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"INVALID\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"5_SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ec7eb2e-fc20-4cac-a847-a5ceea3d08e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93bdb121-ce0a-43f0-8987-d91ed3644913",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"OfferTemplate with code=\" + pm.environment.get(\"testCode\") + \"_OT /  /  does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax Class",
							"item": [
								{
									"name": "CreateOrUpdate  Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4743e117-fdd4-407e-86ca-dcdebec232ad",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "932866d5-1e1a-43d1-98f6-f217875927e2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.environment.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f51ff72e-9703-4593-8b9a-0a1fc7122353",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"TaxClass with code=\" + pm.environment.get(\"testCode\") + \"_TC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "194e082f-7cbd-41cb-924c-b7e924374b46",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"TaxClass with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5b1a32d-249c-4a14-bf5c-d2b47e228dc5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fefbcce9-3d7c-4b29-9a41-d4f08c40625b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d8ab6d2-22d0-400a-97c2-2b5eff982036",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.environment.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01b19a01-1ca9-4a00-b3b2-3d487dcd238a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"INVALID\",\r\n    \"descriptionI18n\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f771aed2-91ed-4aa8-9537-d9391de766e1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8a7b3b4d-39c3-4d54-9db8-556aa6605505",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Recurring Charge",
							"item": [
								{
									"name": "CreateOrUpdate  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e80e0c93-37f8-4030-a2aa-280bdd583dea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdce9312-9120-4086-a5d7-d5a2cbd20449",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring Charge  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a1b065d-d67f-4966-a52d-729ea610d85e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"RecurringChargeTemplate with code=\" + pm.environment.get(\"testCode\") + \"_RCT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3ed925b-674a-48f7-a480-2c9068e95d40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"RecurringChargeTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91b9fc9f-ddb2-4787-8a31-4c4e27e55820",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6616f32a-92f1-48d8-b563-9070b736d2fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4db446a0-e447-4d12-8e71-64fd0232e8bb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f97faa9-45d7-41f8-8275-dc52ceb9c5b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: invoiceSubCategory, calendar, taxClassCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9f37be7-165a-4ce1-ba98-37f4f433b053",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"disabled\": \"INVAID\",\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e0d61a2d-d59c-44b9-bf43-da4b8b404604",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e14ec9b2-a6b9-45c6-9975-5dceb45b5452",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Price Plan",
							"item": [
								{
									"name": "CreateOrUpdate  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39e8f93b-ca3a-4bf7-974e-a7175ada2c06",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6af9d518-3697-4764-af10-dd0ce4b023ba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fc3853b-9984-4116-8403-a9f88a711280",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PricePlanMatrix with code=\" + pm.environment.get(\"testCode\") + \"_PP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1ac0a7b-f4cc-4368-8738-b38f7abd59d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PricePlanMatrix with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8985279-cc9d-496d-9dfb-448fb94a84ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad379a9f-4764-476e-a295-e30eefcdbe59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1a67713-683a-4432-924c-5d218436df64",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1cce1af-bc04-42d7-8765-1a9b5cdc477b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: eventCode, amountWithoutTax.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e796577a-f1af-424f-a6bb-de467519b05e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RcT\",\r\n    \"amountWithoutTax\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef641c0a-09c1-4ed6-a44f-dde8554d47dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "430de210-e01d-4613-a163-0fc332db66ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PricePlanMatrix with code=\" + pm.environment.get(\"testCode\") + \"_PP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a21f4642-f318-4cfa-b3a5-9e2a83b11578",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "796209eb-808a-4ad1-ae49-3cefe5b5c56c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service Template",
							"item": [
								{
									"name": "CreateOrUpdate  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b45ea044-22ba-4c3f-81ca-4b4b710f098f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9352629-44c7-47c0-8ebc-47af65856b8d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cc56327-0e6c-4a29-9b3c-6051397443d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceTemplateService with code=\" + pm.environment.get(\"testCode\") + \"_ST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3261fbed-7075-4a70-9911-442c15ceb863",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceTemplateService with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84ba793b-73f4-4293-8a30-324efd073005",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "069cc4e2-bae4-426f-b408-58324e89a123",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1bea3fb-8b66-4450-b771-f78abdd7d4e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d72b26f-4953-4c58-b96b-a6b4a54b2e99",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "627fb8e8-b3ce-4fb4-8aa2-8f449efa92ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": \"INVALID\",\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4813282b-273e-4591-86c6-f0246588f6bc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "923283ac-6daa-4c15-8f83-1ce0912db0fe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Tax Class GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60b58dc0-9972-4c7d-b56e-7b003658ec57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table \\\"billing_tax_class\\\" violates foreign key constraint\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "983779f7-6e67-4e59-a72b-346bf614ccec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0325ccf3-1521-469a-adad-022972f9e96e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ade4b1b-e9aa-4675-92dd-6731dffcf04b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceTemplate with code=\" + pm.environment.get(\"testCode\") + \"_ST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c3f5762-58c5-41ff-9ef3-42799c60ef98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "834e9891-decc-4782-9395-a4acf225718a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"RecurringChargeTemplate with code=\" + pm.environment.get(\"testCode\") + \"_RCT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d82710ae-e2a9-4b97-8f23-827833b0602c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff7d920-76dc-48b8-a443-e4452268c653",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"TaxClass with code=\" + pm.environment.get(\"testCode\") + \"_TC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Billing",
					"item": [
						{
							"name": "Invoice Category",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9d6b97-e636-4568-b9b8-60531a8873f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cda1203-a17b-440c-9d98-c58153f3afe5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Category  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c9df9aa-e5ed-4fd4-a263-19705cf7f6cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceCategory with code=\"+pm.environment.get(\"testCode\")+\"_IC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19fb4f99-5cd7-4bf4-a8a6-54a10fdcc908",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fccceb83-7205-4854-ae97-1c7f54854daa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51662711-d093-42ab-a020-734e8b77c391",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffa175fb-8fa2-4151-bb92-5fe3086d2017",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fb0ca85-66d3-410d-b08e-8a3edbbb79a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7312c099-9f02-414c-870d-ee79b58b5286",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice SubCategory",
							"item": [
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da333bc1-8809-4759-a8f6-2d075acc66c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61223aa7-028c-4b9e-a344-d1fa34ede02e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice SubCategory  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "290ef324-d03f-4521-a67f-a546d1f2d831",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceSubCategory with code=\"+pm.environment.get(\"testCode\")+\"_ISC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65e175dc-ffd6-4a51-9dac-10e255fee626",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86e3655a-a8c1-4753-b936-3086495152cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a92168d-617d-4811-b39a-719f7e4a5f1e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c9e8fd0-285a-4422-8245-f2c31cfdebde",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f817862-9a8c-449d-8d0a-2e6c7169811e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: invoiceCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12c1fc3a-c0b9-4f2a-b05c-6c8b997fb418",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d32d5e14-3a89-4aee-80e8-3eaaa721145f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Sequence",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ebb2441-ef12-4e26-a99e-db6e4d244322",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1656a67f-e547-4896-8c36-d7315e5aed73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Sequence ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e35aab0-45b7-4556-9951-7baacad9a073",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceSequence with code=\"+pm.environment.get(\"testCode\")+\"_IS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd2e874b-81c0-4662-8826-c6e0faaf323b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e51ef9d-8422-4d2e-a019-3bbe36cd1e36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f04a85ca-f117-41dd-81a7-69739a453a10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61a65baf-bdca-40b8-b35d-70e13f731df7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c0541c1-aeee-4e1b-a05c-b562656ebe14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8c45a92-5f25-4861-be63-1fccec0ec452",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"sequenceSize\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Invoice Category GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cde4c966-72d5-4acd-84a0-454fea267ccf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5867e96-6406-42ec-a403-0b0c62efe3cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54f5a030-bc1d-45f6-bc9a-f69d9b3917e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceSubCategory with code=\"+pm.environment.get(\"testCode\")+\"_ISC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e77b030f-7b56-48ef-9eb0-13b021f81964",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a27f5c3-0857-43f4-b52e-9edf7fae33a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceCategory with code=\"+pm.environment.get(\"testCode\")+\"_IC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wallet Operation",
							"item": [
								{
									"name": "Create Wallet Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2f0d0b6-0cfa-446f-bc9b-880406e7eb31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71c765d2-00b5-46a8-8800-46e2b6c12c66",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"WalletOperation with code=\"+pm.environment.get(\"testCode\")+\"_WLT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e407c1a3-5516-4793-8d9e-082bf79a00e2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09f49286-06b8-4eea-809d-ed11b3364363",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"subscriptionDate\": \"INVALID\",\r\n    \"chargeInstance\": \"PR_CLASSIC_DEFAULT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription",
					"item": [
						{
							"name": "Subscription",
							"item": [
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75bdcfad-b0ad-4b97-b093-e64c53d107a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\t\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c668f01-61af-44d0-8d0a-add973a5b340",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4c531e2-6ace-4bf6-9aa1-4e8415dc703c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Subscription with code=\"+pm.environment.get(\"testCode\")+\"_SUB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8017b0f8-5e65-4f83-966d-bc420925ad84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Subscription with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"userAccount\": \"ben.ohara\",\r\n\t\"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n\t\"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18d283f7-a800-48e6-be4c-684cb06614a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da4e33ba-fc06-4110-8bf9-7e2d05fff32d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b46a8c06-b3f2-48ab-b829-483931bfeef0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb2a1774-6c56-4886-bd02-58cc4c4185ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"NOT_EXIST\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "501469ec-eb49-4ec6-ad12-e6b0f025831a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: subscriptionDate.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "980de545-55c2-4ab2-bd2b-432397d5aace",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "697e7eef-d3cb-482a-9058-fabda73d7178",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription RESILIATED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7952cdd0-5528-4ec6-8081-21e73d45ab2c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Subscription is already RESILIATED.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "906fcf77-d05a-4f05-8217-72d1f8042c8d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a26884e-76c0-429b-aa2f-a16c170313f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Subscription with code=SUB_TEST_1 already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "Title",
							"item": [
								{
									"name": "CreateOrUpdate Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc3c6037-8c58-4bf8-b6ff-752f40c09365",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "689f4493-9e88-4dc7-9450-81876b89ebfa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.environment.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Title ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3f5155d-7e81-45c6-b59b-3affcbc79e98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Title with code=\"+pm.environment.get(\"testCode\")+\"_TITLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "440b4296-4f53-430d-834a-4d511643adc2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Title with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49a3d52e-8b62-48a3-893d-30f6e6fdb0ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "440f8817-b1f0-4367-90b2-56cac1c6509d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71681d9d-4ffd-4ad6-a86b-0ede0d0de719",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.environment.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb5b3e46-3b6a-4782-b00e-8789bb00880a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: titleCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76730493-f21e-4629-8a5b-d4673f0cd6c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"Test\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ba4fefa-5f65-46f4-9cc8-4300e02cde8f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bb21c38-bc6c-4798-aa89-e007d1c13ea9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Title with code=\"+pm.environment.get(\"testCode\")+\"_TITLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Calendar",
							"item": [
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed2430bd-71ee-45e5-ae0c-187bc0f39f36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ddc0c18-71ed-4692-91ee-8a1c77efb2c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.environment.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Calendar ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18cf3e8b-0c33-41b3-810d-5f22e86e7cc3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Calendar with code=\"+pm.environment.get(\"testCode\")+\"_CAL already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8338d4e9-d616-403c-a82e-fe679c728f23",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8967079-1c86-445a-b2b9-3b343df7b730",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b8445a8-e2a2-4521-819a-c252bc082f39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "910c99ff-7036-4151-b295-778eef57ba46",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.environment.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month) updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99fc335e-8741-4390-bff0-57c8c0d2a509",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: calendarType.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7556d6db-2ba5-4b0b-9e6b-b6c11ced4ca5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"query did not return a unique result\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ae90c6b-7e95-4cda-990f-b54b4a8ab6ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.api.dto.CalendarTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"INVALID\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa4b749e-394a-4887-918b-554ff8028b38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "806b80d3-190c-47c5-a062-5a0cab6d5fa3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Calendar with code=\"+pm.environment.get(\"testCode\")+\"_CAL does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Channel",
							"item": [
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0672bd21-f665-4dd7-9f98-248f0d9913a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96aa834e-cae2-41ae-82da-a997738f01dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Channel ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "575bc049-1b07-41fd-b1b8-d978c66b98a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Channel with code=\"+pm.environment.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0f9f1f7-3e79-4d27-9ea4-a0388dcffc86",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Channel with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33032039-b56b-4031-bc7f-99ffc2081e65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8420d523-6685-4919-b4b3-f2e0cacfee6c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81fc2b76-c6d5-47e8-bf46-7e1cc5e0520e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4cf0492-4211-4a2b-bfa7-a08c4fe551e9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb15442a-300c-469d-8333-ffee6fbfffa9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "811cf5f7-6280-4122-babe-d09f9c951724",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed9eff18-e157-4dbe-b75f-f4e7d490c621",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Channel with code=\"+pm.environment.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CountryIso",
							"item": [
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f519d5d-fdc2-47db-bfc0-27ebc2b2b301",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2516fa39-f2fc-4334-8eb7-a881bb1e8c03",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CountryIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaefda23-d524-4557-b1ee-a4e90c012618",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Country with code=TS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33b6992d-dd2f-4786-ad82-90cd1fe6307c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Country with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1b7f8f1-700e-4305-be64-d5815a795afa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcff5b62-05ca-406b-a9f2-54005b098266",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39bd7db2-a6af-4078-a192-21b441f65676",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29315f7a-11e6-4130-a531-3ca583165d01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: currencyCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"MISSING\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6639a110-7f3b-4654-a5bd-f3d287ef33e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"languageDescriptions\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dac5d1be-b8f2-4c6f-a27f-faaf78e4c9fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"countryCode size must be between 0 and 10\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9ffe67b-6c3c-4de2-91b1-841f597eaf22",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"NOT_EXIST\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30c532c7-19d2-4d9c-badd-e0644aa5b6c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edaab174-dac4-4b28-ab2d-5ff3ca045e4d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Country with code=TS does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CurrencyIso",
							"item": [
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97313a8c-7298-4d25-ba6c-90e50e088c79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8c650b4-85fe-4052-99b5-8d68aa8a37f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CurrencyIso ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "becce4a6-2bf6-43f5-b78f-f4ff8c3a150a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Currency with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e92559c4-eb8e-403f-81cf-6f64207ef19e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb78377-4e40-4c1c-b0f0-dadb4cf34c40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60f22d2d-ad98-4c70-a824-55ba2887ba81",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bae69b7-0e14-4bf3-9f54-963bef06a512",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60020df8-1e12-4d60-9a36-acf8794887a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"currencyCode size must be between 0 and 3\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TEST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8de52a92-7b73-4859-b788-1a22e117a693",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cf7056c-c7f9-4fa0-bc14-882dbca6b506",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b51c46af-5d16-4899-9c1b-8854dcf442fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51af2504-cc37-4911-9802-be68654323d4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Currency with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "LanguageIso",
							"item": [
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14718f5a-a948-4459-965e-8395e0dfb433",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"code\": \"TST\",\r\n  \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edc91fe4-3990-48ca-85ba-92c0b2d8d643",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LanguageIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f5f0fd1-12d3-4032-adf3-5b373d666c1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Language with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dd63ca2-d8b8-4bb7-8541-3beac5e89dd0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d54a5b21-13dd-4c05-9485-9b233ac092a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "960b68c7-dc0b-48b2-addb-0aeff531e337",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e8c2902-bac2-4f9d-89d8-9b0c46e3e77c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42b3efb8-5b64-4298-96d5-6f555efb382d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"languageCode size must be between 0 and 3\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TEST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f415ebb-ef08-421e-bbdf-389617852c3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7f1cfc8-abfd-487c-af0c-3b8f9b116a65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66350a24-3a8b-4a80-9e0e-9fabeae63ac4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8492a1b-892d-4489-a781-d63703b2f785",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Language with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider",
							"item": [
								{
									"name": "Create Provider BUSINESS_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b33f5050-3892-49ac-8bc8-24a06a48ed93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"There should already be a provider setup\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca7537f7-2528-4650-ad48-b43fb77129b5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a36f7236-174a-47e1-bb69-17f908349b4d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.environment.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb3216da-3d0d-4c71-b47b-5173a2a3a2f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e0dd965-d89b-420b-adfe-48d6fd2b7422",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.environment.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c2c380d-50f4-421b-ae6d-dc3c1921f786",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"INVALID\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "659e2e6e-102f-4586-bc66-e0f0fb5f79ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"INVALID\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f0ad5b96-87f2-464f-9c9c-fd4cb1ab7083",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db679285-53ba-41d3-aca0-b321061e8cc9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "CreateOrUpdate Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e89cb8d-c931-4a2c-9797-eff0b95c73e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ffb03b-eae2-48e4-92bb-b888e56e45e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\"+pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.environment.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Role ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6ad1cd3-315c-4573-aabc-5d071b836179",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Role with role name=\"+pm.environment.get(\"testCode\")+\"_ROLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61511a97-984f-46a3-90bc-44b650e0a9cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Role with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37fa4b63-1811-47c7-a4f5-72daf19cf1a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac53a7b8-ee7a-4ada-9bf0-c57e56d4bfd9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "275d76f7-3776-41c6-9e52-a4b3e472a6f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.environment.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "948fabf7-72da-4c0a-990d-2c13baeee16d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54d22eba-2fb0-4a54-8bc9-be365e6722d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: name.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "969624e1-3367-4897-959f-2169d64aba16",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Permission with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"NOT_EXIST\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "149ad003-9e2d-4fda-8ef6-cff846f8756a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fff6866-553f-4e2a-8db6-23d3121bb31c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Role with name=\"+pm.environment.get(\"testCode\")+\"_ROLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax",
							"item": [
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02e63e54-fdb5-44d3-8c4d-9b320bbb2e8d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14c4aeed-9044-4a52-9d83-16b73ce5beed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.environment.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f6591f0-b019-4ffa-81d4-d5b99d75b1d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Tax with code=\" + pm.environment.get(\"testCode\") + \"_TAX already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "685ab013-7466-468d-8ca6-5c61be5edb33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Tax with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f89b4ca-19db-4f93-8acf-48c3f1d95c2f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb1ed58b-bdf4-4e80-803e-6c62da0ddaea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax   SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9e4a3ca-fd52-42b0-85bf-f4aab7934dfc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.environment.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b6ce82f-fa27-4738-bbbc-f90fbc318f25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66ad4f7a-1578-455f-97d3-e4ed88aa3f3c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Language INVALID is not supported by the provider.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"INVALID\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "676597c6-d15f-491f-93d2-f51bca74a8a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: percent.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81481c27-bed0-4579-82d5-34333e4a859c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"TVA 20%\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": \"NOT_EXIST\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e0c98b9-49b6-45e4-94a3-d49bc59db75d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3552f0c5-2834-4003-9cca-d2e4d8b4c427",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Tax with code=\"+pm.environment.get(\"testCode\")+\"_TAX does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Type",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "845eb373-e948-46bf-88db-ec06c464cd10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aff058aa-1606-47f8-b808-186eac84ba29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.environment.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Type ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "907dd8ef-b389-41cc-b03a-96008b9b42bd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceType with code=\" + pm.environment.get(\"testCode\") + \"_IT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87e127e0-90b6-4dff-9ebe-804ac4246963",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87a8e964-6106-49eb-8383-8f59698f6b13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f0792c6-4b67-4eea-bfa0-97a7a8197ca1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f050e65d-2f1f-45bc-bc78-c3d591aceee3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.environment.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bef4ca82-99f4-4a83-80d1-12d8a0bd7ad2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e99a1c5-dfb3-4d3c-8472-07ca4b42d2de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7e3e485-6bca-447c-9ce8-ae290b5a028c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"EmailTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\",\r\n    \"emailTemplateCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee71c0c5-7f12-4502-b288-63445eaa26fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"NOT_EXIST\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad1c9327-9238-426f-a3c8-7ee63f466038",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"NOT_EXIST\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a73c6893-088a-40c2-81ee-d0575f9ef9ac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"NOT_EXIST\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c5b3a6-f1f7-4f1e-9110-54ba9b1cb00e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "754a0dbd-baec-4723-ad8e-73c87e51708b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceType with code=\"+pm.environment.get(\"testCode\")+\"_IT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Credit Category",
							"item": [
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2873f536-5301-4367-ac09-8ff77c5dc159",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13b13744-c6d4-46c5-87ae-dd421502120d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.environment.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Credit Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e3d658d-08d9-4433-851c-ce863f711093",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CreditCategory with code=\" + pm.environment.get(\"testCode\") + \"_CrCat already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65883d87-57ab-4bb7-b58a-bc1119d3c089",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CreditCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6786a492-6406-4381-9d0f-92b4d0d4c4c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a6fa49d-accc-46d7-832b-b1be64f3d6c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d37bef3-1223-45e9-a8eb-7b3a17b8bcfd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.environment.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab633c18-2d6b-42ba-8be8-33da253eeaf2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26e9f308-6d11-42e3-90d8-621e71298ee3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"CreditCategory with code=\" + pm.environment.get(\"testCode\") + \"_CrCat does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "274617ee-55d7-48ed-9179-d1edd72334a0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f4d48c83-62d4-4238-8b37-22112b27c36f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Gateway",
							"item": [
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1574b7b-3416-4a81-a4c9-6aba49f6e30c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abd31ebc-05be-49ec-88b6-00a98d467cf6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.code).to.eql(pm.environment.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Gateway ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "795ff7b9-6b4d-4961-92d9-f99bfbdfc460",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PaymentGateway with code=\" + pm.environment.get(\"testCode\") + \"_PG already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db504d62-6dc4-406c-b9da-0fbf9468f8c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PaymentGateway with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40174e6e-d014-432e-ba6c-0624495b94af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bd29c4e-377e-4073-97d7-acd80a487225",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "869c20c9-243c-45ca-9415-0ccdf705e11e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.code).to.eql(pm.environment.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b963bf2-7266-4d26-b4f9-27540147b7a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code, type, paymentMethodType.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fe720ef-5209-4de9-8e1a-b0ab7c07c17a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.PaymentGatewayTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"INVALID\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0870ae80-7bdb-4957-b7ad-3fb2e521cbc0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eb4f2cd-11a5-47a8-9997-680f04951449",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PaymentGateway with code=\" + pm.environment.get(\"testCode\") + \"_PG does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db961466-55c1-4a6e-a81e-ca5a623c8ec6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25d789f9-5fe9-4fde-93b1-0bf85a383c92",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Schedule Template",
							"item": [
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb49b246-d60b-4b40-ae57-0204494e2f79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"1\");",
													"    pm.globals.set(\"id_PST\", jsonData.message);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ebddcb9-1ed8-4108-97ba-b57d212c52f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.environment.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Schedule Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed507a07-b9f8-4dad-a5f0-320d7c344e7b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PaymentScheduleTemplate with code=\" + pm.environment.get(\"testCode\") + \"_PST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e067f90f-cb1f-4de7-a837-9b2af219d80a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PaymentScheduleTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "173cd275-ba6f-4325-bebe-4d60a127b208",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eed60b09-21ac-45a8-8959-2dd363c535b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50e7dedc-6a57-4401-9f37-2cc6fde11092",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.environment.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b1e7818-1b6e-4695-b3a5-cb0d25708f71",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values: code, calendarCode, serviceTemplateCode, paymentDayInMonth, amount, paymentLabel, advancePaymentInvoiceTypeCode, advancePaymentInvoiceSubCategoryCode, generateAdvancePaymentInvoice, doPayment.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de394ab-8328-4121-988f-b710e77576a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_doPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbec5421-600d-4f18-b3a3-9a2e948e9e6f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_generateAdvancePaymentInvoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67795e08-2f87-474e-b5fe-0a76006688f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"INVALID\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_paymentDateInMonth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b41470b3-2a0d-49af-adc2-42d1c862adb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvSubCat",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1430a587-832f-4d07-b035-52b8f0e64d3c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"NOT_EXIST\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "016bb807-11fb-4880-a74e-8e0ad0cff1c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"NOT_EXIST\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_calendarCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d655a69-86ca-40d2-86e7-e61b0fb9923f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"NOT_EXIST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_serviceTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe955379-79db-46e2-a883-2780d3b7ddc1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"NOT_EXIST\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae0b4df1-a30c-45be-a2a4-2f19959374e9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4591f688-62a1-472d-b09a-db3621411f40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"PaymentScheduleTemplate with code=\" + pm.environment.get(\"testCode\") + \"_PST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6904403c-8fba-4b98-a475-63a9fcedeb18",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c270c226-754c-4f70-910a-a1177a5b7b11",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom",
					"item": [
						{
							"name": "Entity Customization",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Custom Table",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# Portal APIs\r\n\r\nHere are all portal APIs. Are tested the CRUD processes when available as well as exceptions that might occure, to assure that everything works as intended.\r\n\r\n### Typical execution\r\n\r\nThe typical test consists of:\r\n1. A successful createOrUpdate (POST) - remplace with create when createOrUpdate is unavailable\r\n2. A successful read (GET) - check if entity created in point 1 is retreived\r\n3. A failed Create (POST) - due to entity already created\r\n4. A failed update (PUT) - due to a non existant entity\r\n5. A succesfull update (PUT) - update entity created in point 1\r\n6. A succesfull createOrUpdate (POST) - update entity created in point 1 - skip this if createOrUpdate is unavailable\r\n7. A successful read (GET) - check if updated entity from point 5 and 6 have been correctly updated\r\n8. Any extra failed tests such as MISSING_PARAMETER or INVALID_PARAMETER\r\n\r\nPlease ensure that tests are correctly asserted in the Tests tab.\r\n\r\n## Table of portal entities\r\n\r\n| Entity                    | Create | Read | Update | Delete | Other           | Exception Handling |\r\n|---------------------------|--------|------|--------|--------|-----------------|--------------------|\r\n| Access                    |        |      |        |        |                 |                    |\r\n| Account Hierarchy         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Account Operation         | TODO   | TODO | TODO   | TODO   |                 | TODO               |\r\n| Accouting Code            | OK     | OK   | OK     | OK     |                 |                    |\r\n| Addressbook               |        |      |        |        |                 |                    |\r\n| Audit                     |        |      |        |        |                 |                    |\r\n| Billing Account           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Billing Run               | OK     | NA   | NA     | NA     | Validate/Cancel | OK                 |\r\n| Billing Cycle             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Business Account          |        |      |        |        |                 |                    |\r\n| Business Offer Model      |        |      |        |        |                 |                    |\r\n| Business Product Model    |        |      |        |        |                 |                    |\r\n| Business Service Model    |        |      |        |        |                 |                    |\r\n| Calendar                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Catalog                   |        |      |        |        |                 |                    |\r\n| Channel                   | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Channel and Segments      |        |      |        |        |                 |                    |\r\n| Charge Template           |        |      |        |        |                 |                    |\r\n| Chart                     |        |      |        |        |                 |                    |\r\n| Communication             |        |      |        |        |                 |                    |\r\n| Configuration             |        |      |        |        |                 |                    |\r\n| Contact                   |        |      |        |        |                 |                    |\r\n| Counter Template          |        |      |        |        |                 |                    |\r\n| CountryIso                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Country                   |        |      |        |        |                 |                    |\r\n| Credit Category           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Currency                  |        |      |        |        |                 |                    |\r\n| CurrencyIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Custom Entity Instance    | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Custom Field Template     |        |      |        |        |                 |                    |\r\n| Custom Table              | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Customer                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Account          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Brand            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Category         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| DD Request Lot OP         |        |      |        |        |                 |                    |\r\n| Discount Plan             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Discount Plan Item        |        |      |        |        |                 |                    |\r\n| Document Sign             |        |      |        |        |                 |                    |\r\n| Dunning Document          |        |      |        |        |                 |                    |\r\n| Email Notification        |        |      |        |        |                 |                    |\r\n| Email Template            |        |      |        |        |                 |                    |\r\n| Entity Customization      | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| Filter                    |        |      |        |        |                 |                    |\r\n| Generic Workflow          |        |      |        |        |                 |                    |\r\n| Iban                      |        |      |        |        |                 |                    |\r\n| Import Export             |        |      |        |        |                 |                    |\r\n| Invoice                   | OK     | OK   | NA     | NA     | Generate        |                    |\r\n| Invoice Category          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Sequence          | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Invoice SubCategory       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Type              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoicing                 |        |      |        |        |                 |                    |\r\n| Job Instance              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Job Trigger               |        |      |        |        |                 |                    |\r\n| LanguageIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Language                  |        |      |        |        |                 |                    |\r\n| Measurable Quantity       |        |      |        |        |                 |                    |\r\n| Mediation                 |        |      |        |        |                 |                    |\r\n| Metric Configuration      |        |      |        |        |                 |                    |\r\n| Meveo Instance            |        |      |        |        |                 |                    |\r\n| Module                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Notification              |        |      |        |        |                 |                    |\r\n| OccTemplate               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template Category   |        |      |        |        |                 |                    |\r\n| One Shot Charge Template  |        |      |        |        |                 |                    |\r\n| Order                     |        |      |        |        |                 |                    |\r\n| Payment Gateway           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Method            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Schedule          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment                   |        |      |        |        |                 |                    |\r\n| PDF Document              |        |      |        |        |                 |                    |\r\n| PdfInvoice                |        |      |        |        |                 |                    |\r\n| Price Plan                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Provider                  | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Provider Contact          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Query                     |        |      |        |        |                 |                    |\r\n| Quote                     |        |      |        |        |                 |                    |\r\n| Rated Transation          |        |      |        |        |                 |                    |\r\n| Tax                       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Recurring Charge Template | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Refund                    |        |      |        |        |                 |                    |\r\n| Report Extract            |        |      |        |        |                 |                    |\r\n| Revenue Recognition Rules |        |      |        |        |                 |                    |\r\n| Role                      | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Rum Sequence              |        |      |        |        |                 |                    |\r\n| Script Instance           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Seller                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Service Template          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| SMS Notification          |        |      |        |        |                 |                    |\r\n| Subscription              | OK     | OK   | OK     | OK     | Activate        | OK                 |\r\n| Tax Category              |        |      |        |        |                 |                    |\r\n| Tax Class                 | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Tax Mapping               |        |      |        |        |                 |                    |\r\n| Terminate Reason          | OK     | TODO | TODO   | TODO   |                 | TODO               |\r\n| Timer Entity              |        |      |        |        |                 |                    |\r\n| Title                     | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Triggered Edr             |        |      |        |        |                 |                    |\r\n| Unit of Measure           |        |      |        |        |                 |                    |\r\n| Unitary Custom Table      |        |      |        |        |                 |                    |\r\n| Usage                     |        |      |        |        |                 |                    |\r\n| Usage Charge Template     |        |      |        |        |                 |                    |\r\n| User                      |        |      |        |        |                 |                    |\r\n| User Account              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| User Hierarchy            |        |      |        |        |                 |                    |\r\n| Wallet                    | OK     | OK   | TODO   | NA     |                 | OK                 |\r\n| WebHook Notification      |        |      |        |        |                 |                    |\r\n| Workflow                  |        |      |        |        |                 |                    |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6a541fe1-aacc-4e2b-89a8-927eec7cbffe",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "536df1f0-dbc7-4c76-ac3b-b05a9bfa22c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Url",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e2a6f1c-586c-4833-8b69-f3d1377edfb2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"index.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/providers/providerSelfDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a60519cc-c792-4084-881e-efd91d2e86b5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/providers/providerSelfDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"providers",
								"providerSelfDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/providerContacts/providerContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "285a0205-9fef-4e75-b302-328df62d3d90",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/providerContacts/providerContacts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"providerContacts",
								"providerContacts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoUsers/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541b7ef8-c319-4eb6-a2f3-e4fdf1aa43c9",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoUsers/users.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoUsers",
								"users.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userRoles/userRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "889732ce-4de5-471f-b110-965d9d8acb20",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userRoles/userRoles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userRoles",
								"userRoles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userGroupHierarchy/userGroupHierarchy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce700f0-968a-492a-b6bd-0c9c6c2c4840",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userGroupHierarchy/userGroupHierarchy.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userGroupHierarchy",
								"userGroupHierarchy.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/sellers/sellers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1159342a-4714-4845-aba8-3169ce70df8d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/sellers/sellers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"sellers",
								"sellers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/title/titles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b9e04f9-c24b-49b5-b322-4d7a5b7052ec",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/title/titles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"title",
								"titles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerBrands/customerBrands",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f78e89b-0f3c-4d84-887c-e096a376113a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerBrands/customerBrands.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerBrands",
								"customerBrands.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerCategories/customerCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5850b8e-b372-4061-80f0-01cfc7f647cf",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerCategories/customerCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerCategories",
								"customerCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/creditCategories/creditCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "559084a2-8474-40f0-a890-55d176ec7cdf",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/creditCategories/creditCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"creditCategories",
								"creditCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/occTemplates/occTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77952709-c2b0-4e93-b4da-e3b051425a5c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/occTemplates/occTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"occTemplates",
								"occTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingLanguages/tradingLanguages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8221ab50-680f-4aba-8b30-d3246f587804",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingLanguages/tradingLanguages.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingLanguages",
								"tradingLanguages.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCurrencies/tradingCurrencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bbef4b9-2e57-4689-a2bb-f05eef5a720a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCurrencies/tradingCurrencies.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCurrencies",
								"tradingCurrencies.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCountries/tradingCountries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be446afc-cd5d-4e15-9dd4-c0c8e29ba836",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCountries/tradingCountries.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCountries",
								"tradingCountries.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/multiLanguageField/multiLanguageFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90f37619-6b13-481e-ba73-411d016509f4",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/multiLanguageField/multiLanguageFields.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"multiLanguageField",
								"multiLanguageFields.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/communication/emailTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bb9ab9f-f7b2-4912-aa6c-4842d4f07320",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/communication/emailTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"communication",
								"emailTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/calendars/calendars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74cce3a8-913f-43d1-bbe0-900a91268085",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/calendars/calendars.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"calendars",
								"calendars.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingCycles/billingCycles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0d296bf-339a-4629-9401-8761512a246f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingCycles/billingCycles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingCycles",
								"billingCycles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/taxes/taxes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b547fd58-895e-49ff-affb-58ad0fbb68de",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/taxes/taxes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"taxes",
								"taxes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceCategories/invoiceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "335e4855-39de-41e5-bf41-07b7f8e5d218",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceCategories/invoiceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceCategories",
								"invoiceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceSubCategories/invoiceSubCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81a0df39-24ab-48a3-bce4-454b00da7fe1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceSubCategories/invoiceSubCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceSubCategories",
								"invoiceSubCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceTypes/invoiceTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ceb9b78-8b9a-446c-8ce2-991fefa36129",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceTypes/invoiceTypes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceTypes",
								"invoiceTypes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceSequences/invoiceSequences",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74d0206e-35bd-467c-b3f8-04c785f3f2cc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceSequences/invoiceSequences.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceSequences",
								"invoiceSequences.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/terminationReason/terminationReasons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9162a6b3-e77c-4024-b423-cd924418c6b1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/terminationReason/terminationReasons.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"terminationReason",
								"terminationReasons.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/channels/channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "995d65cb-3f83-4248-b36d-4f4e5860a568",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/channels/channels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"channels",
								"channels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplates/offerTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09db23c0-5857-4d0d-acac-725794a7409e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplates/offerTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplates",
								"offerTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplateCategories/offerTemplateCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f451a178-057c-45f7-bb47-79a6a7a031ff",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplateCategories/offerTemplateCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplateCategories",
								"offerTemplateCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/serviceTemplates/serviceTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf2af0be-3c38-475f-86a0-c99624435e75",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/serviceTemplates/serviceTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"serviceTemplates",
								"serviceTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/chargeTemplates/chargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7a4ba1f-1974-4728-9d53-e8e00be8b604",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/chargeTemplates/chargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"chargeTemplates",
								"chargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/recurringChargeTemplates/recurringChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "472955a1-4cf7-4d9f-8749-0a39c3d72e1c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/recurringChargeTemplates/recurringChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"recurringChargeTemplates",
								"recurringChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/usageChargeTemplates/usageChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "584f0bf6-aa4f-4a7d-8776-50bb279723c5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/usageChargeTemplates/usageChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"usageChargeTemplates",
								"usageChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/oneShotChargeTemplates/oneShotChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "393b61c7-1841-45a8-976e-cac219a25d87",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/oneShotChargeTemplates/oneShotChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"oneShotChargeTemplates",
								"oneShotChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/counterTemplates/counterTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41e41cdc-d023-4f7d-a6ef-24d03ecbb397",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/counterTemplates/counterTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"counterTemplates",
								"counterTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productTemplates/productTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85e78aff-78b5-45e1-b53d-770a9b54b9bd",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productTemplates/productTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productTemplates",
								"productTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productChargeTemplates/productChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "611f8334-6c94-41b8-a507-44ea361559d5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productChargeTemplates/productChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productChargeTemplates",
								"productChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/bundleTemplates/bundleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88e924bc-9b5c-4c52-ad33-179b1eb0cfae",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/bundleTemplates/bundleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"bundleTemplates",
								"bundleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/triggeredEdrTemplates/triggeredEdrTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "247d5569-2b3a-489c-9279-511c5b0cd70d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/triggeredEdrTemplates/triggeredEdrTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"triggeredEdrTemplates",
								"triggeredEdrTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/walletTemplates/walletTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "719f1fec-3b21-4cde-be16-c1974038c375",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/walletTemplates/walletTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"walletTemplates",
								"walletTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessOfferModels/businessOfferModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba011205-0aed-483d-8591-81ec4bfdd12d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessOfferModels/businessOfferModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessOfferModels",
								"businessOfferModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessServiceModels/businessServiceModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6331bc83-e7d0-4e01-9c2f-4201f22eed47",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessServiceModels/businessServiceModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessServiceModels",
								"businessServiceModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessProductModels/businessProductModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0519c77b-54fb-41ba-9ad0-0107bc5f3ac8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessProductModels/businessProductModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessProductModels",
								"businessProductModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/pricePlanMatrixes/pricePlanMatrixes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85f6ad2b-9950-403d-aeb4-18c5b52bc630",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/pricePlanMatrixes/pricePlanMatrixes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"pricePlanMatrixes",
								"pricePlanMatrixes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/discountPlans/discountPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a28d3d1-15bd-406e-b451-2bf2607b9616",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/discountPlans/discountPlans.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"discountPlans",
								"discountPlans.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customerSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "646599b9-f013-43cc-b29f-701a989907cf",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customerSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customerSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6531ba92-2e8e-46db-8695-cee747a80ad0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/customerAccounts/customerAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "befc42b9-401e-4e5b-b2f4-53d515c925cd",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/customerAccounts/customerAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"customerAccounts",
								"customerAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingAccounts/billingAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd47bfb0-620d-4b88-a584-a096f6ddcf29",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingAccounts/billingAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingAccounts",
								"billingAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/userAccounts/userAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f61ec34-c7e8-45db-9b3c-145d1ca3c85b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/userAccounts/userAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"userAccounts",
								"userAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/crmAccounts/crmAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "205fe2f8-2fa2-41b2-bc21-5ce3d2ed2089",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/crmAccounts/crmAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"crmAccounts",
								"crmAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/subscriptions/subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "26476007-89f6-4bbd-9e39-c9911cb3d47c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/subscriptions/subscriptions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"subscriptions",
								"subscriptions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/access/access",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "243dee09-5911-4dd2-9fda-0d3179175a45",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/access/access.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"access",
								"access.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/businessAccountModels/businessAccountModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59125389-b67c-4537-b185-a08e70a51757",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/businessAccountModels/businessAccountModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"businessAccountModels",
								"businessAccountModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "quote/quotes/quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92a3fb66-9872-4ebc-8970-9034ef7f7d4d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/quote/quotes/quotes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"quote",
								"quotes",
								"quotes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "order/orders/orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5c45e38-1b79-446f-a00b-c52513b3ece5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/order/orders/orders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"order",
								"orders",
								"orders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "rating/edr/edrList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d32700f0-7809-4b6b-b5b6-984def5d3965",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/rating/edr/edrList.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"rating",
								"edr",
								"edrList.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/importedFile/importedFiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "939522a1-57be-4667-be2e-dbe505b28dd7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/importedFile/importedFiles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"importedFile",
								"importedFiles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/walletOperations/walletOperations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d97ca510-ade6-4b60-b6cf-c072d2f2c15a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/walletOperations/walletOperations.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"walletOperations",
								"walletOperations.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/ratedTransactions/ratedTransactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53108fe8-1806-443e-b2ce-83f2e205b38b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/ratedTransactions/ratedTransactions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"ratedTransactions",
								"ratedTransactions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/billingRuns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c0c429b-4718-4c91-9f63-f9258698e5b3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/billingRuns.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"billingRuns.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/recurringInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3074012e-a75f-4adc-8e59-3f0240f1d4a1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/recurringInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"recurringInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/exceptionelInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "130f1575-4def-432f-beef-df1588520de8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/exceptionelInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"exceptionelInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9662601-e887-4472-b5fd-e8413ea3ac59",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/invoices.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"invoices.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/createInvoiceDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a86f8ec-8519-4e37-b706-0aa4ba080869",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/createInvoiceDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"createInvoiceDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "add8648b-f262-4c8b-bb8c-d67241008b7b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30dcd66-3da5-4e12-932e-51e753b71773",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLotOp/ddrequestLotOps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c736165a-e2af-4e4b-bb2a-48db3e907c52",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLotOp/ddrequestLotOps.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLotOp",
								"ddrequestLotOps.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLot/ddrequestLots",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "960e0aae-62c0-4bfc-befe-1f8cbcd1e8f0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLot/ddrequestLots.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLot",
								"ddrequestLots.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentGateways/paymentGateways",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a81d694c-469a-448d-82f0-db6ed6a1898f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentGateways/paymentGateways.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentGateways",
								"paymentGateways.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentScheduleTemplates/paymentScheduleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70fd353c-226b-42c3-9bab-699ea423e41f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentScheduleTemplates/paymentScheduleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentScheduleTemplates",
								"paymentScheduleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/genericWorkflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ead4317c-2dd1-48bd-b95e-09373e42c3da",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/genericWorkflows.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"genericWorkflows.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/workflowInstanceHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2269827-0a39-4bf5-8536-ba609b8b8383",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/workflowInstanceHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"workflowInstanceHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/accountingCodes/accountingCodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d8ba9a0-cb18-46f1-bcc0-765c28fe4e6b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/accountingCodes/accountingCodes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"accountingCodes",
								"accountingCodes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/generalLedgers/generalLedgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a340bf6e-c761-4348-8358-15c629e17426",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/generalLedgers/generalLedgers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"generalLedgers",
								"generalLedgers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueRecognitionRules/revenueRecognitionRules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5b1c31b-ed63-42ba-a76d-b8007d988e37",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueRecognitionRules/revenueRecognitionRules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueRecognitionRules",
								"revenueRecognitionRules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueSchedules/revenueSchedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efb0b9c3-9eee-4e44-99d5-e356718c3c5a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueSchedules/revenueSchedules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueSchedules",
								"revenueSchedules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtracts/reportExtracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23b3f514-7b88-4fcf-840b-510a51345ac2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtracts/reportExtracts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtracts",
								"reportExtracts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtractHistories/reportExtractHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23c4f9c5-d2f5-418d-9997-0ae83e8f6fb3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtractHistories/reportExtractHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtractHistories",
								"reportExtractHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/accountingWriting/accountingWritings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "999d152f-6223-44eb-b6b3-1eebfd9d1452",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/accountingWriting/accountingWritings.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"accountingWriting",
								"accountingWritings.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measurableQuantities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9165670-92d0-426c-a599-f0b03a1a743a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measurableQuantities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measurableQuantities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measuredValueDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d42c848d-454a-4960-9b84-58059879f691",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measuredValueDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measuredValueDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/charts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8537dfe0-c323-473f-af68-57881bd14a9f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/charts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"charts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/jobInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43a899d0-cbc9-4e71-adce-1e7ce6d183f6",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/jobInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"jobInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/timerEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1509d9ac-5a3e-4d03-8f88-173c5603e3d0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/timerEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"timerEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoInstance/meveoInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2794f5e6-bb2b-44d9-88d2-da44fa418767",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoInstance/meveoInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoInstance",
								"meveoInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/module/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41a80b86-d37a-45c6-b101-2fa0de50f22f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/module/modules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"module",
								"modules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/customEntities/customizedEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6381d003-41d3-4cee-b0af-046258110ff3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/customEntities/customizedEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"customEntities",
								"customizedEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstanceCategories/scriptInstanceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f60f99ac-afa8-47b2-bf4c-889bb1bf1149",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstanceCategories/scriptInstanceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstanceCategories",
								"scriptInstanceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstances/scriptInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c934d98e-0d53-4338-b35c-724d91011b3b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstances/scriptInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstances",
								"scriptInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/filters/filters/filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78e59a92-556a-4104-9cf9-04c6c2d67e6b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/filters/filters/filters.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"filters",
								"filters",
								"filters.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4476c4c-be3c-4eaf-8b16-0904f4acced5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/webHooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b24eeb0-6833-4e9b-a368-45493d2cf65a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/webHooks.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"webHooks.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/emailNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "118d527e-697f-41bc-970d-f63d958fb190",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/emailNotifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"emailNotifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/jobTriggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb54d200-6442-4a75-8301-39fc1bba0379",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/jobTriggers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"jobTriggers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notificationHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2653cbe2-8d82-4580-9d1a-d72490474e5a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notificationHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notificationHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/inboundRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b02ac80e-5d65-4b95-a249-15b08bd56b9c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/inboundRequests.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"inboundRequests.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/import",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f512ff5-e472-4669-b528-497b4785edc2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/import.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"import.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/export",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecd3dbfb-0743-4320-ac3f-8e87217980c7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/export.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"export.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25282704-c828-4100-8a7f-8b49642a23c3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditConfiguration.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditConfiguration.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36955fc9-5924-4483-af24-73ccf877d336",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditLogs.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditLogs.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/cache/caches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ccddaba-7a26-4547-9d85-b6e84c0d7823",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/cache/caches.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"cache",
								"caches.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/fullTextSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "afe00155-6261-4c43-b0ff-544407217735",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/fullTextSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"fullTextSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06570f8c-b003-4348-8be9-ff0770973df3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"index.jsf"
							]
						}
					},
					"response": []
				}
			],
			"description": "This will run a GET on the admin pages and check if a proper status 200 is returned. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1673f588-42d2-4b5d-910a-29b3e2c4d1ca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "012bfe87-73e5-4f1c-ad5f-758a7f849c9e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios",
			"item": [
				{
					"name": "Setup Base Data",
					"item": [
						{
							"name": "Cleanup data - clear customizations",
							"item": [
								{
									"name": "Clear Seller Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b8550c8-a291-4817-9bf5-57fee4571e3c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.admin.Seller\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68d0e76a-2a6b-4597-b42d-f1a516c63ff7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Customer\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6edf132-0fc8-48fe-b724-0854f2f2d15d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.CustomerAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "060bc7df-36f3-4d3d-893a-30114fb2d209",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear User Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "564bf970-8e8c-407c-843c-3531cf4c47d4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.UserAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Subscription Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "417e1359-2825-4894-a2d5-e6e5685bfe2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Subscription\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Access Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44e6898c-b2a2-417a-b11a-9f65bb9cf4f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.mediation.Access\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Provider Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "431d7c2b-b6f6-4591-a8bd-474749b58376",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Provider\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af81a4c1-acaa-451e-9398-5455a66faf31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ProductTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Instance Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e43ca1c8-4129-4da1-826a-a0821a996e3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.ProductInstance\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Service Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae9df29c-8dbd-42b1-9aae-65afb3a94ce6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ServiceTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Offer Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b917b2b-0b6c-4f09-8931-97b6e2cff149",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.OfferTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Charge Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f72afb66-a2ba-4e19-881e-9b486e3359a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ChargeTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Price Plan Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78517dd3-0f3c-43df-a79e-335995f3f2a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.PricePlanMatrix\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Category Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2a0df4e-e642-4f42-b5ae-ab64dd9adfe0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice SubCategory Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56a2973b-aba5-48e5-9b9e-52c9cb3fdef4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.AccountOperation\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Account Operation Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb50d9fd-9a9e-4695-971a-cc21c7016e5f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceSubCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c3cebef-70cc-4401-bd0f-b7f56744f292",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Invoice\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Tax Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a0b842a-f8af-48f7-83ec-1f2a32d04632",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Tax\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Cycle Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66d58219-00b6-4274-9f98-e973dfef3ec8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingCycle\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Purge Job Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17ef2a18-7306-4511-a9ba-316a8229b92f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.admin.job.PurgeJob\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - restore provider and configuration",
							"item": [
								{
									"name": "Update provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45c35831-539a-40c5-902b-4838615a4227",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"demo\",\r\n    \"currency\": \"AFA\",\r\n    \"country\": \"AD\",\r\n    \"language\": \"DEU\",\r\n    \"multiCurrency\": \"true\",\r\n    \"multiCountry\": \"true\",\r\n    \"multiLanguage\": \"true\",\r\n    \"enterprise\": \"true\",\r\n    \"levelDuplication\": \"false\",\r\n    \"rounding\": \"8\",\r\n    \"invoiceRounding\": \"2\",\r\n    \"prepaidReservationExpirationDelayinMillisec\": \"60000\",\r\n    \"bankCoordinates\": {\r\n        \"bankCode\": \"SGMB\",\r\n        \"branchCode\": \"12345\",\r\n        \"accountNumber\": \"33333333333\",\r\n        \"key\": \"11\",\r\n        \"iban\": \"11\",\r\n        \"bic\": \"11\",\r\n        \"accountOwner\": \"owner\",\r\n        \"bankName\": \"SGMB\",\r\n        \"bankId\": \"11\",\r\n        \"issuerNumber\": \"1111\",\r\n        \"issuerName\": \"DEMO\"\r\n    },\r\n    \"recognizeRevenue\": \"false\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"false\",\r\n        \"displayProvider\": \"false\",\r\n        \"displayCfAsXML\": \"false\",\r\n        \"displayPricePlans\": \"false\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayBillingCycle\": \"false\",\r\n        \"displayFreeTransacInInvoice\": \"true\",\r\n        \"displayOrders\": \"false\",\r\n        \"displayWalletOperations\": \"false\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edfcdd84-0fa9-4cdc-b5a5-c5fe6af92d15",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"secured.entities.enabled\",\r\n\t\"value\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "365863d7-3388-446d-9158-0747926a88d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"service.allowMultiInstantiation\",\r\n\t\"value\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - user and ES",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dd3e7f5-a2c7-4161-88ac-e67dba62939e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{opencell.username}}\",\r\n    \"password\": \"{{opencell.password}}\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\"administrateur\"],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean and reindex Full text - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cd14484-61e9-4b4f-a3f8-dc44e9d3b00a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/reindex",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"reindex"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Configuration: InvType, BC and Seller",
							"item": [
								{
									"name": "Create InvoiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c182358f-3dfb-4c4d-91ee-8a559d0f86df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_TEST-Type\",\r\n\t\"description\": \"Invoice Test Type\",\r\n\t\"occTemplateCode\": \"INV_STD\",\r\n\t\"sequenceDto\": {\r\n\t\t\"prefixEL\": \"Fact_\",\r\n\t\t\"sequenceSize\": \"9\"\r\n\t},\r\n\t\"matchingAuto\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be9c628e-c69f-4c1a-bd58-ba65fceee4de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_1\",\r\n\t\"description\": \"Monthly Invoice Cycle 1\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"invoiceTypeCode\": \"{{baseEntityPrefix}}_TEST-Type\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7928d6cf-7339-4157-bebf-0b63f7a8f77a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_3\",\r\n\t\"description\": \"Monthly Invoice Cycle 3\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"dueDateDelayEL\": \"#{ba.id + invoice.billingAccount.id}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40d7c663-cf9c-49eb-8213-12c41b3f265d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    {\r\n    \t\"code\": \"SELLER_FR\",\r\n    \t\"description\": \"France Seller\",\r\n    \t\"currencyCode\": \"EUR\",\r\n    \t\"languageCode\": \"FRA\",\r\n    \t\"parentSeller\": \"MAIN_SELLER\",\r\n    \t\"invoiceTypeSequences\": {\r\n    \t\t\"{{baseEntityPrefix}}_TEST-Type\": {\r\n    \t\t\t\"prefixEL\": \"SellFact_\",\r\n    \t\t\t\"sequenceSize\": 9,\r\n    \t\t\t\"currentInvoiceNb\": 9\r\n    \t\t}\r\n    \t}\r\n    }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update InvoiceType COM Sequence",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "294c7293-dbf4-4ff1-88d3-d165815c3ad9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"COM\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"COM_\",\n        \"sequenceSize\": \"9\"\n    },\n    \"matchingAuto\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Catalog: Charges, Services, Offer, PP, Counters, Wallets",
							"item": [
								{
									"name": "Create Tax Class 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c27f9310-5c69-4bd2-9aa0-9e38fbe8d876",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90b64358-f122-4d5d-8db1-5972ead80110",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass2\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}} 2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69198b10-6880-4ae6-982d-fc9b57441d33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountTaxCategoryCode\": \"Tax category\",\r\n    \"chargeTaxClassCode\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"taxCode\": \"TAX_18\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxMapping/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxMapping",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Category 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d7cd45f-2558-4535-8119-6fbc51d1c369",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\":\"{{baseEntityPrefix}}_taxCategory2\",\r\n\t\"description\":\"Tax category 2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create PrepaidWallet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ec46385-5f6f-4954-8913-94e558fdb5bd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PPW1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PrepaidPWallet_Description\",\r\n\t\"walletType\": \"PREPAID\",\r\n\t\"consumptionAlertSet\": \"false\",\r\n\t\"fastRatingLevel\": \"1\",\r\n\t\"lowBalanceLevel\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/template/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"template",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Counter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1d71c80-8652-4064-af04-c08bb97ff371",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CounterTemplate_Description\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"unity\": \"Quantity\",\r\n\t\"type\": \"USAGE\",\r\n\t\"ceiling\": \"1\",\r\n\t\"disabled\": \"false\",\r\n\t\"counterLevel\": \"BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create TriggeredEDR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a93108a-f473-4745-9e67-4703f77e5252",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_EDR1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_Triggered_EDR_DESC\",\r\n\t\"quantityEl\": \"#{op.amountWithoutTax}\",\r\n\t\"param1El\": \"#{edr.parameter1}\",\r\n\t\"param2El\": \"#{edr.parameter2}\",\r\n\t\"param3El\": \"#{edr.parameter3}\",\r\n\t\"param4El\": \"#{edr.parameter4}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"triggeredEdr",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b3fe338-4ea2-4074-a17c-272f17c7e5b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n\t\"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "475256a9-7a21-4e81-a234-23be4234d64c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dfb07f7-4fc3-4dba-bb11-2958ef5d6cae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Termination Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"TERMINATION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7a685f7-8380-4153-be74-fedaf83311e2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"true\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}s-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"OTHER\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1435815-f7be-4cf3-b5c5-e09b8b9e82d1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('{{baseEntityPrefix}}_USAGE1')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d0db116-c0f3-460a-9d20-61b77a610a4c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateTerminations\": {\r\n\t\t\"serviceChargeTemplateTermination\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OST1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c14ee7c8-c793-44f7-83ed-c247f428a090",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"description\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"invoicingCalendar\": \"MONTHLY\",\n    \"serviceChargeTemplateRecurrings\": {\n        \"serviceChargeTemplateRecurring\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_REC1\"\n            }\n        ]\n    },\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "323f2e13-9a92-4a32-b16e-ea162bdcbb93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3363569-e7ba-4406-9f0e-f547546db95d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 2 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70785e3d-a524-48a6-9d19-aa5c58296427",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT1 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n\t\t{\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a18ea5c1-f4fe-4596-a419-a0d399c2aa4c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n        {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70dc8bb4-965f-4354-9eec-0fc58e805eef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\"\r\n            }\r\n        }\r\n    ],\r\n    \"offerProductTemplate\": [\r\n        {\r\n            \"productTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1845eca6-519e-44ad-a439-99bdecf6530c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.rating.RatingScript\",\n    \"description\": \"rating script\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.rating;\\r\\n\\r\\nimport java.math.BigDecimal;\\r\\nimport java.util.Map;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.billing.WalletOperation;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\npublic class RatingScript extends Script {\\r\\n\\r\\n    private static final Logger log = LoggerFactory.getLogger(RatingScript.class);\\r\\n\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.debug(\\\"Rating script creation script...\\\");\\r\\n        // DO not change any amount, as it is untestable\\r\\n        //WalletOperation op = (WalletOperation) context.get(Script.CONTEXT_ENTITY);\\r\\n        //op.setAmountWithoutTax(op.getAmountTax().add(BigDecimal.ONE));\\r\\n    }\\r\\n}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18d060e8-d28e-4bd1-b539-7726b334482e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"scriptInstance\": \"org.meveo.service.script.rating.RatingScript\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f35f6b5b-1021-4d61-bccd-38ec5265eedf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46da79db-d861-4de0-8259-cb71cf1ae103",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"amountWithoutTax\": \"21\",\r\n\t\"amountWithTax\": \"25\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb5d1b4c-aea6-457f-971d-a70f137dd795",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\",\r\n\t\"woDescriptionEL\": \"#{\\\"Special \\\".concat(op.description)}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d71514e-8a8f-45b1-a302-8f629c1cf520",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"amountWithoutTax\": \"9\",\r\n\t\"amountWithTax\": \"14\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1 in Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35d38882-c37a-4639-9e64-67765cc175a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP2\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"0.5\",\r\n\t\"amountWithTax\": \"0.6\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c9f3075-0b8d-4ef6-a1f8-173992272c4e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b2f4244-9926-4524-a501-d8f89c2d63ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC2_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\"amountWithoutTax\": \"5\",\r\n\t\"amountWithTax\": \"6\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reccuring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3db6d8d3-745b-4a71-bcf3-0288ab93279c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bc668da-89e1-46af-9ed6-19155668cb5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6464eaf-8dbb-442f-99ad-1b0c2617b129",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aab4f09f-efde-4233-b7d3-2167a6b21093",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974a5261-c4ec-42be-999d-0bc343850b9b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n} ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6619b085-c6d6-4500-a968-84c0e171b02f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE3\",\r\n\t\"priority\": \"2\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('NO_MATCH')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78b2b7d0-ee65-4d65-8564-9e93b331ff84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc7759b7-bd54-498e-a552-b27f57269e65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cca73e4-dc8e-4197-b9f2-3031a7647057",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        \r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20e71b9a-094a-463d-bd72-e63cdac14ffc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "073bf57a-4dbe-4a9c-be37-902a0546ed9d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Usage 1 in Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78844da7-7a94-4b4b-906f-40a86e1304c9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"0\",\r\n\t\"amountWithTax\": \"0\",\r\n\t\"priority\": \"0\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot OS3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e15aee2-aad8-4b02-88a2-9ae11d9fc44d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0e3ad64-9889-41a0-b188-bc8c657822fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f418519-3968-477f-8b4a-751353560494",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Bundle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b0441d2-4bcb-4c2c-b41e-d185654e7dea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BUNDLE1\",\r\n    \"description\": \"Bundle 1\",\r\n    \"productChargeTemplates\": {\r\n        \"productChargeTemplate\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_PC2\"\r\n            }\r\n        ]\r\n    },\r\n    \"bundleProducts\": {\r\n        \"bundleProduct\": {\r\n            \"productTemplate\": [\r\n                {\r\n                    \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/bundleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"bundleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - WEB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b0474d9-bc62-43da-8b2f-be6de0bdc248",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - SOCIAL_MEDIA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3d5b534-9ca1-448f-b024-9bb254ebc9e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - SOFTWARE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f12227e5-392b-443a-875d-332a47811576",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - DISK_SPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2275b7ac-e35f-4574-a571-ec19b40e3477",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Customer accounts, subscription, access",
							"item": [
								{
									"name": "Create Customer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb472e92-bd58-4c5e-be8c-66d6949f75ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f4dc001-043b-481a-a8b4-5b59eb2551b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41f6052b-4c01-4fe4-a336-5cc64bc4bd73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f7bc7a-56ee-492f-b01d-f7a816e80998",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9c7f2fa-4932-4162-9fef-f0284ea7606b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10b917fa-0601-4a5b-8735-083230e5b640",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e76ad7a-7a15-4ca4-905f-1540d4c16a50",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95b8247b-c6d6-4fe4-9353-e18fa22e2a71",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c52692d-a6a8-4466-85dc-d952cd5ad8a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"billingCycle\": \"CYC_INV_MT_3\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18595963-7f71-4358-b625-9d1e74de8e3a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cdbf31c-f760-4d47-80cc-305b6706b7ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dad27d14-429b-4dd0-b5a6-86f91414e193",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63bfe144-be85-42ec-935a-227de52e5cce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"description\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32ce6c6f-0037-44f1-b8ed-cb2f2f2c9fa4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_ACCP\",\r\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"startDate\": \"2016-06-01\",\r\n    \"endDate\": \"2016-06-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Administration: Measurable Qtt,Charts, Notifications, etc..",
							"item": [
								{
									"name": "create MeasurableQuantities",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3445e193-ef01-47eb-abf1-c0e7fe55698a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_MQ1\",\r\n    \"description\": \"{{baseEntityPrefix}}_MQ1-DESC\",\r\n    \"dimension1\": \"1\",\r\n    \"dimension2\": \"2\",\r\n    \"dimension3\": \"3\",\r\n    \"dimension4\": \"4\",\r\n    \"editable\": \"false\",\r\n    \"additive\": \"true\",\r\n    \"sqlQuery\": \"select count(*) from billing_subscription where status='CREATED' and date(created)='#{date}'\",\r\n    \"measurementPeriod\": \"MONTHLY\",\r\n    \"lastMeasureDate\": \"2016-03-16\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/measurableQuantity",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"measurableQuantity"
											]
										}
									},
									"response": []
								},
								{
									"name": "create BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4197a3e-7f5a-4225-bc90-4ad182d1338a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_BarCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"100\",\r\n    \"height\": \"100\",\r\n    \"style\": \"test1\",\r\n    \"styleClass\": \"test1\",\r\n    \"extender\": \"test1\",\r\n    \"visible\": \"true\",\r\n    \"legendPosition\": \"n\",\r\n    \"barPadding\": \"100\",\r\n    \"barMargin\": \"100\",\r\n    \"orientation\": \"vertical\",\r\n    \"stacked\": \"true\",\r\n    \"min\": \"100\",\r\n    \"max\": \"100\",\r\n    \"breakOnNull\": \"false\",\r\n    \"xaxisLabel\": \"test\",\r\n    \"yaxisLabel\": \"test\",\r\n    \"xaxisAngle\": \"10\",\r\n    \"yaxisAngle\": \"10\",\r\n    \"legendCols\": \"20\",\r\n    \"legendRows\": \"20\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"true\",\r\n    \"showDataTip\": \"true\",\r\n    \"datatipFormat\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/bar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"bar"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c10239bc-1423-4142-8126-377efe54f0b0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PieCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"123\",\r\n    \"height\": \"123\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"style_class1\",\r\n    \"extender\": \"extender1\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"n\",\r\n    \"diameter\": \"120\",\r\n    \"sliceMargin\": \"10\",\r\n    \"shadow\": \"true\",\r\n    \"showDataLabels\": \"false\",\r\n    \"legendCols\": \"23\",\r\n    \"legendRows\": \"23\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/pie",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"pie"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3a1d9bd-ca23-4e49-b7d3-552ce9ab08ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_LC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_LineCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"200\",\r\n    \"height\": \"200\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"styleClass2\",\r\n    \"extender\": \"extender3\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"w\",\r\n    \"shadow\": \"true\",\r\n    \"minX\": \"45\",\r\n    \"maxX\": \"45\",\r\n    \"minY\": \"45\",\r\n    \"maxY\": \"45\",\r\n    \"breakOnNull\": \"true\",\r\n    \"xaxisLabel\": \"label 1\",\r\n    \"yaxisLabel\": \"label 2\",\r\n    \"xaxisAngle\": \"12\",\r\n    \"yaxisAngle\": \"12\",\r\n    \"stacked\": \"true\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"false\",\r\n    \"showDataTip\": \"false\",\r\n    \"datatipFormat\": \"false\",\r\n    \"legendCols\": \"56\",\r\n    \"legendRows\": \"56\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/line",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"line"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c057732-444e-4452-887e-f1b61f4eedee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\n    \"description\": \"{{baseEntityPrefix}}_Script_Instance\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\r\\n            import java.util.Map;\\r\\n            import java.math.BigDecimal;\\r\\n            import org.meveo.admin.exception.BusinessException;\\r\\n            import org.meveo.model.admin.User;\\r\\n            import org.meveo.model.crm.Provider;\\r\\n            import org.slf4j.Logger;\\r\\n            import org.slf4j.LoggerFactory;         \\r\\n            public class {{baseEntityPrefix}}_Script extends Script {             \\r\\n                private static final Logger log = LoggerFactory.getLogger({{baseEntityPrefix}}_Script.class);\\r\\n                public void execute(Map<String,Object> context) throws BusinessException{\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script...\\\\\\\");\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script.\\\\\\\");\\r\\n                }\\r\\n            }\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "583faa5d-3ce2-43df-a99a-efdd8d26dffc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Notification1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Webhook",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7066479d-43f1-4a07-99d0-0030acaf8336",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_WebHook1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"host\": \"localhost\",\r\n    \"port\": \"8080\",\r\n    \"page\": \"meveo/api/rest/\",\r\n    \"httpMethod\": \"HTTP_GET\",\r\n    \"username\": \"test.username\",\r\n    \"password\": \"test.password\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2b03e4b-801f-4876-8db5-07563c3e10a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_EmailNotif1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"emailFrom\": \"OpenCell\",\r\n    \"emailToEl\": \"edward.legaspi@opencellsoft.com\",\r\n    \"subject\": \"Test Meveo Application\",\r\n    \"body\": \"Test Body\",\r\n    \"htmlBody\": \"HTML Body\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3242de0-e97a-437d-bc94-d77398161221",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Timer_DESCP\",\r\n    \"hour\": \"1\",\r\n    \"minute\": \"10\",\r\n    \"second\": \"45\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae7246c9-cf88-4695-a10c-e7f27cda4d12",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"ExportSubscriptionsJob\",\r\n    \"code\": \"{{baseEntityPrefix}}_ImpExp-Job1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Import-Export\",\r\n    \"timerCode\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"jobCategory\": \"IMPORT/EXPORT\",\r\n    \"followingJob\": \"ACCO_JOB\",\r\n    \"parameter\": \"param1\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8352a1a-c7ae-4816-ab3b-2d44d0ea3cee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Filter1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Filter1_DESCP\",\r\n    \"shared\": \"false\",\r\n    \"inputXml\": \"<filter>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n      <primitiveFilterCondition>\\n        <filterConditionType>PRIMITIVE</filterConditionType>\\n        <fieldName>startRatingDate</fieldName>\\n        <operator>>=</operator>\\n        <operand>date:01/09/2015</operand>\\n      </primitiveFilterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n  <primarySelector>\\n    <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n    <alias>p</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>eventCode</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n</filter>\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Hourly",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b242476d-9262-431a-a6b6-1e6d4a6f5117",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Hourly\",\r\n    \"description\": \"Hourly\",\r\n    \"hour\": \"*\",\r\n    \"minute\": \"0\",\r\n    \"second\": \"0\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create GDPR JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8f802f8-1d12-4ced-a74b-35914d67edf6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jobTemplate\": \"GDPRJob\",\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobCategory\": \"DWH\",\n    \"active\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Daily - Midnight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25b55647-9647-429b-8621-797353283cac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Daily-midnight\",\r\n    \"description\": \"Daily-midnight\",\r\n    \"hour\": \"23\",\r\n    \"minute\": \"59\",\r\n    \"second\": \"59\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PaymentSchedule Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "239884e0-b6bc-4225-8a89-e7d76bfed454",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"PaymentScheduleProcessingJob\",\r\n    \"code\": \"PaymentSchedule_Job\",\r\n    \"description\": \"PaymentSchedule_Job\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup TerminationReason",
							"item": [
								{
									"name": "update TERM_REASON_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3389470-0382-4ca5-8161-3b05c4e2bde3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_1\",\r\n    \"description\": \"Agreement Reimbursement Charge\",\r\n    \"applyAgreement\": \"true\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71faf60f-76aa-4bb8-b6d8-2c2eb68a898e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_2\",\r\n    \"description\": \"Reimbursement\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb16e7c8-4b39-45cf-a393-0a9631aee004",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_3\",\r\n    \"description\": \"Charge\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"false\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service workflow",
					"item": [
						{
							"name": "Service workflow - service multi activation",
							"item": [
								{
									"name": "SET_VARIABLES",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "30ffc440-347a-4f34-b089-4f21c870018e",
												"exec": [
													"pm.globals.set(\"index\", 240);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3a7383c9-6548-438f-8b5f-9edc8e0314a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://postman-echo.com/",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Set service.allowMultiInstantiation=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50eaefab-a58d-4f51-9c10-42c41d979575",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"service.allowMultiInstantiation\",\r\n\t\"value\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1011d368-5c94-4155-b362-b95cde87be1e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b905fb2e-1827-4e86-8672-5392179dbb10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69744f0d-986f-4939-9b62-615672fabc6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3abfd617-f443-4fd7-8212-b59c8f886a79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(3);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1481414400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1]).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f380224-afe8-4242-a017-d04e8e344185",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4245ad31-fff1-4036-bdcc-12bd7f2f5157",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36ae1988-51e7-4123-8df4-dbe4c63f53eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.quantity).to.eql(1);",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "386557c5-eb0a-464f-982f-db31984f5099",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5832ef04-b788-41cf-9851-f6e5ff31ccc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - change quantity and subscription date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0924a73-4ed0-432e-bdc4-678d3f78f909",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2016-12-08\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "549ed53a-a178-4880-8e06-64b8c184f212",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.eql(1481155200000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1 A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26117c23-6bd4-4ed5-a178-ed84b592befc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2787cd7-2247-4745-bacb-55dff7adf8c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"11\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - no changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57a17597-2e6e-4bba-89e6-22b0f5ef08b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1d259e0-2d8d-4dd2-a0e9-baca169bf666",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid3\", jsonData.subscription.services.serviceInstance[2].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.eql(1481155200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationDate).to.eql(1481155200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid4\", jsonData.subscription.services.serviceInstance[3].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].quantity).to.eql(11);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].subscriptionDate).to.eql(1481414400000);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75d369c4-893d-4fb7-8cd6-9fd03d8f6113",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"More than one service instance with status [] was found. Please use ID to refer to service instance.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "822c70e3-cf7c-474c-b63c-6097b54a28fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"TERMINATED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8809b54-2ceb-47e4-9bd6-ab7873f2db07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"serviceIds\": [{{siid4}}],\r\n\t\"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"terminationReason\": \"TERM_REASON_1\",\r\n\t\"terminationDate\": \"2016-12-31\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "710b5afc-36fc-4aad-9783-0e0c5fd28f71",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].id).to.eql(pm.globals.get(\"siid4\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64ee198b-3256-4c7c-b012-bebda2f87f93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f35f7935-0fec-4051-b041-dcad68a172bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service workflow - service single activation",
							"item": [
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4cf1482-299d-4dcd-9c0b-903a6784573f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"service.allowMultiInstantiation\",\r\n\t\"value\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6c38ddf-c37b-4b52-9639-0c66d9a7ab05",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85c8761d-a557-40a0-b160-3117e4110970",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-12-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69f8bb69-95cb-410f-b68e-b54da4c48857",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"3\",\n                \"subscriptionDate\": \"2016-12-11\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription I",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbe24f8e-4d24-4821-b613-eecd870611d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480550400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ddc42cf-54e0-401e-aa7b-90c705139af3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b973814-97e6-4371-ac1a-79ca1cc89a1a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08bc412a-912a-44d3-a829-763c3d8887bb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33205ea4-d147-4816-95f1-92869c497fe0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4f5a192-927e-436c-b2f9-423afb79d71a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\"quantity\": \"5\",\r\n\t\t\t\"subscriptionDate\": \"2016-12-08\"\r\n\t\t}\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3c0b557-625e-4ac6-a77f-a52f4d7c9968",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9b6d350-e588-4dd0-9ba1-6a2fb9ba598c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIds\": [\n        \"{{siid1}}\"\n    ],\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2016-12-31\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c52eb5bd-9d1c-41fe-8884-6eff6eee71cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "416d3c18-5610-406f-a7d0-da5c82988141",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_3\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "081b562b-19c9-4e97-bfe7-ffe8d93f9256",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription workflow",
					"item": [
						{
							"name": "Terminate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9310d835-7472-4d03-a41c-2135826bcd24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45b21b85-3093-4a6d-a8e6-0bc82b776224",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1c48c2d-89a1-4ffd-a985-2e26d483a132",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1456790400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1422835200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1427846400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "783e4564-71f6-4643-a1af-60b4cf8f8b75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-04-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a32ef124-769e-4a30-a0ec-6d7faecd3161",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1456790400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1422835200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1427846400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89ff0be9-f399-4fc5-ae03-a191571728a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91406cb2-9f82-41e6-bba1-8003ab30c13c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82fd5c37-7e02-4eea-8809-c877bc2cca65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"RECURRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "958ff10f-867f-45d6-815d-5546af5816da",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{terminationDate}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b7f1b00-410f-4ad7-99d3-5f6cd4e946e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44b18c73-97c7-43d0-9bc0-bebe0674ef2f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e006614-76fd-464e-85ea-bad2caa5f6c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{5daysBefore}}\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{2daysBefore}}\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ffc5f2c-fcfc-406c-b4fb-4bfa966cd3df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - before Subscription's subscription date -KO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1460d95-db57-4e2f-b2c4-f571dfff0f1c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Termination date can not be before the subscription date\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{20daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - on Subscription's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f88ea50-b12f-4e9c-a838-abbc4cfd21a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9205b35-1ca4-4d86-bec3-338a7e8e38ad",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16480547-7c60-4a07-ba39-030a56086e4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50f9f0fe-35e6-424c-84d0-f72e8e215505",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{5daysBefore}}\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{2daysBefore}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f2e107a-6379-421d-baa2-6083726cda6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days 2 termination - inbetween service's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7879ac44-ad90-439f-84aa-0bea52fa2bc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{3daysBefore}}\"\r\n}\r\n\t",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15bd056f-b1e5-4ff3-863b-bc3230127a89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"3daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(new Date(pm.globals.get(\"3daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9058982-3ad0-4ef0-a2f2-0bd9fe0bee67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeac3b8b-f55b-40bc-aa4e-64e1892b938d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_3\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1f53ab3-a83e-4eb1-b25c-35dd229f686a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3cd1ae9-3488-4908-87ab-0a17b71a5db2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3ac6c6d-fca4-44ca-90e8-781281e05b6f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b721f1f7-7217-4081-aca0-3632310daf9f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_4\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"FIXED\");",
													"    pm.expect(jsonData.subscription.renewalRule.autoRenew).to.eql(false);",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.renewalRule.extendAgreementPeriodToSubscribedTillDate).to.eql(false);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ApplyOneShotChargeInstance",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9deeba99-7e46-476b-878d-210180f13d4f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daeab543-6f33-4dee-ad3c-bb3c87073473",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "applyOneShotChargeInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "523c4203-1887-46ef-8c24-ab0b1961a22e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS1\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\n    \"createWallet\": false,\n    \"operationDate\": \"2016-04-06\",\n    \"quantity\": \"1\",\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"13\",\n    \"criteria1\": \"criteria1\",\n    \"criteria2\": \"criteria2\",\n    \"criteria3\": \"criteria3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription instantiate/activate service NOT in Offer and modify offer in subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53f28d7d-7b0f-4f87-a9a7-f469d426c763",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create service with min req Vals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f71f14dd-d4e6-4bea-9fb9-0178dd13f34e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n    \"invoicingCalendar\": \"Multi period\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a26617e8-d4d9-4a76-9d6b-6741f05a8908",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Service \"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE is not associated with Offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f916076-cc11-4a06-9543-7509377b57bb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"No offerServiceTemplate corresponds to \"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79559d40-7525-43cb-b05d-82afb3f7b401",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "082e4090-7492-4634-b831-d5b57ed981ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6e7833d-baf1-40fa-8037-8308db222a1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot change the offer of subscription once the services are instantiated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Apply Product",
							"item": [
								{
									"name": "Create CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eef1e663-c476-4e90-925e-0809dae3eb2d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2257367-a211-40b1-990d-bfe5e76a69e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product charge100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65f3979b-28b8-4ad0-9e65-6b85d2edf27e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": false,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 100 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6aaa5037-4c4c-48b3-90dc-5d1aa50ae13b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n    \"name\": \"{{baseEntityPrefix}}_PRODUCT100 NAME\",\r\n    \"productChargeTemplate\": [\r\n        {\r\n            \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n            \"invoiceSubCategory\": \"SUB_DATA\",\r\n            \"disabled\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ddf04f1-879e-4163-94f0-d64790470e8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100_PP\",\r\n    \"description\": \"price plan product 100\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"6\",\r\n    \"priority\": \"1\",\r\n    \"amountWithoutTaxEL\": \"#{mv:getInheritedCFValue(productInstance,'{{entityPrefix}}_{{index}}_CF_PROD_PRICE100')}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85ba1b0d-76d4-4d81-9d70-92f88f768aa9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f47984e-e1e6-494e-b6c2-23e400b3477d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df054ff0-e74b-4161-bb04-45fc7004b572",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "329a7b4a-10b3-4c50-838d-d79ab88f8e5f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a176ba5-b701-4956-b12c-ab48adb88b61",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f095464-ae93-45e1-a4cb-6a4892723cbe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.2\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77bfe807-617e-4d1c-a80a-c833e2a282ad",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE100/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aef6edc6-442f-44a5-90e6-2e51a22ede20",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE101/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3acc0784-de55-42b1-b615-1d1ef8f99913",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var body = ",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_PROD\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.productInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_PRODUCT2\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_PROD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_PROD"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update service instance",
							"item": [
								{
									"name": "Create CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ea8935c-c324-414a-8009-54b181efd9a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ServiceInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9858b0bd-2cd9-46d7-b43c-4d420f7c0bf2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2017-03-15\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1e78d1c-f0b9-4dc1-b219-bc4d5ac6e152",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2581e941-e070-4bc5-9963-4d673a9482fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49baf75c-517c-410f-9fab-10e9392e2ab8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"endAgreementDate\": \"2017-03-29\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"201\"\n                    }\n                ]\n            }\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"endAgreementDate\": \"2017-03-30\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"202\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription-Updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2d258d6-bc32-4125-a767-ec765319d388",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 1,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 2,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - change quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b71e6acb-dd3d-4868-80a3-f4e3a7974ee7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"quantity\": \"5\"\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"quantity\": \"7\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - Updated quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c435d545-0907-4e41-97b1-6d27b2a5dbcb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(jsonBody.code);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 5,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 7,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9f019d5-3041-4853-8a0c-70a23587639a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_SERV_UPD_100/ServiceInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100",
												"ServiceInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32f9f4a2-8f4b-4d3b-ad23-a0dff832348e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2a0b26a-4efb-4b33-9de5-05f3ade82b55",
												"exec": [
													"var today = new Date();\r",
													"var terminationDate = new Date();\r",
													"terminationDate.setMonth(today.getMonth() + 5);\r",
													"\r",
													"\r",
													"pm.globals.set(\"testCase.terminationDate\", terminationDate.toISOString().slice(0, 10));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"terminationDate\": \"{{testCase.terminationDate}}\",\n            \"terminationReason\": \"TERM_REASON_1\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26669740-4087-4169-9257-9256aa11478e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.serviceInstances[0].code).to.eql(jsonBody.serviceInstances[0].code);",
													"    pm.expect(jsonData.serviceInstances[0].quantity).to.eql(jsonBody.serviceInstances[0].quantity);",
													"    pm.expect(jsonData.serviceInstances[0].subscriptionDate).to.eql(jsonBody.serviceInstances[0].subscriptionDate);",
													"    pm.expect(jsonData.serviceInstances[0].terminationDate).to.eql(new Date(pm.globals.get(\"testCase.terminationDate\")).getTime());",
													"    pm.expect(jsonData.serviceInstances[0].serviceRenewal).to.eql(jsonBody.serviceInstances[0].serviceRenewal);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionStatus\": {\n        \"status\": \"SUCCESS\"\n    },\n    \"serviceInstances\": [\n        {\n            \"id\": 30,\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"description\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"subscriptionDate\": 1489536000000,\n            \"quantity\": 5,\n            \"serviceRenewal\": {\n                \"initialTermType\": \"FIXED\",\n                \"renewalTermType\": null,\n                \"initialyActiveFor\": null,\n                \"initialyActiveForUnit\": null,\n                \"calendarInitialyActiveFor\": null,\n                \"autoRenew\": false,\n                \"daysNotifyRenewal\": null,\n                \"endOfTermAction\": \"TERMINATE\",\n                \"terminationReasonCode\": \"TERM_REASON_1\",\n                \"renewFor\": null,\n                \"calendarRenewFor\": null,\n                \"renewForUnit\": null,\n                \"extendAgreementPeriodToSubscribedTillDate\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstances?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstances"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscribe to disable offer",
							"item": [
								{
									"name": "Disable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b076d14-a980-45e9-9e43-ce18c58b80a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/disable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"disable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b98d1455-f745-47ec-bd3b-ac973d187fd7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot subscribe to disabled offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dba33ee-8481-4c34-9b0f-e85533761aac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/enable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"enable"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Due date delay",
							"item": [
								{
									"name": "Find due date delay - bc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64de05b8-192c-4a1b-ae6a-1591c6c19ccd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData).to.deep.equal(jsonBody);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"dueDateDelay\": {\r\n        \"delayOrigin\": \"BC\",\r\n        \"computedDelay\": 2,\r\n        \"delayEL\": null\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode={{baseEntityPrefix}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c1ea1dd-59e8-411d-9ff1-b17830a7a146",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"CA_DELAY_{{index}}\",\r\n    \"description\": \"CA_DELAY_{{index}}\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"USD\",\r\n    \"language\": \"ENG\",\r\n    \"creditCategory\": \"PRO\",\r\n    \"dueDateDelayEL\": \"#{ba.customerAccount.auditable.created.date}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cb79c42-6c62-4793-8282-40c547ddee60",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"BA_DELAY_{{index}}\",\r\n    \"description\": \"BA_DELAY_{{index}}\",\r\n    \"customerAccount\": \"CA_DELAY_{{index}}\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"US\",\r\n    \"language\": \"ENG\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1749c41e-1278-4e39-844c-cad4c869e97c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"UA_DELAY_{{index}}\",\r\n    \"description\": \"UA_DELAY_{{index}}\",\r\n    \"billingAccount\": \"BA_DELAY_{{index}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daf81ab4-8dc8-497f-870c-2813f6709612",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DELAY_SUB_{{index}}\",\r\n    \"description\": \"DELAY_SUB_{{index}}\",\r\n    \"userAccount\": \"UA_DELAY_{{index}}\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2017-01-07\",\r\n    \"endAgreementDate\": \"2017-01-07\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find due date delay - ca",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4e826c1-ea49-4c70-a286-08c694de6709",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.dueDateDelay.delayOrigin).to.deep.equal(jsonBody.delayOrigin);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"delayOrigin\": \"CA\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode=DELAY_SUB_{{index}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "DELAY_SUB_{{index}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5f119e7-c261-4618-b5b0-d456aa9bb5f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"DELAY_SUB_{{index}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n                \"quantity\": \"10\",\r\n                \"subscriptionDate\": \"2017-05-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription age",
							"item": [
								{
									"name": "Create recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61042070-cad5-4e97-a7c8-7e7fe19088e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": true,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Subscription Age\"\r\n        }\r\n    ],\r\n    \"calendar\": \"MONTHLY\",\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"durationTermInMonth\": \"4\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef844d7f-953c-46bc-a814-47a866e8e053",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"invoicingCalendar\": \"MONTHLY\",\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e496fc3-7409-4241-8f62-e42041c4c434",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": false,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67ebabe0-a5e3-41f2-9138-94aad303fe1a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"10\",\r\n    \"priority\": \"1\",\r\n    \"minSubscriptionAgeInMonth\": \"5\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b8ce8fa-bb82-436d-ac95-ba3ffdcc5e8a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"15\",\r\n    \"amountWithTax\": \"30\",\r\n    \"priority\": \"1\",\r\n    \"maxSubscriptionAgeInMonth\": \"3\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a16ea79-d508-4e46-a516-92769d483923",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE1\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"2\",\r\n    \"amountWithTax\": \"4\",\r\n    \"priority\": \"2\",\r\n    \"minSubscriptionAgeInMonth\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d32c3f9d-c3b6-4c0a-97a0-afd8c93448b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e90e69af-70be-440e-9e94-1546209cabcb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f3d35e1-9115-402d-b886-07a59767e3a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-12-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0128d25-24b5-414b-b39d-a0a26cb9bcf0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-07-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7875fbec-bc75-45e2-9c76-67505af02db6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-07-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6c760d5-9300-4f5a-a079-ff9c5267bb5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-09-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Activate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de842bde-eae2-4cd7-ad1a-9590dc2193d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6425afea-f042-42c3-be28-61362de60d53",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dd00bc-03c6-499f-bcd9-b1782ff5568a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a46bb8f6-bfe2-4587-85c5-c5a42a52e26d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f3763d6-ca6e-436b-ae83-b5b3187b5d60",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51c64f14-07ca-4359-b6b7-336980354425",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION2",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription status notification",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccb64359-5d3a-46a6-906b-46cce948df5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"description\": \"rating script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.billing.Subscription;\\nimport org.meveo.model.billing.SubscriptionStatusEnum;\\nimport org.meveo.service.billing.impl.SubscriptionService;\\nimport org.meveo.service.script.Script;\\n\\nimport java.util.Map;\\n\\npublic class SubscriptionStatusUpdatedScript extends Script {\\n\\n    private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(\\\"SubscriptionService\\\");\\n\\n    @Override\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\n        log.info(\\\"<<<<<<< SubscriptionStatusUpdatedScript >>>>>>>>>>\\\");\\n        Subscription subscription = (Subscription) methodContext.get(\\\"subscription\\\");\\n        SubscriptionStatusEnum previousState = (SubscriptionStatusEnum) methodContext.get(\\\"previousState\\\");\\n        SubscriptionStatusEnum currentState = (SubscriptionStatusEnum) methodContext.get(\\\"currentState\\\");\\n        log.info(\\\"subscription.getCode() : \\\" + subscription.getCode());\\n        log.info(\\\"currentState : \\\" + currentState.name());\\n        log.info(\\\"previousState : \\\" + previousState.name());\\n        subscription.setDescription(\\\"from_\\\" + previousState + \\\"_to_\\\" + currentState);\\n        subscriptionService.update(subscription);\\n    }\\n} \"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "153ff674-68e4-49b1-bfb4-dd70828bfb4e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification\",\r\n    \"classNameFilter\": \"org.meveo.model.billing.Subscription\",\r\n    \"eventTypeFilter\": \"STATUS_UPDATED\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"scriptParams\": {\r\n        \"subscription\": \"#{event.entity}\",\r\n        \"previousState\": \"#{event.previousState}\",\r\n        \"currentState\": \"#{event.currentState}\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3c56cf3-e9c3-4d69-ba41-6bb641af9173",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c91bb8e-3951-46e3-a27b-0cb5f54045a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb4a3b33-50b1-47ec-97d8-61ca96c52441",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e713069-fbeb-492f-a4a2-888ba63c5135",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.subscription.description).to.deep.equal(jsonBody.description);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"description\": \"from_CREATED_to_ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5703c56b-ca27-4172-9726-c51cd1b3fdc9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "62199fac-1dcc-4afd-9792-da17e930c13f",
								"type": "text/javascript",
								"exec": [
									"var today = new Date();",
									"var terminationDate = new Date();",
									"var days20before = new Date();",
									"var days10before = new Date();",
									"var days5before = new Date();",
									"var days3before = new Date();",
									"var days2before = new Date();",
									"terminationDate.setDate(today.getDate() + 1);",
									"days20before.setDate(today.getDate() - 20);",
									"days10before.setDate(today.getDate() - 10);",
									"days5before.setDate(today.getDate() - 5);",
									"days3before.setDate(today.getDate() - 3);",
									"days2before.setDate(today.getDate() - 2);",
									"",
									"pm.globals.set(\"index\", 192);",
									"pm.globals.set(\"today\", today.toISOString().slice(0, 10));",
									"pm.globals.set(\"terminationDate\", terminationDate.toISOString().slice(0, 10));",
									"pm.globals.set(\"20daysBefore\", days20before.toISOString().slice(0, 10));",
									"pm.globals.set(\"10daysBefore\", days10before.toISOString().slice(0, 10));",
									"pm.globals.set(\"5daysBefore\", days5before.toISOString().slice(0, 10));",
									"pm.globals.set(\"3daysBefore\", days3before.toISOString().slice(0, 10));",
									"pm.globals.set(\"2daysBefore\", days2before.toISOString().slice(0, 10));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3cacd4c6-dfea-47d3-a25c-bba16e498b5e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription with Inherited CF",
					"item": [
						{
							"name": "Tests",
							"item": [
								{
									"name": "Create CFT for User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99551a3b-a239-44d6-a2ec-d8a8c454bf8b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"userAccountCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3831d49d-bf17-46b1-89df-d87216df24c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription - Not Inherited",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c411a0b1-50bb-464e-87fa-df6fce86e7ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCFNotInherited\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3 - Temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6b438d0-905e-4a60-8b34-04cae8760072",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"subscriptionDate\": \"2016-03-10\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79f192fa-e5cb-4b98-ab76-09529626ef63",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2015-02-01\",\n    \"endAgreementDate\": \"2015-05-01\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e06368a4-f281-440a-bbf3-ca182e383501",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_InheritedCF\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA_3_InheritedCF\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1422748800000);",
													"    pm.expect(jsonData.subscription.endAgreementDate).to.eql(1430438400000);",
													"    pm.expect(jsonData.subscription.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].stringValue).to.eql(\"subscriptionCFNotInherited\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].stringValue).to.eql(\"SUB_INHERITED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"subscriptionCFNotInherited\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_InheritedCF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_InheritedCF"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b094637-6ca6-4db8-865c-6cd070e9d668",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_UA_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_UA_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbbb57c7-2d86-4cdc-a906-e145a8423649",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "820fd875-cfac-40e3-84bd-c251d1dee381",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_NOT_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_NOT_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Inherited CF in Account",
							"item": [
								{
									"name": "Create CFT for CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c942df5-a74c-4e09-af19-972fddb92b61",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Customer\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d65778e0-5e67-4c8d-b97d-43e6b10b5fb9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"BillingAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92327fe8-fd5d-43cf-a34a-82ca18fc3773",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"CustomerAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fa9ad7e-0759-4567-a112-cc0fe68c18ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80a71930-e2a7-4021-95fc-a9f563ee1749",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_432@manaty.net\",\n    \"paymentMethod\": \"2\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"sellerCode\": \"SELLER_FR\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"CYC_INV_MT_1\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"75001\",\n    \"city\": \"Tunis\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "156ec563-aad1-4c28-9045-117a3f77d0ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customerCategory\": \"CLIENT\",\n    \"seller\": \"SELLER_FR\",\n    \"customerBrand\": \"DEFAULT\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueC1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueC2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1eb313b9-a8ef-42c5-8964-94b7b0f57ef0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customer\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"currency\": \"EUR\",\n    \"language\": \"FRA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6ce341e-8066-427e-a875-80bccd2212ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2016-04-01\",\r\n    \"subscriptionDate\": \"2016-01-01\",\r\n    \"electronicBilling\": true,\r\n    \"status\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}@manaty.net\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueBA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueBA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c275f936-4d0a-4579-b28a-a898a7cbcb41",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\r\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"address1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"address3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\",\r\n    \"status\": \"ACTIVE\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueUA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueUA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c31a5af-bccc-4545-88c9-dfb4288c30d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueC1\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueC2\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueCA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueCA2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        \"inheritedCustomField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueC1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueC2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82d3a1f7-5f53-4f9d-91c5-17557cad1c5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_BA\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5555f698-f2e5-43d0-81e4-b02ee1805df3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueUA1\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueUA2\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n            },\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueUA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueUA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cfbaf91-f0cb-4e7a-9222-d91f2d9797f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a79b0644-bc21-4924-896d-04fb8601205a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1509c1b2-f1a6-440f-97f2-d18c334f5632",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc8bdf93-533d-4b83-94c2-7d21b2497452",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fd1aed9-06cc-40da-b887-a33c5f7c0366",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59d76293-3fd1-4586-8f20-ea99eb3dce51",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/BillingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"BillingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b3610ab-1899-499e-af72-f9be404d9cb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"CustomerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "727f766a-0157-4acc-b76f-af34ebd79d1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/Customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"Customer"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5364fbca-d377-4597-88c0-1fd843e2b7ed",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 460);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c8da8781-6237-435d-9de6-f7a25596ce6b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EL expression tests",
					"item": [
						{
							"name": "Calling script from EL",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6eb335a-a71d-42d9-b934-d09962b697af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\n            import java.util.Map;\\n            import java.math.BigDecimal;\\n            import org.meveo.admin.exception.BusinessException;\\n            import org.meveo.model.admin.User;\\n            import org.meveo.model.crm.Provider;\\n            import org.meveo.model.BusinessEntity;\\n            import org.slf4j.Logger;\\n            import org.slf4j.LoggerFactory;\\n            public class The{{baseEntityPrefix}}_ScriptEL extends Script {\\n                private static final Logger log = LoggerFactory.getLogger(The{{baseEntityPrefix}}_ScriptEL.class);\\n                public void execute(Map<String,Object> context) throws BusinessException{\\n                    log.debug(\\\"The{{baseEntityPrefix}}_ScriptEL called\\\");\\n                    context.put(Script.RESULT_VALUE, ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode()!=null && ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode().startsWith(\\\"EL_\\\"));                 \\n                }\\n            }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT on Charge",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94a4af0c-2a8e-4047-9170-7abce7c239b0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"description\": \"Field visible on entities with code starting 'EL_'\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"ChargeTemplate\",\n    \"defaultValue\": \"KUKU\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": true,\n    \"applicableOnEl\": \"#{mv:executeScript(entity,'org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL', null, entity.auditable.creator)}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recuring Charge OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06b7215d-981a-4aba-b3c1-880a061bfc63",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC1\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6eb2934b-f4e4-4b6c-bffa-74e85092ccc0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customFieldTemplateCode\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"appliesTo\": \"ChargeTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{baseEntityPrefix}}_CFT_EL_SCRIPT/ChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{baseEntityPrefix}}_CFT_EL_SCRIPT",
												"ChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Script Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43067320-fb7d-4d60-9ea0-01a7e31c70db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Charge filter expression",
							"item": [
								{
									"name": "Update recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc2d9a61-6128-4ab4-b544-d58f9841b3a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    },\n    \"filterExpression\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb01b09b-3be4-4eb4-b92c-c61f2eb0b126",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\n    \"subscriptionDate\": \"2018-01-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f93049a6-d40b-4bb2-969a-fab96961214e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"quantity\": \"2\",\n                \"subscriptionDate\": \"2018-01-01\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d770a79b-8c26-44dd-a73a-baf305e96953",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_CHARGE_FILTER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_CHARGE_FILTER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update recurring 3 - restore",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02ecc3e9-5b2f-4ee4-a6a2-e545e3b5e994",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "InvoiceType - EL AO",
							"item": [
								{
									"name": "Create Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "181d7dbb-b1e8-4e0c-a727-e410464afeaf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebd4dd94-3f0c-4529-8bbe-9d3d96db613e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"name\": \"{{baseEntityPrefix}}_EL_INV_OFFER1\",\n    \"disabled\": false,\n    \"offerServiceTemplate\": [\n        {\n            \"serviceTemplate\": {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\"\n            }\n        }\n    ],\n    \"lifeCycleStatus\": \"ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create InvoiceType - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c69a1245-4a5a-4a34-9e19-28c7662b323f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description_Created\",\n    \"occTemplateCode\": \"INV_REB\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"2\",\n        \"currentInvoiceNb\": \"1\"\n    },\n    \"sellerSequence\": {\n        \"SELLER_FR\": {\n            \"prefixEL\": \"SellFact_\",\n            \"sequenceSize\": \"9\",\n            \"currentInvoiceNb\": \"9\"\n        }\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"matchingAuto\": false,\n    \"billingTemplateName\": \"BTN\",\n    \"billingTemplateNameEL\": \"DEMO_#{invoice.id}\",\n    \"occTemplateCodeEl\": \"#{invoice.invoiceNumber.startsWith(\\\"Fact_\\\")?\\\"INV_STD\\\":\\\"INV_REB\\\"}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31ee00b5-340d-4862-a35a-9d63781f4f3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"dueDateDelay\": \"1\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceDateDelay\": \"1\",\n    \"invoiceTypeCode\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15cf76e8-06ef-49e9-889f-d16e87da948d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_43@manaty.net\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"sellerCode\": \"SELLER_US\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"toto\",\n    \"lastName\": \"toc\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"4050\",\n    \"city\": \"Los Banana\",\n    \"methodOfPayment\": [\n        {\n            \"paymentMethodType\": \"DIRECTDEBIT\",\n            \"bankCoordinates\": {\n                \"bankCode\": \"12456\",\n                \"branchCode\": \"23456\",\n                \"accountNumber\": \"34589324756\",\n                \"key\": \"45\",\n                \"iban\": \"1212\",\n                \"bic\": \"67789456\",\n                \"accountOwner\": \"Me and co\",\n                \"bankName\": \"Some bank\",\n                \"bankId\": \"78946\",\n                \"issuerNumber\": \"46789\",\n                \"issuerName\": \"Some issuer\",\n                \"ics\": \"5587\"\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "327bff3d-5de4-4f76-a84b-6bc72c802502",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"userAccount\": \"UA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"offerTemplate\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"subscriptionDate\": \"2050-10-13\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc3718e5-cc21-4268-9232-41d24b06f9ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae0089cc-8fc2-4088-9aa3-e4622f2382fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2050-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Charge CDR - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b246b642-9b00-4caa-9894-74363c7df9e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2050-10-13T00:00:00.000Z;1;{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO;USAGE",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate invoice - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8865661-cf7b-4e1f-a002-5fd18408a39c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"BA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2050-10-15\",\n    \"firstTransactionDate\": \"2050-10-01\",\n    \"lastTransactionDate\": \"2050-10-31\",\n    \"generatePDF\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DDRequestLotOp - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79abb82a-9800-4a8a-99db-c3fa9bf291e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fromDueDate\": \"2050-01-01T00:00:00Z\",\n    \"toDueDate\": \"2051-01-01T00:00:00Z\",\n    \"ddrequestOp\": \"CREATE\",\n    \"status\": \"WAIT\",\n    \"ddRequestBuilderCode\": \"SEPA_STD\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "AO Job - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa4a5d57-d9fe-4999-8847-1b98304c8f38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"AO_Job\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Account operations - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4331ae7-eaaf-4d10-9819-dcb80e397312",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"paging\": {\r\n        \"fullTextFilter\": null,\r\n        \"filters\": {\r\n            \"customerAccount.code\": \"CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\"\r\n        },\r\n        \"fields\": null,\r\n        \"offset\": null,\r\n        \"limit\": null,\r\n        \"sortBy\": \"id\",\r\n        \"sortOrder\": \"DESCENDING\",\r\n        \"totalNumberOfRecords\": 2,\r\n        \"loadReferenceDepth\": 0\r\n    },\r\n    \"accountOperations\": {\r\n        \"accountOperation\": [\r\n            {\r\n                \"id\": 2,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_03\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 21.240000000000,\r\n                \"amountWithoutTax\": 18.000000000000,\r\n                \"taxAmount\": 3.240000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 21.240000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_02\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 10.620000000000,\r\n                \"amountWithoutTax\": 9.000000000000,\r\n                \"taxAmount\": 1.620000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 10.620000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation/list?customerAccountCode=CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation",
												"list"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cd68ca5-0aaf-4a95-a1b1-fc22d9b2a5ea",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 73);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d55770a4-39fa-4035-b8aa-ec321f216a63",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Customization",
					"item": [
						{
							"name": "Reference Entity",
							"item": [
								{
									"name": "Create CFT with reference entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae75bd74-0d30-40c9-84eb-e671de87dfd5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"fieldType\": \"ENTITY\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityClazz\": \"org.meveo.model.crm.Customer\",\n    \"storageType\": \"SINGLE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - no wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bab82bc9-ff68-4f19-802e-3fb938f56e38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - with wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "562e7ce1-84f1-4fd7-a466-73ad9004bc17",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100&wildcode=2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												},
												{
													"key": "wildcode",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List per entity instance - el evaluated",
							"item": [
								{
									"name": "Create CFT Offer visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32aa7d99-342f-4cb0-ab41-91d647d77b86",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"VISIBLE\",\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Offer hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0590a725-a244-4ecd-91e1-76591b25cc10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"HIDDEN\",\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query visible CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2840999a-43a3-425f-a459-211c4c4dff27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.field[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.field[0].description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa391a78-84ca-4378-a97d-8f6ddafba2fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad54e2b8-b66c-420a-9589-7aec1e880d36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"description\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0bba534-d20b-4d28-a9e6-bba4ccca7cc9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "List visible CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c74b98d7-2689-46f2-bfd7-698864312708",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.action[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.action[0].description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.entityCustomization.action[0].appliesTo).to.deep.equal(jsonBody.appliesTo);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65b6bb25-a17f-45eb-8de6-b43bea836616",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_HIDDEN/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_HIDDEN",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d0a4742-fe20-47d1-99ca-3110a249f9c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_VISIBLE/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_VISIBLE",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18f3a315-657e-461f-accd-65612937150c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Execute entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f5bb131-4516-4299-a9a3-56fa822806e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c252da4f-f3da-4fb6-918a-4f9b04cf2049",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}\",\n    \"description\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "124e3456-1570-4160-9126-ff1c88a1bb8b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityCode\": \"{{baseEntityPrefix}}_OFFER3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/action/execute/ExecuteCustomAction_{{index}}/OfferTemplate/{{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"action",
												"execute",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate",
												"{{baseEntityPrefix}}_OFFER3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43996058-1366-4d5d-8f71-33a072715f92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.offerTemplate.description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"action executed\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{baseEntityPrefix}}_OFFER3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87fdafbc-b2a4-46cc-a143-f6dc12069c67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "393c191a-27f2-4468-8238-dbd6433a0496",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script "
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d45a0c8f-8aaa-4dbb-abfe-9860759b441d",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 461);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6299320a-d1aa-4ee3-9321-749178541fbe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Security",
					"item": [
						{
							"name": "Setup Data",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52ccdae3-a953-4022-b69a-e7c80fe7e523",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c907a149-e520-454e-8ab0-c726571ba8f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9357a3e4-3ab3-42d5-b247-825d72918b0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f3fe435-d84c-4e6d-9867-d3eb1ecd598b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdf2055e-fa2f-4b68-a9f3-9ea3568ec059",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52c609de-c7a6-44fb-bc39-573318b6061d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Account Hierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "306c2b80-5c8c-45a0-8036-f3ca0ff6d19b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellers\": {\n        \"seller\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"currencyCode\": \"EUR\",\n                \"countryCode\": \"FR\",\n                \"languageCode\": \"FRA\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"currencyCode\": \"USD\",\n                \"countryCode\": \"US\",\n                \"languageCode\": \"ENG\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/customerHierarchyUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"customerHierarchyUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserHierarchyLevels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b39f1dd-40de-446a-bc3b-5be628d22741",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description1\",\n    \"orderLevel\": \"1\",\n    \"userHierarchyLevel\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 2\",\n            \"orderLevel\": \"1\",\n            \"userHierarchyLevel\": [\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 21\",\n                    \"orderLevel\": \"1\"\n                },\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 22\",\n                    \"orderLevel\": \"2\"\n                }\n            ]\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_3\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 3\",\n            \"orderLevel\": \"2\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcb7cea5-1b55-4626-9989-609499ef4949",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a203bcc-3664-48a2-aa47-33e36c8546aa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddb9fb20-d06e-4749-8bc5-94f4a0b0b66f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a1eff1e-da7a-4098-9a0a-bd9e1c519d1b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b06c301-be21-4920-8896-3d9c2329d198",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n      \"administrateur\"\n    ],\n    \"firstName\": \"Level 3\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserRole with userSelfManagement permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "443c8422-d703-4608-8835-236996d44417",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"description\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"permission\": [\n      {\n        \"permission\": \"userSelfManagement\",\n        \"name\": \"User Self Management\"\n      }\n    ]\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76825a36-f432-4b87-bc8a-f1ae27a3a10e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "740f3550-27fd-4476-b07f-ac917ff23335",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fea43de5-4dca-404b-9519-5f94de60abd3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_B\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b930848a-92f1-4b98-ae1b-e91f2c467611",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A,B,C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20ae227b-0c7f-453a-a44e-b4798fefb888",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_D\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\",\n        \"{{entityPrefix}}_{{index}}_SELLER_B\",\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff9abf26-8a62-4546-bfed-40ebab4db97e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"property\": \"secured.entities.enabled\",\n    \"value\": \"true\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller Tests",
							"item": [
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f9a64fc-0a64-416f-a525-3ae94a88f986",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7b0eb88-c2e4-41d4-9278-e8c50e2c641c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2ee46f4-bdbc-470d-a0be-79ceb7460c1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to MAIN_SELLER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4f08e63-d5ba-44d3-bef3-69d231f21ae7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"MAIN_SELLER\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d19b5917-cb28-4acc-a9b8-d9109ec0e08a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1f3c993-a360-4266-95e9-578802cea680",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61898474-dd44-4754-acee-e6e61efdde9a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "904cc8f8-6b2f-4680-929b-4e7bdb376a1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37cb8eed-4916-4999-b4b0-e34f1d3b31fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9ea9624-e38a-4a79-beec-98d9f34b4f05",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb9d7aad-b60d-4a7b-8265-d271249d9b8d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef24292a-9641-4d76-8651-c8f4bb44e300",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2f9d5b9-94ae-4d11-9a72-b47d3a4d1650",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f99706da-22cc-44f2-9cbc-e95a16141635",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11151b19-9570-44c5-98c6-e1b6868e91ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a3b9ba9-4bb5-4776-a3ee-b0678368c36d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cced44c-5110-4df0-8684-32ea5a30ca91",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de3e92e8-9f91-4d8e-bb55-067a7b5b2ff5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a836b13b-cf49-4057-9f51-d6b9f7829d2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        \n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ea16899-db5a-48e8-8dc6-9fdab5c43a1e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa75c51b-c2fb-46f3-a6f9-e69864b27f82",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98492d2a-0001-480c-89dc-4ae3a424951e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e68ce5d9-6074-4732-8014-824bb47e76c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a141a0d-6858-441a-8efa-5a5097df14bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8809bde5-f5e0-4ca5-a31c-1b489539906c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1116231-587d-49be-8b0d-40924457872f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7221490d-ff11-4159-976f-32e3a78a9148",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "834be561-42bc-480b-ad8c-88fb1b8b7b89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2d963a2-5802-434b-a954-03593d282b30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b97201af-d8d8-4435-8105-1977ab64ee30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "056ff8ad-999e-4ac6-80b4-76cd504641a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a620cb74-615c-4c40-9bac-3c101f01dead",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5db81063-0b5f-4def-b5ad-a794177906f7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92027f30-fcf9-4ee0-a865-d546ef3d4f39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf59048-4591-4745-9372-d58d7245add2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b47193f-1116-4810-aa2b-f79164d8ecc5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41036c68-0ce0-4f45-a64d-3d172572529c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b0c640c-526c-4cd1-9989-a165b3c509cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "880f3e3a-aeca-4cbd-a4dc-e8529585a984",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1e3aeda-6097-4880-9f29-739767c5534f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f80611e-30d9-49db-ad04-6341446b4db9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08a54a68-1d48-463d-a786-fe501fce7581",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4a58057-a810-43e2-8b46-f3ea5ce1a38d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acb80de5-a60a-44fe-a419-a0b5f8ec55e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a6bd76-7428-4c66-96a6-aa4ff05f79a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14c57e56-574a-4e0c-8e23-67f1d2318d43",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2846c895-1741-4152-813c-980458af5ee8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d1233f9-226a-4a63-9eae-e111d33981f7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69725afd-c79e-45ea-bce0-f00a4672940b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbc76bcb-b213-46e0-891b-3e43493fb6bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3367203e-9742-4043-acd9-5d8d958282db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f524110-a44b-4de6-9294-8046664a809e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f79eb5bc-1cce-496e-98be-af76291c6793",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "037ebb17-deaf-4735-8379-8de671b12f9b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ed607f3-21d0-4a57-99e7-fbedbe64af73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7ad663e-b630-461a-a4b8-490ab067ed24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "187123e1-a94f-4fb3-8da6-d6d006cfd9fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de280826-bb20-4b3d-8795-b3d1ec52cb39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_A\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1bdbdd2-d8d2-44cd-8e78-a25e51d042b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43ab3d5f-7147-4ff2-a2c4-885494306111",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a517b155-3d68-4460-8950-6c5529b17968",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ac4e50c-d719-49d3-bb29-6faf42ae2b8f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56db2025-ae5b-40ee-ac92-9fa1b8fb3c2d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcb16c52-480b-4d88-8bbb-b7dab677b283",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c78d3985-1559-447a-b40a-871f84dd1b8a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb6ab365-9461-468d-8d90-6926317719f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA and CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd4291dd-5765-435e-b3f7-f138f5f46400",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "951bbfc4-4ae8-477d-a3aa-4591fa3a1051",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA with all its CustomerAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2732882d-18dd-45a7-a927-52993bb4fd9e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0374d70d-705c-4384-954c-08fa8fd69628",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Billing Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9b08522-6c15-4a01-9719-40ed49944caa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "662d0bce-68eb-4796-8767-7deec31436f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cad0add2-9590-40e2-b92e-b2872197c7a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02c1951-f220-4452-9183-051143207080",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52379b0d-73a1-4c05-8913-bd32591a388d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "266cc231-6f55-45d4-a52f-8fc3b40c6862",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c1bec54-69c8-44dd-91dd-d32d4ffe6007",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a43dfb1e-0c59-465e-812f-930e0ab661df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1afd3281-278b-48da-a32c-fb9282f63119",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e40795a7-31fa-4af7-adda-3f2951b3e522",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c529bfd1-7378-4174-8e20-47c26a622c33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8df168a5-9f7d-43df-9bb3-35795b1e7c7e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2df0feed-5e1b-4453-a3fe-ff0dbfec0767",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fcd4af8-79b7-4e94-805d-49594dab15f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31af11a3-2b26-45dc-aa68-e4f8b2562465",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c867109-89ea-48de-a696-dba615fca7ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce001abb-9e87-40cd-8a9a-1bd1594adaba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73b5c6f2-ecb4-467e-9903-c125ebfd091d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10765fe4-9dcd-4850-a4d2-340ee4465014",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4255da3-88ae-4550-a618-1a0e044141f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff31b15f-ba23-457d-bbba-75d4ae77e687",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cd4e28c-3919-43f0-879c-002aa188a1ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "402924f8-fb9d-4d0a-873f-6706ccfcd1ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f0e12f3-6835-4bf7-bee9-af2b1a75014f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6db27eca-0b20-490b-8774-9faa3852a7f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c14bee6f-5f2b-49fd-85f4-916ce006b044",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e58677f-87d4-464a-9974-c6413eeed52f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1aba86b6-0b4c-4e9b-a226-bb2db9790d86",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8acb14f-4103-4f8b-8d29-c2448e615dd7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89213807-6195-4fa1-8912-b6701cd0246f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "374f9987-9984-4377-9487-b6450e38cc7f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f154355-4167-492e-8e3f-6a4a8b2a5a77",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66a6f14b-ca42-41d2-9fab-004487318bd9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5ae69a8-bf78-4968-9b12-00645a5467b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b80a0425-91a0-41c6-9ed4-cccea38e4ea6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6db26bf3-b4d9-465d-aa55-336051aee482",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6035c828-e8dc-464d-ad6c-4ac76bb46551",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74aac16f-7bd5-46ee-a6db-e3afb46fef40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05fb11b1-dfb9-40e3-9200-636f83fb05d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 and BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4e8865c-daf8-468e-973b-47c9673d5518",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 with all its BillingAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "756e6124-59fc-4844-8cef-17a7abf11f83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1b41866-49c2-4f29-a192-c0e8a3656925",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bce61c7-bf2a-4409-882c-b3675ee30619",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b6dbd60-2c1e-4e80-b2d1-b487680b540d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "867e0f9f-05e3-4eaf-8d18-378502a61caf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a6ca130-2fe9-4bed-bd5e-7700f3d98ad4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acd3dcb7-2cab-41ac-ad66-6fd5514c6ef1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0f9b77b-c97a-49a4-89cc-0773cfb4f56d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1dad2381-7082-48dc-bca4-071e1727be14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e434ac6a-cc21-4feb-8477-488efec4f824",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cc14747-af59-4c5b-92bc-6564e9ddd004",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd587f97-a0f2-416d-8983-c657ed6aef28",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1103a29c-422e-4257-a9bb-a06f8685104b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aff89001-fc23-4970-8636-4e701efcd5b9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "488fe3bd-02b1-4e39-867c-4d0fb2d71c64",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b2272d6-d443-4422-aa4c-57d1f7b6d3ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50aaa38d-65e7-43c7-ab94-63b7340913c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e170a36-dcdb-44f7-abb8-43a2c3907933",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d58638bc-b642-41b6-9dd2-caac84258b72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41fb1f1a-e261-4ba0-b046-2fdd949d2bea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "497d786b-5a52-4e67-92a0-7ebe601b1dd5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e6fd44e-5162-401d-875b-2a6f86fd5019",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6cbb01a-003f-4a83-84b6-bcc82960b509",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d101001a-67ee-427e-9162-108798779d94",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78228a3e-1810-49b1-af76-15acf94208ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0db33ad-6b86-41ba-a9d0-5617d43a5ddc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ead5929f-dc9d-4a9c-87d8-f83ab9ab6512",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4283d5ef-3ded-4c44-881c-8b0fe86c8c18",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1121bbd2-f082-4557-be17-d760202c83b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5c202b0-ebab-4ea6-98b5-d68b630fa16a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff646cd4-fc8c-48ad-91ca-29aad1de1bb9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4449673e-ab5b-4258-b4dc-a54b860352ac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "783df6c3-924a-4a30-a1d7-fa1b5b5b7453",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b03ab5f-0733-40f1-b4a4-9e48fd248d7d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc2f801a-171f-4311-a138-ab7cf40ce552",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a45c57ae-cbba-4951-8d82-12f055794fef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82370dc1-d42e-448c-a109-751dc8fd369e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0a533e7-a433-4c8b-b602-c2e535adc252",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4a4d64-1ef8-4247-a76e-d4a90d2fbd31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44c51342-abad-46b6-824b-9643961db2e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81a193cd-8647-4333-aa8e-2e565ac4215d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d37353a-c25b-404c-bb46-2c1bbfb7d56c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c503420-40ee-449a-baaa-e1e56ed60b2e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "795be8f1-f1bf-4c24-adf3-d02e868d2676",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e1418f0-c890-4970-b378-343da471808e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17e8ff14-96c2-40b8-86ba-b2a1a0fd9c2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40a40348-f487-46f1-af9f-81e158c2066c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ed6ae9c-b0a2-42b8-a06c-18c83e71893d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7071d7ff-b9b5-481a-9e9e-229a3c7ca0f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b679f25f-0d53-4863-b3be-270d0455ccdb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04183006-f913-4838-bbd1-70b3c2c1426e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 and UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dc86585-0b69-43b0-a473-a333fc84d364",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 with all its UserAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43773ca3-6f36-445c-852c-495ceeb7e62e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b5bbb61-ce3c-46e2-9ca8-1cc4e9204305",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AccountHierarchy API Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f787650-1dd0-4e68-8394-cae64604cebc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff26c84f-9e10-4a7c-8f61-cdc6d4804129",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1fa3d79-7453-4640-a9a6-a720098f4d3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41f78a7a-9b8f-4804-970a-3d47437e9835",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38a27e2b-3694-4f79-a253-5a875e5b2bfa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "839d4ac1-d186-4948-9f9b-4ff7a4137a26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5eb52c2c-8da0-4ccf-9fe9-32e0d520aa71",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c234b4b-8e19-4efb-a974-a686d30902e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86a61937-1a75-457d-9e3b-5253aa4bc5e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f84c9527-1d02-480b-942d-b541289b2ee7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2706a2d-0a62-457d-8337-97def950f85b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50e05b53-e086-40aa-ba1d-dd6b8ddf982c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d8a0a5a-5f29-48a5-94d6-c1b2eaf9f845",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab3bc649-1a67-47d6-9478-d332156ff2d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13afa081-2193-429d-bf15-22116fe9040b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67e24c9f-ae82-401d-ad72-f6d0b3830fb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d8382f7-25d5-47da-97f3-7fe513ff4074",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CRM-CUST only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f11ae1f0-a783-462f-b0e0-b7f3ced78ef1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8f67b14-e269-4a93-ba84-2b112df13dee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CRM_CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b165c977-4024-4782-8521-a1a817d52ab9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"M\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CRM-CUST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c3db6a0-b267-4a4c-9dfe-f6a90ad81bdd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Offer templates",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc60c9b6-48b7-42f4-95d6-00fa86d4ca6b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fce76504-f961-4444-aad4-6583fbcd40ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60d7f5ab-37ef-4438-a57c-0f53b9343519",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18629dba-1303-45f0-b0f7-aa320b25eb16",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69ad51fd-a746-470b-a9ad-c83d31beca25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dd61189-bd8e-4355-a293-81058edf51b3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b7af388-bd0c-42ce-a953-588268bb0a56",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "959b72d2-495e-4778-b39e-a4c1e4b6c534",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show B and C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5cc1bf9-04da-4eb9-9dd4-896bf223a85f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af1e2d32-7449-4217-ac58-95da3b2420c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a524688-1b0c-4dc7-a58c-e8c66927f867",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98922224-ed4c-4036-aafa-2a842f6934a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_C only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee438a5f-fd80-44c6-880e-19bd21b9af00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa119018-fe9b-43e6-b82c-18c8a3c0e9a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe4d0ae9-3cda-4eee-a8e2-8d7469789a17",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cc9d42a-6b28-453e-8682-80b986611ed7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "041134d3-0b11-4148-a2ef-27f9d656c5dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "716f117f-efc0-45bb-bbc5-42ffbac2ccb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - show only C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea297973-a84e-4347-aa88-a6a2519bb898",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(3);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - do not show C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "835c2908-192b-4e97-aab3-25b1414bc5b9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(2);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filters\": {\n        \"not-inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\",\n        \"like code\": \"{{entityPrefix}}_{{index}}_*\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Data",
							"item": [
								{
									"name": "Set securedEntities=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c1f13a3-e643-4a54-8307-47d68d50c06a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"property\": \"secured.entities.enabled\",\n    \"value\": \"false\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faa72b13-aad1-4c14-a50c-549e7c092fa3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "037a0143-c755-407c-99e6-bdc9321ef07c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d644aa5c-3719-4836-9680-57ae7510663b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b721c158-0822-448f-bf8c-d3660508d2f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e250ae35-a7e1-4027-9c07-bb272242fc5d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e73d4db7-4bca-4c87-a3a1-8ce9906637b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8533a04a-cbb4-49b9-a9e1-84e6986a8986",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3957360b-07dc-4274-bab4-4993588abad6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - D",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b4922b5-ff20-43a0-950d-ef76b0f6daa4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_D",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_D"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50267153-31c9-47c5-a62d-e5b7632bb660",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94109896-0e8f-4a50-8a04-ce32f72cd645",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_A does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eeaae1a-6f47-48bf-9fb3-2045d9e901a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd017ad8-6f2b-49b0-89be-efeae0590928",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3b034b1-a93c-4328-97f7-9d7730504158",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_B does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e919729-704e-481f-aa66-01696cc8f8c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d67a92b-44d5-4417-866c-56d51ae9274a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d925eeb-9a0e-43d2-a4c4-c855e8232fc6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67450f5b-f885-4005-8675-826e7c572440",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49c91114-61a5-4e02-81b9-ec2795acdbe1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql()",
													"    ;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level21",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a94fcafe-f352-4fe2-9087-5a71b76d50d4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level22",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level22"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daf117dc-3873-409d-92d5-21fa9bb527bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove UserHierarchyLevel 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddaf0388-3720-415e-a988-92fab21bd393",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"hierarchyLevelCode\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel/{{entityPrefix}}_{{index}}_LEVEL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel",
												"{{entityPrefix}}_{{index}}_LEVEL_1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5097de46-8915-41e6-a4d6-76801e359bfa",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 34);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d1b0fd2-0514-4c93-a3b0-7276cdf771df",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflow executions",
					"item": [
						{
							"name": "Test data",
							"item": [
								{
									"name": "Create customer account for WF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79cab7f6-2c6b-4b51-ba9e-d1ea483f9eed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"description\": \"testWF_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}@manaty.net\",\r\n        \"phone\": \"00123456789\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"mandateIdentification\": \"1234569548\",\r\n    \"mandateDate\": \"2016-03-10\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"status\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance for Action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68c37ab6-4943-490d-ba80-ca9838c2f957",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.TheAction\",\r\n    \"description\": \"The Action Script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\nimport java.util.Map;\\nimport java.math.BigDecimal;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.crm.Provider;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\npublic class TheAction extends Script {  \\n  private static final Logger log = LoggerFactory.getLogger(TheAction.class);\\npublic void execute(Map<String,Object> context) throws BusinessException{\\nlog.debug(\\\"\\\\nTheAction Execution\\\\n\\\");\\ncontext.put(Script.RESULT_VALUE, \\\"A string response\\\");\\n}\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Dunning WFType Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47e445ee-620c-4521-b8d3-924f690e7c95",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"description\": \"DunningWFTypeScript\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.List;\\n\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.DunningLevelEnum;\\nimport org.meveo.service.script.wf.WFTypeScript;\\n\\n\\npublic class DunningWFTypeScript extends WFTypeScript<CustomerAccount>{\\n\\n  public DunningWFTypeScript() {    \\n  }\\n  \\n  public DunningWFTypeScript(CustomerAccount e) {\\n    super(e);\\n  }\\n  @Override\\n  public List<String> getStatusList() {    \\n    List<String> values = new ArrayList<String>();\\n    for (DunningLevelEnum dunningLevelEnum : DunningLevelEnum.values()) {\\n      values.add(dunningLevelEnum.name());\\n    }\\n    return values;\\n  }\\n\\n  @Override\\n  public void changeStatus(String newStatus) {\\n    entity.setDunningLevel(DunningLevelEnum.valueOf(newStatus));\\n    entity.setDateDunningLevel(new Date());\\n  }\\n\\n  @Override\\n  public String getActualStatus() {    \\n    return entity.getDunningLevel().name();\\n  }\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with natif WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31ecf924-e99b-426c-8713-f8c004c47084",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningWorkflow\",\r\n    \"description\": \"Dunning workflow from class\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.admin.wf.types.DunningWF\",\r\n    \"initStatus\": \"R0\",\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R0\",\r\n            \"toStatus\": \"R1\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R1\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with runTime WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bf6e31d-6284-4991-a0f8-215e427ecce5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningRunTimeWF\",\r\n    \"description\": \"Dunning workflow from script\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"initStatus\": \"R0\",\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R1\",\r\n            \"toStatus\": \"R2\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R2\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "find & execute",
							"item": [
								{
									"name": "find workflow by entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "618ce3bd-238b-4dae-8160-8d1175b7f201",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/findByEntity?baseEntityName=org.meveo.model.payments.CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"findByEntity"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - NatitType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44b42a15-be38-43e8-82db-ca8b55d46f35",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"baseEntityName\": \"org.meveo.model.payments.CustomerAccount\",\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"workflowCode\": \"{{baseEntityPrefix}}_DunningWorkflow\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode=RS_FULL_{{index}}_WF_CA&workflowCode={{entityPrefix}}_DunningWorkflow",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "RS_FULL_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{entityPrefix}}_DunningWorkflow"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - scriptType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd7cef2a-675c-44be-9ba3-b00e01367e9c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"baseEntityName\": \"org.meveo.model.payments.CustomerAccount\",\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"workflowCode\": \"{{baseEntityPrefix}}_DunningRunTimeWF\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode=RS_FULL_{{index}}_WF_CA&workflowCode={{entityPrefix}}_DunningRunTimeWF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "RS_FULL_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{entityPrefix}}_DunningRunTimeWF"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wf history",
							"item": [
								{
									"name": "findHistory-no criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95b581aa-7559-4212-bcfe-313b2f272329",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											]
										}
									},
									"response": []
								},
								{
									"name": "findHistory-with criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b7ac1ca-04c3-4def-8d02-83dc2cd352b5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"fromStatus\": \"R1\",\r\n    \"toStatus\": \"R2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode=RS_FULL_{{index}}_WF_CA&fromStatus=R1&toStatus=R2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											],
											"query": [
												{
													"key": "entityInstanceCode",
													"value": "RS_FULL_{{index}}_WF_CA"
												},
												{
													"key": "fromStatus",
													"value": "R1"
												},
												{
													"key": "toStatus",
													"value": "R2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8eaeb4c3-d6d3-4488-9054-51ab02f1c61c",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 34);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3be22ce5-20cb-47c6-b3b9-58451748021b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter search and invoicing",
					"item": [
						{
							"name": "Data model",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29b0f2fc-4a3a-4e15-90ac-b1744b4bf8fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-02-01\",\n    \"endAgreementDate\": \"2017-02-01\"\n  }\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad5ba198-37a7-4180-ae6e-c5f266e07810",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-02-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create RatedTransactions Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cf13d5e-7156-4680-8170-815a3e2cf287",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\",\n    \"description\": \"Rated transactions for invoicing test\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n    <primarySelector>\\n    <targetEntity>org.meveo.model.billing.RatedTransaction</targetEntity>\\n    <alias>r</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>description</field>\\n      <field>usageDate</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                  <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>usageDate</fieldName>\\n                    <operator><![CDATA[<=]]></operator>\\n                    <operand>date:01/05/2016</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>code</fieldName>\\n                    <operator>=</operator>\\n                    <operand>{{baseEntityPrefix}}_REC1</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n</filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rated Transaction Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75401dd4-fa7e-41ae-bf40-3d9657037b84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search from filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8daa41b-a323-4082-85de-7b2cf15d1c63",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Body matches string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"<code>\"+pm.environment.get(\"baseEntityPrefix\")+\"_OS1</code>\");",
													"    pm.expect(pm.response.text()).to.include(\"<code>\"+pm.environment.get(\"baseEntityPrefix\")+\"_REC1</code>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a77b4c7-7bfd-40ce-bb02-7a4d73abab73",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 456);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35b64c31-a940-48f4-b8b3-51a6e9ea5314",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Jobs",
					"item": [
						{
							"name": "Job Reporting",
							"item": [
								{
									"name": "Execute 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0ea4339-0d41-4016-9030-a7f5ecce5312",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.contain(\"\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"job_id\", jsonData.actionStatus.message);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2d0dff4-1fe2-4f21-bae4-a346fbb12a02",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04bb76a8-6e59-4806-8b35-4489cd5fbea5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?code=M_Job",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "code",
													"value": "M_Job"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3162a183-d890-4454-ade2-96012c9f8892",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"    pm.expect(jsonData.jobExecutionResultDto.id).to.deep.equal(jsonBody.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": {{job_id}},\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?id={{job_id}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "id",
													"value": "{{job_id}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# FullCRUD\r\n\r\nHere are migrated scenarios from Soap FullCRUD.\r\n\r\n## Table\r\n\r\n| Scenarios                        | State       |\r\n|----------------------------------|-------------|\r\n| Setup base data                  | OK          |\r\n| Service workflow                 | OK          |\r\n| Subscription workflow            | OK          |\r\n| Subscription with Inherited CF   | OK          |\r\n| EL expression tests              | OK          |\r\n| Custom Fields in Filters         | todo        |\r\n| Entity Customization             | OK          |\r\n| Entity Security                  | OK          |\r\n| Workflow executions              | OK          |\r\n| Filter search and invoicing      | todo        |\r\n| Inbound Request Tests            | todo        |\r\n| Jobs                             | todo        |\r\n| Reporting                        | todo        |\r\n| GDPR Erasure                     | todo        |\r\n| Remove base data                 | todo        |\r\n| Banking Calendar and Date status | todo        |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7008b0b2-5a3b-425f-87b4-cb4df71715b8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dc5d7ad5-5982-413f-9f7f-c73c2a225e27",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
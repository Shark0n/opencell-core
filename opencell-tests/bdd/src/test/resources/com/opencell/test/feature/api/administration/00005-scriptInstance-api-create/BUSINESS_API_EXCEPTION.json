{
    "code": "org.meveo.service.script.TestScript",
    "description": "Test 3604 Script",
    "type": "JAVA",
    "script": "package org.meveo.service.script;\r\n\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.commons.utils.StringUtils;\r\nimport org.meveo.model.payments.CustomerAccount;\r\nimport org.meveo.model.payments.MatchingStatusEnum;\r\nimport org.meveo.model.payments.RecordedInvoice;\r\nimport org.meveo.service.payments.impl.CustomerAccountService;\r\nimport org.meveo.service.payments.impl.RecordedInvoiceService;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.logging.Logger;\r\n\r\n/**\r\n *\r\n * @author Mounir Bahije\r\n *\r\n *         Script executed to Test3604Script\r\n *\r\n */\r\npublic class Test3604Script extends Script {\r\n\r\n    private final static Logger logger = Logger.getLogger(Test3604Script.class.getName());\r\n\r\n//    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\"PaymentMethodService\");\r\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\"CustomerAccountService\");\r\n\r\n    private RecordedInvoiceService recordedInvoiceService = (RecordedInvoiceService) getServiceInterface(\"RecordedInvoiceService\");\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\r\n\r\n        String caCode = (String) methodContext.get(\"ca\");\r\n        String matchingStatus = (String) methodContext.get(\"matchingStatus\");\r\n        String missingParameters = \"\";\r\n        if (StringUtils.isBlank(caCode)) missingParameters = missingParameters + \" ca \" ;\r\n        if (StringUtils.isBlank(matchingStatus)) missingParameters = missingParameters + \" matchingStatus \" ;\r\n\r\n        if (StringUtils.isBlank(missingParameters)) {\r\n\r\n            CustomerAccount ca = customerAccountService.findByCode(caCode);\r\n            MatchingStatusEnum matchingStatusEnum = MatchingStatusEnum.O;\r\n\r\n            if (\"O\".equalsIgnoreCase(matchingStatus)) matchingStatusEnum = MatchingStatusEnum.O;\r\n            else if (\"L\".equalsIgnoreCase(matchingStatus)) matchingStatusEnum = MatchingStatusEnum.L;\r\n            else if (\"P\".equalsIgnoreCase(matchingStatus)) matchingStatusEnum = MatchingStatusEnum.P;\r\n            else if (\"C\".equalsIgnoreCase(matchingStatus)) matchingStatusEnum = MatchingStatusEnum.C;\r\n            else if (\"I\".equalsIgnoreCase(matchingStatus)) matchingStatusEnum = MatchingStatusEnum.I;\r\n            else if (\"R\".equalsIgnoreCase(matchingStatus)) matchingStatusEnum = MatchingStatusEnum.R;\r\n\r\n            List<RecordedInvoice> listRecordedInvoice = recordedInvoiceService.getRecordedInvoices(ca, matchingStatusEnum, false);\r\n            if (StringUtils.isBlank(listRecordedInvoice)) {\r\n                methodContext.put(\"Result : \", \"No matchingStatus \" + matchingStatus);\r\n            } else {\r\n                methodContext.put(\"Result : \", \"Number of matchingStatus \" + matchingStatus + \" is \" + listRecordedInvoice.size());\r\n            }\r\n        } else {\r\n            methodContext.clear();\r\n            methodContext.put(\"Result : \", \"Missing parameters : \" + missingParameters);\r\n        }\r\n    }\r\n}\r\n",
    "executionRoles": [],
    "sourcingRoles": []
}
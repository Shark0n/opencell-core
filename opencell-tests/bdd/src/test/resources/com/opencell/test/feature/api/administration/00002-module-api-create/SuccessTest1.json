{
	"code": "TEST",
	"description": "TEST",
	"license": "COM",
	"moduleItems": [

		{
			"script": {
			"code": "org.meveo.service.script.SaveIngenicoCardScript",
				"description": "Save Ingenico Card",
				"script": "package org.meveo.service.script;\\r\\n\\r\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\r\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\r\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\r\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\r\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\r\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\r\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\r\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\r\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\r\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\r\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\r\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\r\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\r\\nimport org.apache.commons.collections4.MapUtils;\\r\\nimport org.json.simple.JSONObject;\\r\\nimport org.json.simple.parser.JSONParser;\\r\\nimport org.json.simple.parser.ParseException;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.notification.InboundRequest;\\r\\nimport org.meveo.model.payments.CardPaymentMethod;\\r\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\r\\nimport org.meveo.model.payments.CustomerAccount;\\r\\nimport org.meveo.model.payments.PaymentGateway;\\r\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\r\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\r\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.HashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\n/**\\r\\n *\\r\\n * @author Mounir Bahije\\r\\n *\\r\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\r\\n *\\r\\n */\\r\\npublic class SaveIngenicoCardScript extends Script {\\r\\n\\r\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\r\\n\\r\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\"PaymentMethodService\\\");\\r\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\"CustomerAccountService\\\");\\r\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\"PaymentGatewayService\\\");\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\r\\n\\r\\n        String verification = \\\"\\\";\\r\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\"event\\\");\\r\\n\\r\\n        if (\\\"GET\\\".equalsIgnoreCase(inReq.getMethod())) {\\r\\n\\r\\n            String body = inReq.getBody();\\r\\n            Map<String, String> headers = inReq.getHeaders();\\r\\n            for (String headerKey : headers.keySet()) {\\r\\n                if (\\\"X-GCS-Webhooks-Endpoint-Verification\\\".equalsIgnoreCase(headerKey)) {\\r\\n                    String headerValue = headers.get(headerKey);\\r\\n                    verification = headerValue;\\r\\n                    inReq.setResponseBody(verification);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (\\\"POST\\\".equalsIgnoreCase(inReq.getMethod())) {\\r\\n\\r\\n            final String reqBody = inReq.getBody();\\r\\n\\r\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\r\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\"X-GCS-KeyId\\\");\\r\\n\\r\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\r\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\r\\n\\r\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\r\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\r\\n\\r\\n            PaymentResponse payment = webhooksEvent.getPayment();\\r\\n            if (payment == null) {\\r\\n                throw new BusinessException(String.format(\\\"PaymentResponse not found on webhooksEvent : [%s]\\\", webhooksEvent));\\r\\n            }\\r\\n\\r\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\r\\n            if (paymentOutput == null) {\\r\\n                throw new BusinessException(String.format(\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\", payment));\\r\\n            }\\r\\n\\r\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\r\\n            if (paymentReferences == null) {\\r\\n                throw new BusinessException(String.format(\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\", paymentOutput));\\r\\n            }\\r\\n\\r\\n            String merchantReference = paymentReferences.getMerchantReference();\\r\\n\\r\\n            if (merchantReference.lastIndexOf(\\\"_-_\\\") >= 0) {\\r\\n\\r\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\"_-_\\\") + 3);\\r\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\r\\n\\r\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\r\\n\\r\\n                if (paymentGateway == null) {\\r\\n                    throw new BusinessException(\\\"paymentGateway is null\\\");\\r\\n                }\\r\\n\\r\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\r\\n                    throw new BusinessException(\\\"paymentGateway is not the good one\\\");\\r\\n                }\\r\\n\\r\\n                String status = payment.getStatus();\\r\\n                if (\\\"PENDING_CAPTURE\\\".equalsIgnoreCase(status)) {\\r\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\r\\n                    if (paymentStatusOutput == null) {\\r\\n                        throw new BusinessException(String.format(\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\", payment));\\r\\n                    }\\r\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\r\\n\\r\\n                    if (isAuthorized) {\\r\\n\\r\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\r\\n                        if (cardPaymentMethodSpecificOutput == null) {\\r\\n                            throw new BusinessException(String.format(\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\", paymentOutput));\\r\\n                        }\\r\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\r\\n\\r\\n                        JSONParser jsonParser = new JSONParser();\\r\\n                        JSONObject obj = null;\\r\\n                        try {\\r\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\r\\n                        } catch (ParseException e) {\\r\\n                            e.printStackTrace();\\r\\n                        }\\r\\n\\r\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\"payment\\\")).get(\\\"paymentOutput\\\")).get(\\\"cardPaymentMethodSpecificOutput\\\")).get(\\\"token\\\");\\r\\n                        if (StringUtils.isBlank(tokenId)) {\\r\\n                            throw new BusinessException(String.format(\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\", cardPaymentMethodSpecificOutput));\\r\\n                        }\\r\\n\\r\\n                        String merchantId = webhooksEvent.getMerchantId();\\r\\n\\r\\n                        try {\\r\\n\\r\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\r\\n\\r\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\r\\n\\r\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\r\\n\\r\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\r\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\r\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\r\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\r\\n                            paymentMethod.setCardNumber(cardNumber);\\r\\n                            paymentMethod.setCardType(cardType);\\r\\n                            paymentMethod.setCustomerAccount(ca);\\r\\n                            paymentMethod.setPreferred(true);\\r\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\r\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\r\\n                            paymentMethod.setOwner(ownerName);\\r\\n                            paymentMethod.setTokenId(tokenId);\\r\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\r\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\r\\n                                paymentMethodService.create(paymentMethod);\\r\\n                            }\\r\\n                        } catch (Exception e) {\\r\\n                            throw new BusinessException(\\\"Error on SaveIngenicoCardScript : \\\" + e.getMessage());\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    private CreditCardTypeEnum fromId(Integer id) {\\r\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\r\\n            if (es.getId().equals(id)) {\\r\\n                return es;\\r\\n            }\\r\\n        }\\r\\n        throw new IllegalArgumentException();\\r\\n    }\\r\\n\\r\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\r\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\r\\n        if (MapUtils.isNotEmpty(headers)) {\\r\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\r\\n        }\\r\\n        return webhookHeaders;\\r\\n    }\\r\\n\\r\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\r\\n        String value = null;\\r\\n        for (RequestHeader header : requestHeaders) {\\r\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\r\\n                if (value == null) {\\r\\n                    value = header.getValue();\\r\\n                } else {\\r\\n                    throw new SignatureValidationException(\\\"enocuntered multiple occurrences of header '\\\" + headerName + \\\"'\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if (value == null) {\\r\\n            throw new SignatureValidationException(\\\"could not find header '\\\" + headerName + \\\"'\\\");\\r\\n        }\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\r\\n        try {\\r\\n            String query = \\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\";\\r\\n            Map<String, Object> queryParams = new HashMap<>();\\r\\n            queryParams.put(\\\"webhooksKeyId\\\", webhooksKeyId);\\r\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\r\\n            return ((List<String>)result).get(0);\\r\\n        } catch (Exception e) {\\r\\n            throw new BusinessException(String.format(\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\", webhooksKeyId));\\r\\n        }\\r\\n    }\\r\\n}",
				"type": "JAVA"
			}
		},
		{
			"notification" : {
			"updatedCode": null,
				"code": "SaveIngenicoCardInbound",
				"classNameFilter": "org.meveo.model.notification.InboundRequest",
				"eventTypeFilter": "INBOUND_REQ",
				"elFilter": "#{event.pathInfo.endsWith(\\\"/ingenico/saveCard\\\")}",
				"scriptInstanceCode": "org.meveo.service.script.SaveIngenicoCardScript",
				"scriptParams": {
					"event": "#{event}"
				},
				"counterTemplate": null
			}
		}
	]
}